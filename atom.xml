<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟空</title>
  
  <subtitle>悟空的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-08T02:44:38.324Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>monkey-kong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-10-08-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A3%81%E7%9B%98%E6%BB%A1%E4%BA%86.html"/>
    <id>http://yoursite.com/2020-10-08-常见问题/服务器磁盘满了.html</id>
    <published>2020-10-08T02:32:01.063Z</published>
    <updated>2020-10-08T02:44:38.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、服务器磁盘满了怎么办？"><a href="#1、服务器磁盘满了怎么办？" class="headerlink" title="1、服务器磁盘满了怎么办？"></a>1、服务器磁盘满了怎么办？</h2><h3 id="1-1-删除大文件"><a href="#1-1-删除大文件" class="headerlink" title="1.1 删除大文件"></a>1.1 删除大文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 查看磁盘使用量</span></div><div class="line">df -h</div><div class="line"><span class="meta">#</span><span class="bash"> 查找占用空间大的目录(逐层查找)</span></div><div class="line">du -sh *</div><div class="line"><span class="meta">#</span><span class="bash"> 直接查找大文件</span></div><div class="line">find / -size +400M</div><div class="line"><span class="meta">#</span><span class="bash"> 找到大文件然后删除</span></div></pre></td></tr></table></figure><h3 id="1-2-大文件已经删除，磁盘还是满的"><a href="#1-2-大文件已经删除，磁盘还是满的" class="headerlink" title="1.2 大文件已经删除，磁盘还是满的"></a>1.2 大文件已经删除，磁盘还是满的</h3><p>有可能是文件已经被删除，但有进程依然在使用它。在进程运行期间，Linux 不会释放该文件的存储空间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 查找到占用的进程</span></div><div class="line">lsof | grep deleted</div><div class="line"><span class="meta">#</span><span class="bash"> 直接停止进程货或者 <span class="built_in">kill</span> 掉</span></div></pre></td></tr></table></figure><h3 id="1-3-磁盘真的不够用"><a href="#1-3-磁盘真的不够用" class="headerlink" title="1.3 磁盘真的不够用"></a>1.3 磁盘真的不够用</h3><p>其余磁盘足够，可以通过软连接使用其余磁盘的空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、服务器磁盘满了怎么办？&quot;&gt;&lt;a href=&quot;#1、服务器磁盘满了怎么办？&quot; class=&quot;headerlink&quot; title=&quot;1、服务器磁盘满了怎么办？&quot;&gt;&lt;/a&gt;1、服务器磁盘满了怎么办？&lt;/h2&gt;&lt;h3 id=&quot;1-1-删除大文件&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-10-07-Spring%20Cloud/%E7%BD%91%E7%BA%A6%E8%BD%A6(1).html"/>
    <id>http://yoursite.com/2020-10-07-Spring Cloud/网约车(1).html</id>
    <published>2020-10-07T03:57:57.276Z</published>
    <updated>2020-10-07T03:59:55.302Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网约车整体架构图"><a href="#网约车整体架构图" class="headerlink" title="网约车整体架构图"></a>网约车整体架构图</h3><p><img src="../../images/texi/网约车整体架构图.png" alt=""></p><h3 id="乘客端整体设计"><a href="#乘客端整体设计" class="headerlink" title="乘客端整体设计"></a>乘客端整体设计</h3><p><img src="../../images/texi/乘客端整体设计.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;网约车整体架构图&quot;&gt;&lt;a href=&quot;#网约车整体架构图&quot; class=&quot;headerlink&quot; title=&quot;网约车整体架构图&quot;&gt;&lt;/a&gt;网约车整体架构图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;../../images/texi/网约车整体架构图.png&quot; alt=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-10-05-Spring%20Cloud/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86(3).html"/>
    <id>http://yoursite.com/2020-10-05-Spring Cloud/分布式会话管理(3).html</id>
    <published>2020-10-05T09:55:39.769Z</published>
    <updated>2020-10-05T16:07:09.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、什么是-SSO"><a href="#1、什么是-SSO" class="headerlink" title="1、什么是 SSO"></a>1、什么是 SSO</h2><p>多个系统使用一套认证服务。SSO 是为了解决一个用户在鉴权服务器登录过一次后，可以在任何应用中畅通无阻，一次登录，多系统访问。</p><h2 id="2、有状态会话与无状态会话"><a href="#2、有状态会话与无状态会话" class="headerlink" title="2、有状态会话与无状态会话"></a>2、有状态会话与无状态会话</h2><p>认证：验证账号密码对不对</p><p>授权：授予的权限</p><p>有状态会话：客户端有 Cookies，服务端有 Session，sessionId 对上了就找到了对应的 User 对象。也就找到了该对象的授权信息。</p><p>无状态会话：服务端不存 User 对象，而是把权限信息下发给客户端（UserID:权限信息）。微服务不主动、不拒绝、不负责。无状态体现在不服务端不存储权限信息（状态信息，以前服务端要存储 session，其实这是一个额外的负担，但是使用无状态会话，服务端完全可以不存储 token，但是服务端可以根据 token 来验证用户登录和权限，只需要把 token 给客户端就行）。这样可以实现在一个地方登录，就可以在整套系统使用。</p><p><img src="../../images/springcloud/jwt/有状态会话.png" alt=""></p><p><img src="../../images/springcloud/jwt/无状态会话.png" alt=""></p><h2 id="3、集群化-Session-共享"><a href="#3、集群化-Session-共享" class="headerlink" title="3、集群化 Session 共享"></a>3、集群化 Session 共享</h2><h3 id="3-1-架构分析"><a href="#3-1-架构分析" class="headerlink" title="3.1 架构分析"></a>3.1 架构分析</h3><p><strong>session 共享明显的缺点就是有会话的，用户客户端越多，产生的 session 也就越多，服务器需要维护 session。好处就是结构足够简单。</strong> </p><p><img src="../../images/springcloud/jwt/集群化session共享.png" alt=""></p><h3 id="3-2-SpringSession-Redis"><a href="#3-2-SpringSession-Redis" class="headerlink" title="3.2 SpringSession + Redis"></a>3.2 SpringSession + Redis</h3><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">spring.redis.host=localhost</div><div class="line">#spring.redis.password=</div><div class="line">spring.redis.port=6379</div><div class="line"></div><div class="line">spring.security.user.name=123</div><div class="line">spring.security.user.password=123</div><div class="line"></div><div class="line">server.port=81</div></pre></td></tr></table></figure><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        request.getSession().setAttribute(<span class="string">"list"</span>, <span class="string">"hi"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        String list = request.getSession().getAttribute(<span class="string">"list"</span>).toString();</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>验证：</p><ol><li>启动服务1，81端口</li><li>启动服务2，82端口</li><li>访问<code>http://localhost:81/</code>，登录</li><li>使用 postman 直接访问<code>http://localhost:82</code>，需要登录。把第三步的 SESSION 加入 cookies 中，无需登录即可访问。</li></ol><h2 id="4、OAuth2-0-原理、应用场景"><a href="#4、OAuth2-0-原理、应用场景" class="headerlink" title="4、OAuth2.0 原理、应用场景"></a>4、OAuth2.0 原理、应用场景</h2><p>统一认证，个性化授权。用户提交无状态 token，token 中可能带有 userid，role，但是针对不同系统，可能 role 对应的权限不同，所以还需要一个权限中心。</p><h2 id="5、OAuth2-0认证服务器资源服务器与第三方服务实现"><a href="#5、OAuth2-0认证服务器资源服务器与第三方服务实现" class="headerlink" title="5、OAuth2.0认证服务器资源服务器与第三方服务实现"></a>5、OAuth2.0认证服务器资源服务器与第三方服务实现</h2><h2 id="6、JWT-原理"><a href="#6、JWT-原理" class="headerlink" title="6、JWT 原理"></a>6、JWT 原理</h2><p>JSON Web Token。JWT 是一种基于 JSON 的令牌安全验证(在某些特定的场合可以替代 Session 或者 Cookie )，一次生成随处校验。<code>https://jwt.io/</code>。</p><h3 id="6-1-JWT组成"><a href="#6-1-JWT组成" class="headerlink" title="6.1 JWT组成"></a>6.1 JWT组成</h3><h4 id="头部信息-header"><a href="#头部信息-header" class="headerlink" title="头部信息(header)"></a>头部信息(header)</h4><p> <strong>作用</strong>：指定该 JWT 使用的签名算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    “alg”: “HS256”,// 签名算法</div><div class="line">    “typ”: “JWT” //token类型  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将上面的 json，用 Base64URL 算法转成字符串，即为 header。</p><h4 id="消息体playload"><a href="#消息体playload" class="headerlink" title="消息体playload"></a>消息体playload</h4><p><strong>作用</strong>：指定该 JWT 的请求数据</p><p>也就是负载的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;exp&quot; (expiration time)：过期时间</div><div class="line">&quot;sub&quot; (subject)：主题,一般用用户id,用来标识用户会话</div><div class="line">&quot;iat&quot; (Issued At)：签发时间</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h4 id="签名-signature"><a href="#签名-signature" class="headerlink" title="签名( signature)"></a>签名( signature)</h4><p>Signature 部分是对前两部分的签名，<strong>防止数据篡改</strong>。<br>需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret) header.payload.signature</div></pre></td></tr></table></figure><p><strong>头部、消息体、签名用 . 号连接</strong></p><p>最终：把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔连在一起就得到了我们要的 JWT。</p><h3 id="6-2-实现"><a href="#6-2-实现" class="headerlink" title="6.2 实现"></a>6.2 实现</h3><h4 id="JWT-工具类"><a href="#JWT-工具类" class="headerlink" title="JWT 工具类"></a>JWT 工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 密钥，仅服务端存储</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String secret = <span class="string">"ko346134h_we]rg3in_yip1!"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> subject</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> issueDate 签发时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(String subject, Date issueDate)</span> </span>&#123;</div><div class="line">        Calendar c = Calendar.getInstance();</div><div class="line">        c.setTime(issueDate);</div><div class="line">        c.add(Calendar.DAY_OF_MONTH, <span class="number">20</span>);</div><div class="line">        String compactJws = Jwts.builder()</div><div class="line">                .setSubject(subject)</div><div class="line">                .setIssuedAt(issueDate)</div><div class="line">                .setExpiration(c.getTime())</div><div class="line">                .signWith(io.jsonwebtoken.SignatureAlgorithm.HS512, secret)</div><div class="line">                .compact();</div><div class="line">        <span class="keyword">return</span> compactJws;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解密 jwt</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseToken</span><span class="params">(String token)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Claims claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();</div><div class="line">            <span class="keyword">if</span> (claims != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> claims.getSubject();</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.out.println(<span class="string">"jwt过期了"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String token = createToken(<span class="string">"userId:1,role:admin,price:200"</span>, <span class="keyword">new</span> Date());</div><div class="line">        System.out.println(<span class="string">"服务器下发token:"</span>+token);</div><div class="line">        System.out.println(<span class="string">"服务器解密token:"</span>+parseToken(token));</div><div class="line"></div><div class="line">        <span class="comment">// token = header.payload.sign</span></div><div class="line">        <span class="comment">// eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VySWQ6MSxyb2xlOmFkbWluLHByaWNlOjIwMCIsImlhdCI6MTYwMTkwOTMxMiwiZXhwIjoxNjAzNjM3MzEyfQ.h6eOdoqKXPpwxr46tiV95xSy4WpVB-HZjERz4G0pGQuZe5L-Mb0jiO7blLP-2fJMShuW5sanJn6wveolbh5UCg</span></div><div class="line">        String header = <span class="string">"eyJhbGciOiJIUzUxMiJ9"</span>;</div><div class="line">        String payload = <span class="string">"eyJzdWIiOiJ1c2VySWQ6MSxyb2xlOmFkbWluLHByaWNlOjIwMCIsImlhdCI6MTYwMTkwOTMxMiwiZXhwIjoxNjAzNjM3MzEyfQ"</span>;</div><div class="line">        String sign = <span class="string">"h6eOdoqKXPpwxr46tiV95xSy4WpVB-HZjERz4G0pGQuZe5L-Mb0jiO7blLP-2fJMShuW5sanJn6wveolbh5UCg"</span>;</div><div class="line">        <span class="comment">// &#123;"alg":"HS512"&#125;</span></div><div class="line">        System.out.println(<span class="string">"header 解密："</span>+ <span class="keyword">new</span> String(Base64.getDecoder().decode(header)));</div><div class="line">        <span class="comment">// &#123;"sub":"userId:1,role:admin,price:200","iat":1601909312,"exp":1603637312&#125;</span></div><div class="line">        System.out.println(<span class="string">"payload 解密："</span>+ <span class="keyword">new</span> String(Base64.getDecoder().decode(payload)));</div><div class="line">        <span class="comment">// sign = doSign(header + "." + payload)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="Filter-校验"><a href="#Filter-校验" class="headerlink" title="Filter 校验"></a>Filter 校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"authFilter"</span>, urlPatterns = <span class="string">"/**"</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        HttpServletRequest req = (HttpServletRequest)request;</div><div class="line">        String token = req.getHeader(<span class="string">"token"</span>);</div><div class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(token)) &#123;</div><div class="line">            <span class="comment">// 判断请求的 token 是否正常</span></div><div class="line">            String payload = JwtUtil.parseToken(token);</div><div class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(payload)) &#123;</div><div class="line">                System.out.println(<span class="string">"token 验证成功。"</span>);</div><div class="line">                chain.doFilter(request,response);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"token 验证失败，请求重新登录获取 token。。。"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"token 为空，请登录获取 token。。。"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"authFilter init finish..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="请求验证"><a href="#请求验证" class="headerlink" title="请求验证"></a>请求验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080</div><div class="line">postman 直接请求，提示 token 为空</div><div class="line">加上 token，提示 token 校验成功</div><div class="line">随便修改 token，校验失败</div></pre></td></tr></table></figure><p>防止截获 token，https或者二次加密。</p><p>为啥用途广，因为性能高，跨系统。</p><p>服务器端密文如何防止外泄？</p><ul><li>SpringCoud Config 下发配置，控制开发人员 prod</li><li>线上代码 syso -&gt; 日志</li><li>制度，一次直接开除</li></ul><h2 id="7、JWT-在微服务中的应用"><a href="#7、JWT-在微服务中的应用" class="headerlink" title="7、JWT 在微服务中的应用"></a>7、JWT 在微服务中的应用</h2><h2 id="8、使用-JWT-替换-SpringSecurity-Session-认证"><a href="#8、使用-JWT-替换-SpringSecurity-Session-认证" class="headerlink" title="8、使用 JWT 替换 SpringSecurity Session 认证"></a>8、使用 JWT 替换 SpringSecurity Session 认证</h2><p>SpringSecurity 中加入 Filter，拿到 token，解密 token 后拿到 userid，说明登录了，认证完成。</p><p>解密 token，拿到角色，也就拿到了权限。</p><p>所以 SpringSecurity 整合 JWT 意味着放弃了之前的基于 session 登录那一套，原来的一些基于 session 的注解可能不可用了。如果非要用，可以把拿到的无状态 token，包装成有状态的 session，这样也就丢失了 JWT 的无状态的优点，也会有数据不一致问题。</p><h2 id="9、JWT-Token-在浏览器-App-如何防止重放攻击？"><a href="#9、JWT-Token-在浏览器-App-如何防止重放攻击？" class="headerlink" title="9、JWT Token 在浏览器/App 如何防止重放攻击？"></a>9、JWT Token 在浏览器/App 如何防止重放攻击？</h2><p>XSS 攻击。嵌入非法 js 到系统。</p><h2 id="10、OAuth2-0-与-OpenID-对比"><a href="#10、OAuth2-0-与-OpenID-对比" class="headerlink" title="10、OAuth2.0 与 OpenID 对比"></a>10、OAuth2.0 与 OpenID 对比</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、什么是-SSO&quot;&gt;&lt;a href=&quot;#1、什么是-SSO&quot; class=&quot;headerlink&quot; title=&quot;1、什么是 SSO&quot;&gt;&lt;/a&gt;1、什么是 SSO&lt;/h2&gt;&lt;p&gt;多个系统使用一套认证服务。SSO 是为了解决一个用户在鉴权服务器登录过一次后，可以在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-10-05-Spring%20Cloud/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86(2).html"/>
    <id>http://yoursite.com/2020-10-05-Spring Cloud/分布式会话管理(2).html</id>
    <published>2020-10-05T00:25:31.610Z</published>
    <updated>2020-10-05T09:01:39.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、密码存储"><a href="#1、密码存储" class="headerlink" title="1、密码存储"></a>1、密码存储</h2><h3 id="1-1-常见密文存储的几种方式："><a href="#1-1-常见密文存储的几种方式：" class="headerlink" title="1.1 常见密文存储的几种方式："></a>1.1 常见密文存储的几种方式：</h3><p>摘要算法特点：快、不可逆、相同的源加密结果一样</p><ul><li>明文</li><li>hash(明文)</li><li>hash(明文 + 盐)</li></ul><p>盐的几种实现：</p><ul><li><p>统一的盐。密码丢失后，很可能猜到盐是啥。</p></li><li><p>用户名 手机号等 每个账户不一样。还是有一定规律，并且这些加盐的字段不能变。</p></li><li>随机盐（保存数据库）</li><li>随机盐（从密码取），把随机数直接放进 hash 值中</li></ul><h3 id="1-2-常见批结方式"><a href="#1-2-常见批结方式" class="headerlink" title="1.2 常见批结方式"></a>1.2 常见批结方式</h3><p><strong>暴力破解/字典/彩虹表</strong></p><h3 id="1-3-防止破解"><a href="#1-3-防止破解" class="headerlink" title="1.3 防止破解"></a>1.3 防止破解</h3><p>没有绝对安全的网络，即使拿不到密码 也可以发送重放攻击</p><ul><li>多次加盐取 hash</li><li>使用更复杂的单向加密算法比如 Bcrypt</li><li>使用 https</li><li>风控系统<ul><li>人机交互，二次安全校验</li><li>接口调用安全校验</li><li>异地登录等</li><li>大额转账</li></ul></li></ul><h3 id="Bcrypt结构"><a href="#Bcrypt结构" class="headerlink" title="Bcrypt结构"></a>Bcrypt结构</h3><p><img src="D:/01_code/05_mashibing/InternetArchitect/20 架构师三期 SpringCloud微服务架构/images/webp" alt="img"></p><h2 id="2、JDBC-用户存储"><a href="#2、JDBC-用户存储" class="headerlink" title="2、JDBC 用户存储"></a>2、JDBC 用户存储</h2><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=pass9876</div><div class="line">spring.datasource.url=jdbc:mysql://node02:3306:mq?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</div></pre></td></tr></table></figure><p>建表</p><p>Spring Security 默认情况下需要两张表，用户表和权限表，可以参考</p><p>org.springframework.security.core.userdetails.jdbc.users.ddl</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`authorities`</span>;</div></pre></td></tr></table></figure><p>配置JDBCManager用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 基于内存存储用户</span></div><div class="line">    <span class="comment">//        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();</span></div><div class="line">    <span class="comment">// 基于 JDBC 村粗用户</span></div><div class="line">    JdbcUserDetailsManager manager = <span class="keyword">new</span> JdbcUserDetailsManager(dataSource);</div><div class="line">    User user = <span class="keyword">new</span> User(<span class="string">"4"</span>, <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"4"</span>), <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, Collections.singletonList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"4"</span>)));</div><div class="line">    manager.createUser(user);</div><div class="line">    manager.createUser(User.withUsername(<span class="string">"5"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"5"</span>)).roles(<span class="string">"5"</span>).build());</div><div class="line">    <span class="keyword">return</span> manager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 注释掉后，所有默认配置失效。配置文件中的用户名和密码不生效了</span></div><div class="line">    <span class="comment">// super.configure(auth);</span></div><div class="line">    <span class="comment">// 基于内存</span></div><div class="line">    <span class="comment">//        auth.inMemoryAuthentication()</span></div><div class="line">    <span class="comment">//            .withUser("123").password(new BCryptPasswordEncoder().encode("123")).roles("admin")</span></div><div class="line">    <span class="comment">//            .and()</span></div><div class="line">    <span class="comment">//            .withUser("321").password(new BCryptPasswordEncoder().encode("321")).roles("user")</span></div><div class="line">    <span class="comment">//        ;</span></div><div class="line">    <span class="comment">// 基于 JDBC</span></div><div class="line">    JdbcUserDetailsManager manager = auth.jdbcAuthentication().dataSource(dataSource).getUserDetailsService();</div><div class="line">    <span class="keyword">if</span> (manager.userExists(<span class="string">"alvin"</span>)) &#123;</div><div class="line">        System.out.println(<span class="string">"用户已经注册"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        manager.createUser(User.withUsername(<span class="string">"alvin"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"pass9876"</span>)).roles(<span class="string">"admin"</span>,<span class="string">"sci"</span>).build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-1-自定义用户登录查询"><a href="#2-1-自定义用户登录查询" class="headerlink" title="2.1 自定义用户登录查询"></a>2.1 自定义用户登录查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 自定义 UserDetailsService 逻辑</span></div><div class="line">    auth.userDetailsService(<span class="keyword">new</span> MyUserDetailsService());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">        <span class="comment">// 在这里执行查询</span></div><div class="line">        System.out.println(<span class="string">"=====&gt;开始查询数据源。。。"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> Random().nextBoolean()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"用户已锁定"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"用户名或密码错误，请重试"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-自定义用户权限校验"><a href="#2-2-自定义用户权限校验" class="headerlink" title="2.2 自定义用户权限校验"></a>2.2 自定义用户权限校验</h3><p><strong>校验器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    MyUserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"====&gt;开始自定义验证。。。"</span>);</div><div class="line">        System.out.println(authentication);</div><div class="line"></div><div class="line">        <span class="comment">// 穷举密码，可以在这里做重试限制</span></div><div class="line"></div><div class="line">        String username = authentication.getPrincipal().toString();</div><div class="line">        String rawPassword = authentication.getCredentials().toString();</div><div class="line"></div><div class="line">        <span class="comment">// 查询用户信息</span></div><div class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(username);</div><div class="line"></div><div class="line">        <span class="comment">// 密码校验</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> BCryptPasswordEncoder().matches(rawPassword, userDetails.getPassword())) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username,userDetails.getPassword(),userDetails.getAuthorities());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"用户名或密码错误。"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>配置校验器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 自定义 UserDetailsService 逻辑</span></div><div class="line">    auth.userDetailsService(userDetailsService)</div><div class="line">        .and()</div><div class="line">        .authenticationProvider(authProvider);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、Remember-Me"><a href="#3、Remember-Me" class="headerlink" title="3、Remember Me"></a>3、Remember Me</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">http.</div><div class="line">    <span class="comment">// 哪些 地址需要登录</span></div><div class="line">    authorizeRequests()</div><div class="line">    <span class="comment">//所有请求都需要验证</span></div><div class="line">    .anyRequest().authenticated()</div><div class="line">    .and()</div><div class="line">    .formLogin()</div><div class="line">    .and()</div><div class="line">    .rememberMe()</div><div class="line">    .and()</div><div class="line">    .csrf().disable()</div></pre></td></tr></table></figure><p>其实是往 cookies 中添加了  remember-me ，有一个过期时间。</p><p>为什么不直接延长 JSESSIONID 的过期时间？</p><p>以为请求不一定是浏览器发起的，不一定有 session，remember-me 是基于 token 的。如果是集群，不会用 session，否则服务器压力太大。token 机制是无会话，只在首次登录</p><p>不管是服务器保存 session 还是 第三方保存 session 比如 redis，都是基于会话的，都是有状态的。</p><p>基于 token：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">MTIzOjE2MDMwNzgyMDY2MzU6NTlhZjZjMzJmMWYyYzkwZjVlMDYwZGRjZmJhZDE5YmY    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String rememberMe = <span class="string">"MTIzOjE2MDMwNzgyMDY2MzU6NTlhZjZjMzJmMWYyYzkwZjVlMDYwZGRjZmJhZDE5YmY"</span>;</div><div class="line">        <span class="keyword">byte</span>[] b = Base64.getDecoder().decode(rememberMe);</div><div class="line">        <span class="comment">// 用户名:过期时间:sign(用于校验签名两个值对不对)</span></div><div class="line">        <span class="comment">// 用户名+过期时间+secret=&gt;sign(secret 服务器端有，客户端没有)</span></div><div class="line">        <span class="comment">// 123:1603078206635:59af6c32f1f2c90f5e060ddcfbad19bf</span></div><div class="line">        <span class="comment">// 好处是不需要任何和数据源的校验</span></div><div class="line">        System.out.println(<span class="keyword">new</span> String(b));</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="4、同一用户多地点登录"><a href="#4、同一用户多地点登录" class="headerlink" title="4、同一用户多地点登录"></a>4、同一用户多地点登录</h2><p>禁止其他终端登录。此配置和记住我有冲突。</p><h3 id="踢掉其他已登录的用户"><a href="#踢掉其他已登录的用户" class="headerlink" title="踢掉其他已登录的用户"></a>踢掉其他已登录的用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.authorizeRequests().anyRequest().authenticated()</div><div class="line">        .and()</div><div class="line">        .formLogin()</div><div class="line">        .and()</div><div class="line">        <span class="comment">// 测试 remember me</span></div><div class="line">        <span class="comment">//.rememberMe()</span></div><div class="line">        <span class="comment">//.and()</span></div><div class="line">        <span class="comment">// 测试多地点登录限制</span></div><div class="line">        .sessionManagement()</div><div class="line">        .maximumSessions(<span class="number">1</span>)<span class="comment">// 地点个数</span></div><div class="line">        .maxSessionsPreventsLogin(<span class="keyword">true</span>)<span class="comment">// 保护登录，即不允许被挤下去</span></div><div class="line">        .and()</div><div class="line">        .and()</div><div class="line">        .csrf()</div><div class="line">        .disable()</div><div class="line">        ;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>及时清理过期session</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">HttpSessionEventPublisher <span class="title">httpSessionEventPublisher</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpSessionEventPublisher();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5、Spring-Security-防火前与-Sql-注入"><a href="#5、Spring-Security-防火前与-Sql-注入" class="headerlink" title="5、Spring Security 防火前与 Sql 注入"></a>5、Spring Security 防火前与 Sql 注入</h2><p>SpringSecurity 本身不支持 ip 地址黑白名单。可以使用 SpringBoot filter 拦截。但是一般应该把拦截前置，可直接在 Linux 配置防火墙或者在 Nginx 拦截。</p><p>SQL 注入解决：perparestatement，预编译。</p><p>DDOS：拒绝服务攻击。三次握手完，不发包；三次握手最后一个包不回。</p><h3 id="5-1-指定-ip-可以不登录"><a href="#5-1-指定-ip-可以不登录" class="headerlink" title="5.1 指定 ip 可以不登录"></a>5.1 指定 ip 可以不登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.antMatchers(<span class="string">"/ip1"</span>).hasIpAddress(<span class="string">"127.0.0.1"</span>)</div></pre></td></tr></table></figure><h3 id="5-2-禁止ip访问"><a href="#5-2-禁止ip访问" class="headerlink" title="5.2 禁止ip访问"></a>5.2 禁止ip访问</h3><p>用Filter 实现、或者用HandlerInterceptor 实现</p><h3 id="5-3-StrictHttpFirewall"><a href="#5-3-StrictHttpFirewall" class="headerlink" title="5.3 StrictHttpFirewall"></a>5.3 StrictHttpFirewall</h3><p>spring security 默认使用StrictHttpFirewall限制用户请求</p><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><p>缺省被允许的<code>HTTP method</code>有 [<code>DELETE</code>, <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, <code>PUT</code>]</p><h4 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h4><p><strong>在其<code>requestURI</code>/<code>contextPath</code>/<code>servletPath</code>/<code>pathInfo</code>中，必须不能包含以下字符串序列之一 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&quot;//&quot;,&quot;./&quot;,&quot;/…/&quot;,&quot;/.&quot;]</div></pre></td></tr></table></figure><h4 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;或者%3b或者%3B</div><div class="line">// 禁用规则</div><div class="line">setAllowSemicolon(boolean)</div></pre></td></tr></table></figure><h4 id="斜杠"><a href="#斜杠" class="headerlink" title="斜杠"></a>斜杠</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%2f`或者`%2F</div><div class="line">// 禁用规则</div><div class="line">setAllowUrlEncodedSlash(boolean)</div></pre></td></tr></table></figure><h4 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\或者%5c或者%5B</div><div class="line">// 禁用规则</div><div class="line">setAllowBackSlash(boolean)</div></pre></td></tr></table></figure><h4 id="英文句号"><a href="#英文句号" class="headerlink" title="英文句号"></a>英文句号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%2e或者%2E</div><div class="line">// 禁用规则</div><div class="line">setAllowUrlEncodedPeriod(boolean)</div></pre></td></tr></table></figure><h4 id="百分号"><a href="#百分号" class="headerlink" title="百分号"></a>百分号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%25</div><div class="line">// 禁用规则</div><div class="line">setAllowUrlEncodedPercent(boolean)</div></pre></td></tr></table></figure><h4 id="防火墙与sql注入"><a href="#防火墙与sql注入" class="headerlink" title="防火墙与sql注入"></a>防火墙与sql注入</h4><p>‘ ; – % 多数非法字符已经在请求的参数上被禁用</p><p>为啥用户名不能有特殊字符</p><p>preparestatement </p><p>awf前端拦截</p><h2 id="6、注销登录"><a href="#6、注销登录" class="headerlink" title="6、注销登录"></a>6、注销登录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.and()</div><div class="line">    .logout()</div><div class="line">    .logoutUrl(<span class="string">"/out"</span>)</div></pre></td></tr></table></figure><h2 id="7、退出登录、登录成功-失败控制器"><a href="#7、退出登录、登录成功-失败控制器" class="headerlink" title="7、退出登录、登录成功/失败控制器"></a>7、退出登录、登录成功/失败控制器</h2><h3 id="增加退出处理器"><a href="#增加退出处理器" class="headerlink" title="增加退出处理器"></a>增加退出处理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.addLogoutHandler(new LogoutHandler() &#123;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) &#123;</div><div class="line">// TODO Auto-generated method stub</div><div class="line">System.out.println(&quot;退出1&quot;);</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">.addLogoutHandler(new LogoutHandler() &#123;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) &#123;</div><div class="line">// TODO Auto-generated method stub</div><div class="line">System.out.println(&quot;退出2&quot;);</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="登录成功处理器"><a href="#登录成功处理器" class="headerlink" title="登录成功处理器"></a>登录成功处理器</h3><p>不同角色 跳转到不同页面</p><pre><code>.successHandler(new AuthenticationSuccessHandler() {    @Override    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,            Authentication authentication) throws IOException, ServletException {        // TODO Auto-generated method stub        System.out.println(&quot;登录成功1&quot;);        // 根据权限不同，跳转到不同页面        request.getSession().getAttribute(name)        request.getRequestDispatcher(&quot;&quot;).forward(request, response);    }})</code></pre><p>其中 Authentication 参数包含了 用户权限信息</p><h3 id="登录失败处理器"><a href="#登录失败处理器" class="headerlink" title="登录失败处理器"></a>登录失败处理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.failureHandler(new AuthenticationFailureHandler() &#123;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,</div><div class="line">AuthenticationException exception) throws IOException, ServletException &#123;</div><div class="line">// TODO Auto-generated method stub</div><div class="line">exception.printStackTrace();</div><div class="line">request.getRequestDispatcher(request.getRequestURL().toString()).forward(request, response);</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>可以限制登录错误次数</p><h4 id="常见登录异常"><a href="#常见登录异常" class="headerlink" title="常见登录异常"></a>常见登录异常</h4><p><strong>LockedException</strong> 账户被锁定</p><p><strong>CredentialsExpiredException</strong> 密码过期</p><p><strong>AccountExpiredException</strong> 账户过期</p><p><strong>DisabledException</strong> 账户被禁用</p><p><strong>BadCredentialsException</strong> 密码错误</p><p><strong>UsernameNotFoundException</strong> 用户名错误</p><h2 id="8、Ant-风格路径表达式"><a href="#8、Ant-风格路径表达式" class="headerlink" title="8、Ant 风格路径表达式"></a>8、Ant 风格路径表达式</h2><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>?</td><td>匹配任何单字符</td></tr><tr><td>*</td><td>匹配0或者任意数量的字符</td></tr><tr><td>**</td><td>匹配0或者更多的目录</td></tr></tbody></table><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><table><thead><tr><th>URL路径</th><th>说明</th></tr></thead><tbody><tr><td>/app/*.x</td><td>匹配(Matches)所有在app路径下的.x文件</td></tr><tr><td>/app/p?ttern</td><td>匹配(Matches) /app/pattern 和 /app/pXttern,但是不包括/app/pttern</td></tr><tr><td>/**/example</td><td>匹配(Matches) /app/example, /app/foo/example, 和 /example</td></tr><tr><td>/app/<em>*/dir/file.</em></td><td>匹配(Matches) /app/dir/file.jsp, /app/foo/dir/file.html,/app/foo/bar/dir/file.pdf, 和 /app/dir/file.java</td></tr><tr><td>/<em>*/</em>.jsp</td><td>匹配(Matches)任何的.jsp 文件</td></tr></tbody></table><h4 id="最长匹配原则"><a href="#最长匹配原则" class="headerlink" title="最长匹配原则"></a>最长匹配原则</h4><p>最长匹配原则(has more characters)<br>说明，URL请求 /app/dir/file.jsp，现在存在两个路径匹配模式/<em>*/</em>.jsp和/app/dir/<em>.jsp，那么会根据模式/app/dir/</em>.jsp来匹配</p><h4 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h4><p>security 像 shiro 一样，权限匹配有顺序，比如不能把 .anyRequest().authenticated() 写在其他规则前面</p><h2 id="9、基于角色的权限控制与继承"><a href="#9、基于角色的权限控制与继承" class="headerlink" title="9、基于角色的权限控制与继承"></a>9、基于角色的权限控制与继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">http.authorizeRequests()</div><div class="line">.antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</div><div class="line">.antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</div><div class="line">  </div><div class="line"><span class="meta">@Bean</span>        </div><div class="line"><span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</div><div class="line">RoleHierarchyImpl impl = <span class="keyword">new</span> RoleHierarchyImpl();</div><div class="line">impl.setHierarchy(<span class="string">"ROLE_admin &gt; ROLE_user"</span>);</div><div class="line"><span class="keyword">return</span> impl;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="10、细粒度方法级权限控制"><a href="#10、细粒度方法级权限控制" class="headerlink" title="10、细粒度方法级权限控制"></a>10、细粒度方法级权限控制</h2><p><strong>配置开启</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>,securedEnabled = <span class="keyword">true</span>)</div></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin/hi"</span>)</div><div class="line">    <span class="meta">@Secured</span>(<span class="string">"ROLE_admin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====&gt;来啦,老弟..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi admin..."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/hi"</span>)</div><div class="line">    <span class="comment">// 或者关系，@Secured 没法实现并且关系</span></div><div class="line">    <span class="meta">@Secured</span>(&#123;<span class="string">"ROLE_admin"</span>,<span class="string">"ROLE_user"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====&gt;来啦,老弟..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi user..."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin/hi3"</span>)</div><div class="line">    <span class="comment">// 并且关系</span></div><div class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ROLE_admin') AND hasRole('ROLE_user')"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hi3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====&gt;来啦,老弟..."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi admin 3..."</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin/hi4"</span>)</div><div class="line">    <span class="comment">// 可以写 spel 表达式，根据返回值判断是否有权限。</span></div><div class="line">    <span class="meta">@PostAuthorize</span>(<span class="string">"returnObject==1"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">hi4</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"=====&gt;来啦,老弟..."</span>);</div><div class="line">        <span class="comment">// 访问子系统，把当前用户角色带过去，让子系统校验是否有权限</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>获取当前用户权限信息和 UserDetails</strong></p><p>自己写权限校验时可能会用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">authentication.getPrincipal()</div></pre></td></tr></table></figure><h2 id="11、自定义前置-Filter-及图形验证码"><a href="#11、自定义前置-Filter-及图形验证码" class="headerlink" title="11、自定义前置 Filter 及图形验证码"></a>11、自定义前置 Filter 及图形验证码</h2><p>目的：防机器暴力登陆</p><p>人机交互/手机验证码：机器基本没法破解</p><p>数字图形机器识别简单一点，图片机器识别稍微麻烦一点，但是图形验证码现在基本上是不安全的了，因为机器学习算法给它点时间就能破解。</p><h3 id="Kaptcha"><a href="#Kaptcha" class="headerlink" title="Kaptcha"></a>Kaptcha</h3><table><thead><tr><th>Constant</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>kaptcha.border</td><td>图片边框，合法值：yes , no</td><td>yes</td></tr><tr><td>kaptcha.border.color</td><td>边框颜色，合法值： r,g,b (and optional alpha) 或者 white,black,blue.</td><td>black</td></tr><tr><td>kaptcha.image.width</td><td>图片宽</td><td>200</td></tr><tr><td>kaptcha.image.height</td><td>图片高</td><td>50</td></tr><tr><td>kaptcha.producer.impl</td><td>图片实现类</td><td>com.google.code.kaptcha.impl.DefaultKaptcha</td></tr><tr><td>kaptcha.textproducer.impl</td><td>文本实现类</td><td>com.google.code.kaptcha.text.impl.DefaultTextCreator</td></tr><tr><td>kaptcha.textproducer.char.string</td><td>文本集合，验证码值从此集合中获取</td><td>abcde2345678gfynmnpwx</td></tr><tr><td>kaptcha.textproducer.char.length</td><td>验证码长度</td><td>5</td></tr><tr><td>kaptcha.textproducer.font.names</td><td>字体</td><td>Arial, Courier</td></tr><tr><td>kaptcha.textproducer.font.size</td><td>字体大小</td><td>40px.</td></tr><tr><td>kaptcha.textproducer.font.color</td><td>字体颜色，合法值： r,g,b  或者 white,black,blue.</td><td>black</td></tr><tr><td>kaptcha.textproducer.char.space</td><td>文字间隔</td><td>2</td></tr><tr><td>kaptcha.noise.impl</td><td>干扰实现类</td><td>com.google.code.kaptcha.impl.DefaultNoise</td></tr><tr><td>kaptcha.noise.color</td><td>干扰 颜色，合法值： r,g,b 或者 white,black,blue.</td><td>black</td></tr><tr><td>kaptcha.obscurificator.impl</td><td>图片样式：<br>水纹 com.google.code.kaptcha.impl.WaterRipple <br> 鱼眼 com.google.code.kaptcha.impl.FishEyeGimpy <br> 阴影 com.google.code.kaptcha.impl.ShadowGimpy</td><td>com.google.code.kaptcha.impl.WaterRipple</td></tr><tr><td>kaptcha.background.impl</td><td>背景实现类</td><td>com.google.code.kaptcha.impl.DefaultBackground</td></tr><tr><td>kaptcha.background.clear.from</td><td>背景颜色渐变，开始颜色</td><td>light grey</td></tr><tr><td>kaptcha.background.clear.to</td><td>背景颜色渐变， 结束颜色</td><td>white</td></tr><tr><td>kaptcha.word.impl</td><td>文字渲染器</td><td>com.google.code.kaptcha.text.impl.DefaultWordRenderer</td></tr><tr><td>kaptcha.session.key</td><td>session key</td><td>KAPTCHA_SESSION_KEY</td></tr><tr><td>kaptcha.session.date</td><td>session date</td><td>KAPTCHA_SESSION_DATE</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="添加一个前置Filter"><a href="#添加一个前置Filter" class="headerlink" title="添加一个前置Filter"></a>添加一个前置Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.addFilterBefore(<span class="keyword">new</span> CodeFilter(), UsernamePasswordAuthenticationFilter.class);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">HttpServletRequest req = (HttpServletRequest)request;</div><div class="line">HttpServletResponse resp = (HttpServletResponse)response;</div><div class="line"></div><div class="line">String uri = req.getServletPath();</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(uri.equals(<span class="string">"/login"</span>) &amp;&amp; req.getMethod().equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</div><div class="line"></div><div class="line"></div><div class="line">String sessionCode = req.getSession().getAttribute(Constants.KAPTCHA_SESSION_KEY).toString();</div><div class="line">String formCode = req.getParameter(<span class="string">"code"</span>).trim();</div><div class="line"></div><div class="line"><span class="keyword">if</span>(StringUtils.isEmpty(formCode)) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"验证码不能为空"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(sessionCode.equalsIgnoreCase(formCode)) &#123;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"验证通过"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line">System.out.println(req.getSession().getAttribute(Constants.KAPTCHA_SESSION_KEY));</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"xx"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">chain.doFilter(request, response);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>显示验证码的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/kaptcha"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getKaptchaImage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       HttpSession session = request.getSession();</div><div class="line">       response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</div><div class="line">       response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store, no-cache, must-revalidate"</span>);</div><div class="line">       response.addHeader(<span class="string">"Cache-Control"</span>, <span class="string">"post-check=0, pre-check=0"</span>);</div><div class="line">       response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</div><div class="line">       response.setContentType(<span class="string">"image/jpeg"</span>);</div><div class="line">       String capText = captchaProducer.createText();</div><div class="line">       </div><div class="line">       session.setAttribute(Constants.KAPTCHA_SESSION_KEY, capText);</div><div class="line">       BufferedImage bi = captchaProducer.createImage(capText);</div><div class="line">       ServletOutputStream out = response.getOutputStream();</div><div class="line">       ImageIO.write(bi, <span class="string">"jpg"</span>, out);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           out.flush();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           out.close();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.mashibing.admin;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</div><div class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kaconfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">getDefaultKaptcha</span><span class="params">()</span></span>&#123;</div><div class="line">        DefaultKaptcha captchaProducer = <span class="keyword">new</span> DefaultKaptcha();</div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.border"</span>, <span class="string">"yes"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.border.color"</span>, <span class="string">"105,179,90"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.color"</span>, <span class="string">"blue"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.image.width"</span>, <span class="string">"310"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.image.height"</span>, <span class="string">"240"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.size"</span>, <span class="string">"30"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.session.key"</span>, <span class="string">"code"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, <span class="string">"4"</span>);</div><div class="line">    <span class="comment">//    properties.setProperty("kaptcha.textproducer.char.string", "678");</span></div><div class="line">        properties.setProperty(<span class="string">"kaptcha.obscurificator.impl"</span>, <span class="string">"com.google.code.kaptcha.impl.ShadowGimpy"</span>);</div><div class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.names"</span>, <span class="string">"宋体,楷体,微软雅黑"</span>);</div><div class="line">        Config config = <span class="keyword">new</span> Config(properties);</div><div class="line">        captchaProducer.setConfig(config);</div><div class="line">        <span class="keyword">return</span> captchaProducer;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="12、集群化服务之-Session-共享-SpringSession-Redis"><a href="#12、集群化服务之-Session-共享-SpringSession-Redis" class="headerlink" title="12、集群化服务之 Session 共享 SpringSession + Redis"></a>12、集群化服务之 Session 共享 SpringSession + Redis</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、密码存储&quot;&gt;&lt;a href=&quot;#1、密码存储&quot; class=&quot;headerlink&quot; title=&quot;1、密码存储&quot;&gt;&lt;/a&gt;1、密码存储&lt;/h2&gt;&lt;h3 id=&quot;1-1-常见密文存储的几种方式：&quot;&gt;&lt;a href=&quot;#1-1-常见密文存储的几种方式：&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(八)</title>
    <link href="http://yoursite.com/2020-10-04-Spring%20Cloud/SpringCloud(6)-config.html"/>
    <id>http://yoursite.com/2020-10-04-Spring Cloud/SpringCloud(6)-config.html</id>
    <published>2020-10-04T15:43:12.000Z</published>
    <updated>2020-10-08T14:56:34.450Z</updated>
    
    <content type="html"><![CDATA[<ul><li>配置中心</li><li>bus 消息总线同步刷新配置</li></ul><a id="more"></a><h2 id="1、配置中心"><a href="#1、配置中心" class="headerlink" title="1、配置中心"></a>1、配置中心</h2><h3 id="1-1-为什么需要配置中心？"><a href="#1-1-为什么需要配置中心？" class="headerlink" title="1.1 为什么需要配置中心？"></a>1.1 为什么需要配置中心？</h3><p>单体应用，配置写在配置文件中，没有什么大问题。如果要切换环境 可以切换不同的 profile（2种方式），但在微服务中。</p><ol><li><p>微服务比较多。成百上千，配置很多，需要集中管理。</p></li><li><p>管理不同环境的配置。</p></li><li><p>需要动态调整配置参数，更改配置不停服。</p></li></ol><h3 id="1-2-配置中心介绍"><a href="#1-2-配置中心介绍" class="headerlink" title="1.2 配置中心介绍"></a>1.2 配置中心介绍</h3><p>分布式配置中心包括 3 个部分：</p><ol><li>存放配置的地方：git ，本地文件 等。</li><li>config  server。从 1 读取配置。</li><li>config client。是 config server 的客户端，消费配置。</li></ol><p><img src="../../images/springcloud/configserver.png" alt=""></p><p><a href="https://m.sohu.com/a/116745628_466839" target="_blank" rel="external">https://m.sohu.com/a/116745628_466839</a></p><p>配置都不会自己更新，都是需要触发 client 才去 git 上拉取的。或者触发在 config-server 上查看配置时，才去 git 上拉取。</p><h3 id="1-3-服务搭建-基于-Github"><a href="#1-3-服务搭建-基于-Github" class="headerlink" title="1.3 服务搭建-基于 Github"></a>1.3 服务搭建-基于 Github</h3><h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/Monkey-kong/config-center.git</div></pre></td></tr></table></figure><p>上传配置 ribbon-consumer.dev.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myconfig=&quot;config test v1&quot;</div></pre></td></tr></table></figure><h4 id="2-创建配置中心服务"><a href="#2-创建配置中心服务" class="headerlink" title="2. 创建配置中心服务"></a>2. 创建配置中心服务</h4><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring.application.name=config-server</div><div class="line">server.port=9999</div><div class="line">eureka.client.service-url.defaultZone=http://alvin:pass9876@localhost:8761/eureka/</div><div class="line"># 拉取配置的仓库地址</div><div class="line">spring.cloud.config.server.git.uri=https://github.com/Monkey-kong/config-center.git</div><div class="line"># 仓库的分支</div><div class="line">spring.cloud.config.label=master</div></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableConfigServer</span></div></pre></td></tr></table></figure><h4 id="3-配置匹配规则"><a href="#3-配置匹配规则" class="headerlink" title="3. 配置匹配规则"></a>3. 配置匹配规则</h4><p><strong>注意文件名称格式必须按照规则来</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">获取配置规则：根据前缀匹配</div><div class="line">/&#123;name&#125;-&#123;profiles&#125;.properties</div><div class="line">/&#123;name&#125;-&#123;profiles&#125;.yml</div><div class="line">/&#123;name&#125;-&#123;profiles&#125;.json</div><div class="line">/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yml</div><div class="line"></div><div class="line">name 服务名称</div><div class="line">profile 环境名称，开发、测试、生产：dev qa prd</div><div class="line">lable 仓库分支、默认master分支</div><div class="line"></div><div class="line">匹配原则：从前缀开始。</div></pre></td></tr></table></figure><h4 id="4-启动测试拉取"><a href="#4-启动测试拉取" class="headerlink" title="4.启动测试拉取"></a>4.启动测试拉取</h4><p>启动服务后访问服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 同一分支，不同 profile</div><div class="line">http://localhost:9999/master/ribbon-consumer.dev.properties</div><div class="line">http://localhost:9999/master/ribbon-consumer.test.properties</div><div class="line">http://localhost:9999/master/ribbon-consumer.prd.properties</div><div class="line"># 切换分支</div><div class="line">http://localhost:9999/v1.0Release/ribbon-consumer.dev.properties</div><div class="line">http://localhost:9999/v1.0Release/ribbon-consumer.test.properties</div><div class="line">http://localhost:9999/v1.0Release/ribbon-consumer.prd.properties</div></pre></td></tr></table></figure><p>正确配置后能读到来自git的配置文件</p><h3 id="1-4-客户端配置"><a href="#1-4-客户端配置" class="headerlink" title="1.4 客户端配置"></a>1.4 客户端配置</h3><p>配置文件</p><p>修改 application.properties 为 bootstrap.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#直接URL方式查找配置中心</div><div class="line">spring.cloud.config.uri=http://localhost:9999/</div><div class="line">#通过注册中心查找</div><div class="line">#spring.cloud.config.discovery.enabled=true</div><div class="line">#spring.cloud.config.discovery.service-id=a-config</div><div class="line">spring.cloud.config.profile=dev</div><div class="line">spring.cloud.config.label=dev</div></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>使用远程配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterTestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;myconfig&#125;"</span>)</div><div class="line">    String myconfig;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMyConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> myconfig;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9001/</div></pre></td></tr></table></figure><h2 id="2、刷新配置"><a href="#2、刷新配置" class="headerlink" title="2、刷新配置"></a>2、刷新配置</h2><h3 id="2-1-重启服务可以刷新"><a href="#2-1-重启服务可以刷新" class="headerlink" title="2.1 重启服务可以刷新"></a>2.1 重启服务可以刷新</h3><h3 id="2-2-actuator-单服务刷新"><a href="#2-2-actuator-单服务刷新" class="headerlink" title="2.2 actuator 单服务刷新"></a>2.2 actuator 单服务刷新</h3><ol><li>开启 actuator 中的 refresh 端点</li><li>Controller 中添加 <code>@RefreshScope</code> 注解</li><li>向客户端 url <code>http://localhost:9001/actuator/refresh</code> 发送Post请求</li><li>测试：<code>http://localhost:9001/</code></li></ol><h3 id="2-3-Bus-多服务刷新"><a href="#2-3-Bus-多服务刷新" class="headerlink" title="2.3 Bus 多服务刷新"></a>2.3 Bus 多服务刷新</h3><p>所有微服务注册到 Bus，有事件时 Bus 通过需要处理的微服务。</p><h4 id="erlang安装"><a href="#erlang安装" class="headerlink" title="erlang安装"></a>erlang安装</h4><p><a href="http://www.erlang.org/downloads" target="_blank" rel="external">http://www.erlang.org/downloads</a></p><h4 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h4><p><a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="external">http://www.rabbitmq.com/install-windows.html</a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>path 中添加 <code>%ERLANG_HOME%\bin</code>，cmd 中输入 <code>erl</code>验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动服务</span></div><div class="line">RabbitMQ Service - start</div><div class="line"><span class="comment"># 开启RabbitMQ节点</span></div><div class="line"><span class="built_in">cd</span> D:\rabbitmq\rabbitmq_server-3.8.9\sbin</div><div class="line">rabbitmqctl start_app</div><div class="line"><span class="comment"># 开启RabbitMQ管理模块的插件，并配置到RabbitMQ节点上</span></div><div class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</div></pre></td></tr></table></figure><h4 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h4><p><a href="http://localhost:15672" target="_blank" rel="external">http://localhost:15672</a></p><p>用户名密码均为guest</p><h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.rabbitmq.host=localhost</div><div class="line">spring.rabbitmq.port=5672</div><div class="line">spring.rabbitmq.username=guest</div><div class="line">spring.rabbitmq.password=guest</div></pre></td></tr></table></figure><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>启动两个微服务</p><p>修改配置文件后向其中一个端点发送post请求</p><p><a href="http://localhost:91/actuator/bus-refresh" target="_blank" rel="external">http://localhost:91/actuator/bus-refresh</a></p><p>观察另一个服务是否也跟着刷新了</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;配置中心&lt;/li&gt;
&lt;li&gt;bus 消息总线同步刷新配置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>分布式会话管理(一)</title>
    <link href="http://yoursite.com/2020-10-04-Spring%20Cloud/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86(1).html"/>
    <id>http://yoursite.com/2020-10-04-Spring Cloud/分布式会话管理(1).html</id>
    <published>2020-10-04T12:43:12.000Z</published>
    <updated>2020-10-05T00:58:16.016Z</updated>
    
    <content type="html"><![CDATA[<ul><li>配置中心</li></ul><a id="more"></a><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1-Session、Cookies-与-Token"><a href="#1-1-Session、Cookies-与-Token" class="headerlink" title="1.1 Session、Cookies 与 Token"></a>1.1 Session、Cookies 与 Token</h3><p>我们使用浏览器访问网站，使用的是 http 协议，http 协议是无状态的，即两次不同请求服务器无法知晓是谁请求的。浏览器每次请求 Header 中会带有 UA 信息，服务器根据 UA 信息生成一个唯一字符串(session)，然后下发给浏览器，后边浏览器每次请求都在 Cookies 中带上这个 session。所以使用 Session、Cookies 技术可以实现自动保持会话。</p><p>如果浏览器禁用 Cookies，或者是 app 请求，可以使用 token 代替 session，客户端每次请求手动把 token 加入请求参数或者放入请求 header 中。token 可以实现跨平台。</p><h3 id="1-2-浏览器同源策略与跨域"><a href="#1-2-浏览器同源策略与跨域" class="headerlink" title="1.2 浏览器同源策略与跨域"></a>1.2 浏览器同源策略与跨域</h3><h4 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h4><p>域名、协议、端口都会造成不同源。</p><p>浏览器的同源策略是一种安全功能，同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。所以 a.com 下的 js 脚本采用 ajax 读取 b.com 里面的文件数据是会报错的。</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><p><script>、<img> 、<iframe>、<link>、<video>这些标签都可以发起跨域请求，就是说不受同源策略的限制</p><h4 id="jsonp-跨域访问原理"><a href="#jsonp-跨域访问原理" class="headerlink" title="jsonp 跨域访问原理"></a>jsonp 跨域访问原理</h4><p>此方法只能发起 GET 请求，通过 jsonp 发送的请求，会随带 cookie 一起发送。</p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>在浏览器中指定 Origin 来源，如果在服务器接受范围，请求则成功</p><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p><p>JSONP 只支持 <code>GET</code> 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p><h2 id="2、Shiro"><a href="#2、Shiro" class="headerlink" title="2、Shiro"></a>2、Shiro</h2><p>Shiro 是 Java 的一个安全框架。目前，使用 Apache Shiro 的人越来越多，因为它相当简单，对比 Spring<br>Security，可能没有 Spring Security 做的功能强大，但是在实际工作时 可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了。</p><h4 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h4><p><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</p><p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</p><p><strong>Cryptography</strong>：加密（解密 摘要算法），保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</p><p><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；<br><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</p><p><strong>Testing</strong>：提供测试支持；</p><p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p><strong>Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p><p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p><h2 id="3、Spring-security"><a href="#3、Spring-security" class="headerlink" title="3、Spring security"></a>3、Spring security</h2><p>Spring Security 是一个能够为基于 Spring 的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在 Spring 应用上下文中配置的 Bean，充分利用了 Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和 AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p><p>它是一个轻量级的安全框架，它确保基于 Spring 的应用程序提供身份验证和授权支持。</p><p>它与 Spring MVC 有很好地集成，并配备了流行的安全算法实现捆绑在一起。安全主要包括两个操作“认证”与“验证”（有时候也会叫做权限控制）。</p><p>“认证”是为用户建立一个其声明的角色的过程，这个角色可以一个用户、一个设备或者一个系统。“验证”指的是一个用户在你的应用中能够执行某个操作。在到达授权判断之前，角色已经在身份认证过程中建立了。</p><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>直接启动，生成默认密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Using generated security password: 6e86c6e9-d661-41ae-aabc-bea8817c4f7b</div></pre></td></tr></table></figure><p>使用该密码和用户名 user 来访问系统。</p><h3 id="3-2-自定义用户名和密码"><a href="#3-2-自定义用户名和密码" class="headerlink" title="3.2 自定义用户名和密码"></a>3.2 自定义用户名和密码</h3><p>使用配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.security.user.name=111</div><div class="line">spring.security.user.password=111</div></pre></td></tr></table></figure><p>使用类配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String pass1 = <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123"</span>);</div><div class="line">        String pass2 = <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123"</span>);</div><div class="line">        System.out.println(<span class="string">"pass1:"</span> + pass1);</div><div class="line">        System.out.println(<span class="string">"pass2:"</span> + pass2);</div><div class="line"></div><div class="line">        <span class="comment">// super.configure(http);</span></div><div class="line">        <span class="comment">// 哪些地址需要登录</span></div><div class="line">        http.authorizeRequests()</div><div class="line">            <span class="comment">// 所有请求都需要验证</span></div><div class="line">            .anyRequest().authenticated()</div><div class="line">            .and()</div><div class="line"></div><div class="line">            <span class="comment">// 自定义登录页</span></div><div class="line">            .formLogin().loginPage(<span class="string">"/login.html"</span>)</div><div class="line">            .loginProcessingUrl(<span class="string">"/login"</span>).permitAll()</div><div class="line">            <span class="comment">// 登录失败跳转页面</span></div><div class="line">            .failureUrl(<span class="string">"/login.html?error"</span>)</div><div class="line"></div><div class="line">            <span class="comment">// 登录成功跳转页面</span></div><div class="line">            .defaultSuccessUrl(<span class="string">"/ok"</span>, <span class="keyword">true</span>).permitAll()</div><div class="line"></div><div class="line">            <span class="comment">// 配置登录页的表单 name</span></div><div class="line">            .passwordParameter(<span class="string">"oo"</span>)</div><div class="line">            .usernameParameter(<span class="string">"xx"</span>)</div><div class="line"></div><div class="line">            <span class="comment">// 根据不同的异常类型，做不同的处理，跳转不同的页面</span></div><div class="line">            .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line"><span class="function"><span class="params">                                                    HttpServletResponse response,</span></span></div><div class="line"><span class="function"><span class="params">                                                    AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    <span class="comment">// 判断异常信息</span></div><div class="line">                    request.getRequestDispatcher(request.getRequestURL().toString()).forward(request, response);</div><div class="line">                    <span class="comment">// 记录登录失败的次数，禁止登录</span></div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            .and()</div><div class="line">            .csrf() <span class="comment">// 默认所有 post 请求都会拦截</span></div><div class="line">            <span class="comment">//.disable() // 如果 disable 掉，则不会下发 csrf token</span></div><div class="line">            .csrfTokenRepository(<span class="keyword">new</span> HttpSessionCsrfTokenRepository()) <span class="comment">// 下发 csrf token</span></div><div class="line">            ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 基于 session 的登录，本身并发量不是很高，如果并发量高，直接用 JWT 代替，并写 redis 了。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 注释掉后，所有默认配置失效。配置文件中的用户名和密码不生效了</span></div><div class="line">        <span class="comment">// super.configure(auth);</span></div><div class="line">        auth.inMemoryAuthentication()</div><div class="line">            .withUser(<span class="string">"123"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"123"</span>)).roles(<span class="string">"admin"</span>)</div><div class="line">            .and()</div><div class="line">            .withUser(<span class="string">"321"</span>).password(<span class="string">"321"</span>).roles(<span class="string">"user"</span>)</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果已经配置 configure(AuthenticationManagerBuilder auth)，这里无效果</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</div><div class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</div><div class="line">        User user = <span class="keyword">new</span> User(<span class="string">"4"</span>, <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"4"</span>), <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, Collections.singletonList(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"4"</span>)));</div><div class="line">        manager.createUser(user);</div><div class="line">        manager.createUser(User.withUsername(<span class="string">"5"</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">"5"</span>)).roles(<span class="string">"5"</span>).build());</div><div class="line">        <span class="keyword">return</span> manager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>User 对象</strong></p><p>如果需要增加新字段，自己定义一个新类，继承 User 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String password;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String username;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GrantedAuthority&gt; authorities;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonExpired;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonLocked;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> credentialsNonExpired;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> enabled;</div></pre></td></tr></table></figure><p><strong>Session 中存储的对象</strong>?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Enumeration&lt;String&gt; attributeNames = request.getSession().getAttributeNames();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//while (attributeNames.hasMoreElements()) &#123;</span></div><div class="line"><span class="comment">//String string = (String) attributeNames.nextElement();</span></div><div class="line"><span class="comment">//System.out.println(string);</span></div><div class="line"><span class="comment">//System.out.println(request.getSession().getAttribute(string));</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line">SecurityContext attribute = (SecurityContext)request.getSession().getAttribute(<span class="string">"SPRING_SECURITY_CONTEXT"</span>);</div><div class="line">System.out.println(attribute.getAuthentication().getAuthorities());</div></pre></td></tr></table></figure><h3 id="3-3-忽略静态请求"><a href="#3-3-忽略静态请求" class="headerlink" title="3.3 忽略静态请求"></a>3.3 忽略静态请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">web.ignoring().antMatchers(<span class="string">"/img/**"</span>,<span class="string">"/js/**"</span>);</div><div class="line"><span class="comment">//super.configure(web);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-自定义登录页面和表单属性"><a href="#3-4-自定义登录页面和表单属性" class="headerlink" title="3.4 自定义登录页面和表单属性"></a>3.4 自定义登录页面和表单属性</h3><p>见 3.2</p><h2 id="4、Oauth"><a href="#4、Oauth" class="headerlink" title="4、Oauth"></a>4、Oauth</h2><p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p><p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p><ul><li>Spring Social</li><li>Spring Session</li><li>JWT</li></ul><h2 id="5、CSRF"><a href="#5、CSRF" class="headerlink" title="5、CSRF"></a>5、CSRF</h2><p>CSRF (Cross Site Request Forgery)攻击，中文名：<strong>跨站请求伪造</strong>。其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用 POST 方式提交参数的页面。</p><p>问题解决：</p><ul><li>全站 hash（可以完全禁止，但是一般都不会这么做），token 存放在页面上，每次请求下发这个 token。没有放在 cookies 中，别的 tab 页面获取不到这个数据，所以安全。cookies 中的数据是有可能共享的。</li><li>全站 post 请求</li><li>敏感操作手机验证码二次验证或者图片验证</li><li>外部链接提示免责信息</li></ul><h2 id="6、OpenID"><a href="#6、OpenID" class="headerlink" title="6、OpenID"></a>6、OpenID</h2><p>系统的第一部分是身份验证，即如何通过 URI 来认证用户身份。目前的网站都是依靠用户名和密码来登录认证，这就意味着大家在每个网站都需要注册用户名和密码，即便你使用的是同样的密码。如果使用 OpenID ，你的网站地址（URI）就是你的用户名，而你的密码安全的存储在一个 OpenID 服务网站上（你可以自己建立一个 OpenID 服务网站，也可以选择一个可信任的 OpenID 服务网站来完成注册）。</p><h2 id="7、CAS"><a href="#7、CAS" class="headerlink" title="7、CAS"></a>7、CAS</h2><p>中心认证服务（Central Authentication Service）SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段</p></script></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;配置中心&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(七)</title>
    <link href="http://yoursite.com/2020-10-03-Spring%20Cloud/SpringCloud(5)-zuul.html"/>
    <id>http://yoursite.com/2020-10-03-Spring Cloud/SpringCloud(5)-zuul.html</id>
    <published>2020-10-03T15:43:12.000Z</published>
    <updated>2020-10-08T14:33:14.927Z</updated>
    
    <content type="html"><![CDATA[<ul><li>网关</li><li>链路追踪</li><li>SpringCloud Admin</li></ul><a id="more"></a><h2 id="1、网关概念"><a href="#1、网关概念" class="headerlink" title="1、网关概念"></a>1、网关概念</h2><p>服务治理，服务注册发现，服务调用，熔断。已经学完。</p><p>微服务基本模块已经有了，也可以做微服务了。但完成一个复杂的业务，可能需要多个微服务合作来完成，比如下单，需要用户服务，支付服务，地图服务，订单服务。一般是我们对外服务的窗口，进行服务内外隔离。一般微服务都在内网，不做安全验证。</p><p>就好像：很多明星，可以独立开演唱会（独立提供服务）。也可以去春晚（微服务群提供服务）。但一台春晚就不能让 观众一个一个调用了。观众要调用，需要检票啥的，检票就类似于网关，进来之后，界面随便看，不会说你 看个小品，还需要再检票。</p><p>微服务没有网关，会有下面的问题：</p><ol><li><p>客户端请求多个微服务，增加了客户端复杂性，每个微服务都要做用户认证，限流等，避免和多个微服务打交道的复杂性。</p></li><li><p>有跨域问题，不在同一个域。</p></li><li><p>认证复杂，每个服务都要独立认证，服务要求的权限不一致。</p></li><li><p>难以重构。因为微服务被客户端调用着，重构难以实施。</p></li></ol><p>网关是介于客户端（外部调用方比如app，h5）和微服务的中间层。</p><p>Zuul 是 Netflix 开源的微服务网关，核心是一系列<strong>过滤器</strong>。这些过滤器可以完成以下功能。</p><ol><li>是所有微服务入口，进行分发。</li><li>身份认证与安全。识别合法的请求，拦截不合法的请求。</li><li>监控。在入口处监控，更全面。</li><li>动态路由。动态将请求分发到不同的后端集群。</li><li>压力测试。可以逐渐增加对后端服务的流量，进行测试。</li><li>负载均衡。也是用ribbon。</li><li>限流（望京超市）。比如我每秒只要1000次，10001次就不让访问了。</li><li>服务熔断</li></ol><p>网关和服务的关系：演员和剧场检票人员的关系。</p><p>zuul默认集成了：ribbon 和 hystrix。</p><p>前后端分离的服务器端渲染。如果客户端渲染打开页面可能非常慢，因为浏览器还需要不停解析各种东西，而且还要请求不同的接口。一是解析时间，而是二次网络请求时间。</p><p>基于隧道模式的网关就是业务网关。Nginx 也是隧道模式。</p><p>可优化的点：使用单点登录实现无状态；通过异步优化线程。</p><p>瓶颈在吞吐量。</p><p>路由模式（DR）：LVS</p><p>流量网关：</p><p>业务网关：</p><p>所有拒绝策略尽量前置。</p><h2 id="2、启用网关"><a href="#2、启用网关" class="headerlink" title="2、启用网关"></a>2、启用网关</h2><h3 id="2-1-服务搭建"><a href="#2-1-服务搭建" class="headerlink" title="2.1 服务搭建"></a>2.1 服务搭建</h3><p>新建项目引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.port=80</div><div class="line">spring.application.name=zuul-server</div><div class="line">eureka.client.service-url.defaultZone=http://alvin:pass9876@localhost:8761/eureka/</div></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableZuulProxy</span></div></pre></td></tr></table></figure><p>测试访问。网关会将服务名转换成具体服务的ip和端口，实际进行访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 通过 网关ip:网关端口/服务名/资源名 访问资源</span></div><div class="line">http://localhost/ribbon-consumer/test/user/1</div><div class="line">http://localhost/hello-service/user/2</div></pre></td></tr></table></figure><h3 id="2-2-配置负载均衡"><a href="#2-2-配置负载均衡" class="headerlink" title="2.2 配置负载均衡"></a>2.2 配置负载均衡</h3><p>启动两个Consumer</p><p>轮询访问上面地址，会看到返回结果中，端口一直轮询在变。说明负载均衡生效了，默认是轮询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consumer.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure><p>访问测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/ribbon-consumer/zuul/1</div></pre></td></tr></table></figure><h3 id="2-3-路由端点"><a href="#2-3-路由端点" class="headerlink" title="2.3 路由端点"></a>2.3 路由端点</h3><p>调试的时候，看网关请求的地址，以及映射是否正确。网关请求有误时，可以通过此处排查错误。</p><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">management.endpoints.web.exposure.include=*</div><div class="line"># 默认是never</div><div class="line">management.endpoint.health.show-details=always</div><div class="line">management.endpoint.health.enabled=true</div><div class="line">management.endpoint.routes.enabled=true</div></pre></td></tr></table></figure><p>通过端点查看路由映射：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 访问地址：http://localhost/actuator/routes</span></div><div class="line">&#123;</div><div class="line">  "/xxoo/**": "ribbon-consumer",</div><div class="line">  "/xx/**": "http://mashibing.com",</div><div class="line">  "/oo/**": "hello-service",</div><div class="line">  "/ribbon-consumer/**": "ribbon-consumer"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-4-微服务路由-routes"><a href="#2-4-微服务路由-routes" class="headerlink" title="2.4 微服务路由(routes)"></a>2.4 微服务路由(routes)</h3><ol><li>通过服务名配置（虚拟主机名）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 方法一</div><div class="line">zuul.routes.ribbon-consumer=/xxoo/**</div><div class="line"># 方法二</div><div class="line">zuul.routes.ooxx.path=/ooxx/**</div><div class="line">zuul.routes.ooxx.service-id=ribbon-consumer</div><div class="line"></div><div class="line"># 正常访问</div><div class="line">http://localhost/xxoo/zuul/1</div><div class="line">http://localhost/ooxx/zuul/1</div><div class="line">http://localhost/ribbon-consumer/zuul/1</div></pre></td></tr></table></figure><ol><li>自定义命名配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zuul.routes.xx.path=/xx/**</div><div class="line">zuul.routes.xx.url=http://mashibing.com</div><div class="line"></div><div class="line"># 成功跳转到 http://mashibing.com/vip.html</div><div class="line">http://localhost/xx/vip.html</div></pre></td></tr></table></figure><ol><li>自定义下的负载均衡</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 自定义负载均衡</div><div class="line">cuid.ribbon.listOfServers=localhost:82,localhost:83</div><div class="line">ribbon.eureka.enabled=false</div></pre></td></tr></table></figure><h3 id="2-5-忽略微服务-ignored-services"><a href="#2-5-忽略微服务-ignored-services" class="headerlink" title="2.5 忽略微服务(ignored-services)"></a>2.5 忽略微服务(ignored-services)</h3><p><strong>根据服务名忽略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 设置忽略的微服务</div><div class="line"># 就是把默认的 &quot;/ribbon-consumer/**&quot;: &quot;ribbon-consumer&quot; 条目去掉</div><div class="line">zuul.ignored-services=ribbon-consumer</div><div class="line"></div><div class="line"># 访问失败</div><div class="line">http://localhost/ribbon-consumer/zuul/1</div><div class="line"># 访问成功</div><div class="line">http://localhost/ooxx/zuul/1</div></pre></td></tr></table></figure><p><strong>正则匹配忽略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 忽略正则，不能通过 zuul-api-driver 和 api-driver访问。</div><div class="line">zuul.ignored-patterns=/*-driver/**</div></pre></td></tr></table></figure><h3 id="2-6-前缀"><a href="#2-6-前缀" class="headerlink" title="2.6 前缀"></a>2.6 前缀</h3><p>接口一般命名：/api/v1/xxxx。</p><p>可以在网关配置前缀，访问时带上前缀，实际请求会将前缀去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">zuul.prefix=/api/v1</div><div class="line"># 是否脱去前缀</div><div class="line">zuul.strip-prefix=true</div><div class="line"></div><div class="line"># 访问失败 404</div><div class="line">http://localhost/ooxx/zuul/1</div><div class="line"># 访问成功</div><div class="line">http://localhost/api/v1/ooxx/zuul/1</div><div class="line"></div><div class="line"># 指定服务配置</div><div class="line">zuul.routes.ribbon-consumer.strip-prefix=true</div></pre></td></tr></table></figure><h3 id="2-7-查看路由日志"><a href="#2-7-查看路由日志" class="headerlink" title="2.7 查看路由日志"></a>2.7 查看路由日志</h3><p>修改日志级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">logging.level.com.netflix=debug</div><div class="line">logging.level.org.springframework=debug</div></pre></td></tr></table></figure><p>访问接口，然后查看后台日志</p><p><img src="../../images/springcloud/5/查看网关日志.png" alt=""></p><h3 id="2-8-敏感-Header"><a href="#2-8-敏感-Header" class="headerlink" title="2.8 敏感 Header"></a>2.8 敏感 Header</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"zuulTestFilter"</span>, urlPatterns = <span class="string">"/**"</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulSensitiveHeaderTestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">        HttpServletRequest req = (HttpServletRequest)servletRequest;</div><div class="line">        String token = req.getHeader(<span class="string">"token"</span>);</div><div class="line">        System.out.println(<span class="string">"====&gt;token:"</span>+token);</div><div class="line">        filterChain.doFilter(servletRequest, servletResponse);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"zuulTestFilter init...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 敏感 header，不向下游传递。header 中为 token 的条目不向下传递</div><div class="line">zuul.sensitive-headers=token</div><div class="line"></div><div class="line"># 测试 postman 增加 header token</div><div class="line">http://localhost/ooxx/zuul/1</div></pre></td></tr></table></figure><h3 id="2-9-过滤器"><a href="#2-9-过滤器" class="headerlink" title="2.9 过滤器"></a>2.9 过滤器</h3><p>Zuul 的大部分功能都是有过滤器实现的。</p><p><strong>4 种过滤器</strong></p><ul><li>PRE：在请求被路由之前调用，可利用这种过滤器<strong>实现身份验证</strong>。选择微服务，记录日志。</li><li>ROUTING：在将请求路由到微服务调用，用于构建发送给微服务的请求，并用 http clinet（或者ribbon）请求微服务。</li><li>POST：在调用微服务执行后。可用于<strong>添加 header，记录日志</strong>，将响应发给客户端。</li><li>ERROR：在其他阶段发生错误时，走此过滤器。</li></ul><p><strong>自定义过滤器</strong></p><p>继承 <strong>ZuulFilter</strong> 即可。4 个注意点。</p><ul><li>filterType：pre，routing,post,error</li><li>filterOrder：执行顺序，在谁前，在谁后，可以+1，-1</li><li>shouldFilter：此过滤器是否执行，true  false，可以写过滤器是否执行的判断条件。</li><li>run：具体执行逻辑。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当前过滤器是否生效</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//获取上下文（重要，贯穿 所有filter，包含所有参数）</span></div><div class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = requestContext.getRequest();</div><div class="line"></div><div class="line">        String uri = request.getRequestURI();</div><div class="line">        System.out.println(<span class="string">"pre来源uri："</span>+uri);</div><div class="line">        <span class="comment">// 实际中应该根据具体业务，判断返回 true 还是 false</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"pre拦截"</span>);</div><div class="line">        <span class="comment">//获取上下文</span></div><div class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = requestContext.getRequest();</div><div class="line"></div><div class="line">        String token = request.getHeader(<span class="string">"token"</span>);</div><div class="line">        System.out.println(<span class="string">"pre 业务逻辑 token:"</span>+token);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 相同类型，值越小越先执行</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost/ooxx/zuul/1</div><div class="line"></div><div class="line">pre来源uri：/ooxx/zuul/1</div><div class="line">pre拦截</div><div class="line">pre 业务逻辑 token:test sensitive headers</div></pre></td></tr></table></figure><p><strong>利用 filter 实现鉴权</strong></p><p>为啥<code>setSendZuulResponse(false)</code>后，还是会走后边的 filter？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"auth 拦截"</span>);</div><div class="line">        <span class="comment">//获取上下文（重要，贯穿 所有filter，包含所有参数）</span></div><div class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = requestContext.getRequest();</div><div class="line">        String token = request.getHeader(<span class="string">"token"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String parseToken = JwtUtil.parseToken(token);</div><div class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(parseToken)) &#123;</div><div class="line">                System.out.println(<span class="string">"auth filter:校验通过"</span>);</div><div class="line">                request.getSession().setAttribute(<span class="string">"t1"</span>, <span class="string">"t1attr"</span>);</div><div class="line">                requestContext.setSendZuulResponse(<span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 不往下的过滤器继续了</span></div><div class="line">                requestContext.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">                requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</div><div class="line">                requestContext.setResponseBody(<span class="string">"认证失败"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"auth filter:token校验失败"</span>);</div><div class="line">            <span class="comment">// 不往下的过滤器继续了</span></div><div class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</div><div class="line">            requestContext.setResponseBody(<span class="string">"认证失败"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//获取上下文</span></div><div class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = requestContext.getRequest();</div><div class="line">        String uri = request.getRequestURI();</div><div class="line">        String token = request.getHeader(<span class="string">"token"</span>);</div><div class="line">        System.out.println(<span class="string">"auth 来源uri："</span>+uri + <span class="string">"；token："</span>+token);</div><div class="line">        <span class="comment">// 自己测试用，实际应该根据业务来处理</span></div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-10-接口容错"><a href="#2-10-接口容错" class="headerlink" title="2.10 接口容错"></a>2.10 接口容错</h3><p><strong>Fallback组件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFallback</span> <span class="keyword">implements</span> <span class="title">FallbackProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 表明为哪个微服务提供回退</span></div><div class="line"><span class="comment">     * 服务Id ，若需要所有服务调用都支持回退，返回null 或者 * 即可</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"*"</span>;</div><div class="line">        <span class="comment">// 下面是单独的微服务</span></div><div class="line">        <span class="comment">// return "api-passenger";</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">fallbackResponse</span><span class="params">(String route, Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> HystrixTimeoutException) &#123;</div><div class="line">            <span class="keyword">return</span> response(HttpStatus.GATEWAY_TIMEOUT);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> response(HttpStatus.INTERNAL_SERVER_ERROR);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ClientHttpResponse <span class="title">response</span><span class="params">(<span class="keyword">final</span> HttpStatus status)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientHttpResponse() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="comment">//return status;</span></div><div class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="comment">//return status.value();</span></div><div class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST.value();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="comment">//return status.getReasonPhrase();</span></div><div class="line">                <span class="comment">//return HttpStatus.BAD_REQUEST.name();</span></div><div class="line">                <span class="keyword">return</span> HttpStatus.BAD_REQUEST.getReasonPhrase();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                String msg = <span class="string">"&#123;\"msg\":\"服务故障\"&#125;"</span>;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(msg.getBytes());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">getHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">                HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">                headers.setContentType(MediaType.APPLICATION_JSON);</div><div class="line">                <span class="keyword">return</span> headers;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>停止 user-consumer 服务。访问 <code>http://localhost/ooxx/zuul/1</code>，成功进入 fallback。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"msg"</span>: <span class="string">"服务故障"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-11-限流"><a href="#2-11-限流" class="headerlink" title="2.11 限流"></a>2.11 限流</h3><p><img src="../../images/springcloud/5/网关流程.png" alt=""></p><p>保护自己，用 ratelimit。</p><p>令牌桶</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">假设进入高速公路的车辆需要在入口处领取到通行卡才能进入高速公路。为了节约人力成本，入口处放置自动出卡机。按照国家高速公路交通安全法的规定，在高速公路上行驶的车辆，车速超过 100km/h 时，应与同车道前车保持 100 米以上距离。为了保持最小安全行车距离 100 米，按车速 100km/h 计算，需要间隔至少 3.6 秒才能放行一辆车，因此出卡机每隔 3.6 秒出一张通行卡。在自动出卡机下放置一个盒子，自动出卡机按照 3.6 秒的间隔向盒子中投放通行卡。每辆进入高速公路的车辆，从盒子中领取通行卡之后才可以进入高速公路。</div><div class="line"></div><div class="line">令牌桶可以看作是一个存放一定数量令牌的容器。系统按设定的速度向桶中放置令牌。当桶中令牌满时，多出的令牌溢出，桶中令牌不再增加。在使用令牌桶对流量规格进行评估时，是以令牌桶中的令牌数量是否足够满足报文的转发为依据的。每个需要被转发的报文，都要从令牌桶中领取一定数量的令牌（具体数量视报文大小而定），才可以被正常转发。如果桶中存在足够的令牌可以用来转发报文，称流量遵守或符合约定值，否则称为不符合或超标。</div></pre></td></tr></table></figure><p><strong>使用令牌限流 filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 如果是1，表示每秒1个令牌，实际通过压测获得</span></div><div class="line"><span class="comment">     * 1、创建一个稳定输出令牌的RateLimiter，保证了平均每秒不超过permitsPerSecond个请求</span></div><div class="line"><span class="comment">     * 2、当请求到来的速度超过了permitsPerSecond，保证每秒只处理permitsPerSecond个请求</span></div><div class="line"><span class="comment">     * 3、当这个RateLimiter使用不足(即请求到来速度小于permitsPerSecond)，会囤积最多permitsPerSecond个请求</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER  = RateLimiter.create(<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此处可以写判断地址</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</div><div class="line">        <span class="comment">//获取上下文</span></div><div class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = requestContext.getRequest();</div><div class="line"></div><div class="line">        requestContext.set(<span class="string">"f"</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 拿不到令牌马上返回。尝试获取桶里的令牌，如果有，则返回true，</span></div><div class="line"><span class="comment">         *并且，总的令牌数减1。没有则返回false。</span></div><div class="line"><span class="comment">         */</span></div><div class="line"><span class="keyword">if</span>(!RATE_LIMITER.tryAcquire()) &#123;</div><div class="line">            System.out.println(<span class="string">"rate filter 拿不到令牌，被限流了"</span>+count++);</div><div class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            requestContext.setResponseStatusCode(HttpStatus.TOO_MANY_REQUESTS.value());</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"rate filter OK"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 限流要最早</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>启动jmeter，双击：jmeter.bat</p></li><li><p>右击TestPlan,add ,Threads,Thread Group</p></li><li><p>右击测试令牌桶线程组，add，sampler, http request。</p></li><li><p>在线程组：</p><p>1、Number of Threads（users）：用户个数</p><p>2、Ramp-up Period（in seconds）：在多长时间内，加载指定的用户个数，单位为s。</p><p>假如需加载 100 个用户，在5s中之内加载完成，那么平均每秒钟加载20个用户。</p><p>3、Loop Count（循环次数）：用户执行操作的循环次数，如果选择forever，则永远循环下去。</p></li></ol><p><strong>测试点：</strong></p><p>   令牌桶设置成 5，jemter 设置 40 个用户 10 秒完成。全部正常。</p><p>   令牌桶设置成 5，jemter 设置 60 个用户 10 秒完成。部分请求被限流</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rate filter OK</div><div class="line">rate filter OK</div><div class="line">rate filter 拿不到令牌，被限流了21</div></pre></td></tr></table></figure><h3 id="2-12-高可用"><a href="#2-12-高可用" class="headerlink" title="2.12 高可用"></a>2.12 高可用</h3><p>一般做法</p><p>前面架上nginx。</p><p>zuul 作为普通的服务。对外访问。前面加一层（nginx+keepalived）</p><h2 id="3、网关原理和源码"><a href="#3、网关原理和源码" class="headerlink" title="3、网关原理和源码"></a>3、网关原理和源码</h2><p>让我们做，如何实现？</p><p>方案：请求过来-&gt;pre（一组，鉴权，限流之类的。）-&gt;route（一组，路由到别的服务，具体微服务。）-&gt;post（一组，处理响应）。</p><p>zuul 本质就是 filter。</p><p>通过 filter 解析 url 来决定我们去访问哪个微服务。</p><p>发请求访问微服务，也是通过 filter 实现。</p><p>响应数据，也是通过 filter 实现。</p><h2 id="3、链路追踪"><a href="#3、链路追踪" class="headerlink" title="3、链路追踪"></a>3、链路追踪</h2><h3 id="3-1-分布式计算八大误区"><a href="#3-1-分布式计算八大误区" class="headerlink" title="3.1 分布式计算八大误区"></a>3.1 分布式计算八大误区</h3><ul><li><p>网络可靠。</p></li><li><p>延迟为零。</p></li><li><p>带宽无限。</p></li><li><p>网络绝对安全。</p></li><li><p>网络拓扑不会改变。</p></li><li><p>必须有一名管理员。</p></li><li><p>传输成本为零。</p></li><li><p>网络同质化。（操作系统，协议）</p></li></ul><h3 id="3-2-链路追踪的必要性"><a href="#3-2-链路追踪的必要性" class="headerlink" title="3.2 链路追踪的必要性"></a>3.2 链路追踪的必要性</h3><p>如果能跟踪每个请求，中间请求<strong>经过哪些微服务，请求耗时，网络延迟，业务逻辑耗时</strong>等。我们就能更好地分析系统瓶颈、解决系统问题。因此链路跟踪很重要。</p><p>我们自己思考解决方案：在调用前后加时间戳。捕获异常。</p><p>链路追踪目的：解决错综复杂的服务调用中<strong>链路的查看</strong>。<strong>排查慢服务</strong>。</p><p>市面上链路追踪产品，大部分基于 google 的 Dapper 论文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zipkin,twitter 开源的。是严格按照谷歌的 Dapper 论文来的。</div><div class="line">pinpoint 韩国的 Naver 公司的。</div><div class="line">Cat 美团点评的</div><div class="line">EagleEye 淘宝的</div></pre></td></tr></table></figure><h3 id="3-3-链路追踪要考虑的几个问题"><a href="#3-3-链路追踪要考虑的几个问题" class="headerlink" title="3.3 链路追踪要考虑的几个问题"></a>3.3 链路追踪要考虑的几个问题</h3><ol><li>探针的性能消耗。尽量不影响服务本尊。</li><li>易用。开发可以很快接入，别浪费太多精力。</li><li>数据分析。要实时分析。维度足够。</li></ol><h3 id="3-4-Sleuth-简介"><a href="#3-4-Sleuth-简介" class="headerlink" title="3.4 Sleuth 简介"></a>3.4 Sleuth 简介</h3><p>Sleuth 是 Spring cloud 的分布式跟踪解决方案。</p><ol><li><p>span(跨度)，基本工作单元。一次链路调用，创建一个 span，</p><p>span 用一个 64 位 id 唯一标识。包括：id，描述，时间戳事件，spanId,span 父 id。</p><p>span 被启动和停止时，记录了时间信息，初始化 span 叫：root span，它的 span id 和 trace id 相等。</p></li><li><p>trace(跟踪)，一组共享“root span”的span组成的树状结构 称为 trace，trace 也有一个 64 位 ID，trace 中所有 span 共享一个 trace id。类似于一颗 span 树。</p></li><li><p>annotation（标签），annotation用来记录事件的存在，其中，核心 annotation 用来定义请求的开始和结束。</p><ul><li>CS(Client Send客户端发起请求)。客户端发起请求描述了span开始。</li><li>SR(Server Received服务端接到请求)。服务端获得请求并准备处理它。SR-CS=网络延迟。</li><li>SS（Server Send服务器端处理完成，并将结果发送给客户端）。表示服务器完成请求处理，响应客户端时。SS-SR=服务器处理请求的时间。</li><li>CR（Client Received 客户端接受服务端信息）。span结束的标识。客户端接收到服务器的响应。CR-CS=客户端发出请求到服务器响应的总时间。</li></ul></li></ol><p>其实数据结构是一颗树，从root span 开始。</p><h3 id="3-5-Sleuth-单独使用"><a href="#3-5-Sleuth-单独使用" class="headerlink" title="3.5 Sleuth 单独使用"></a>3.5 Sleuth 单独使用</h3><p>每个需要监控的系统引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 引入sleuth依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>测试点：</p><ol><li>启动 userserver-8001，userserverconsumer-9001，zuul-server-80</li><li>访问一次。看日志结果。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[api-driver,1a409c98e7a3cdbf,1a409c98e7a3cdbf,<span class="literal">true</span>] </div><div class="line"> </div><div class="line">[服务名称，traceId（一条请求调用链中 唯一ID），spanID（基本的工作单元，获取数据等），是否让zipkin收集和展示此信息]</div><div class="line"></div><div class="line">看下游</div><div class="line">[service-sms,1a409c98e7a3cdbf,b3d93470b5cf8434,<span class="literal">true</span>]</div><div class="line"></div><div class="line">traceId，是一样的。</div><div class="line">服务名必须得写。</div></pre></td></tr></table></figure><h3 id="3-6-zipkin"><a href="#3-6-zipkin" class="headerlink" title="3.6 zipkin"></a>3.6 zipkin</h3><p>上面拍错看日志，很原始。刀耕火种，加入利器 zipkin。zipkin 是twitter 开源的分布式跟踪系统。</p><p>原理是收集系统的时序数据，从而追踪微服务架构中系统延时等问题。还有一个友好的界面。</p><p><strong>组成</strong>：Collector、Storage、Restful API、Web UI组成。采集器，存储器，接口，UI。</p><p><strong>原理</strong>：sleuth 收集跟踪信息通过 http 请求发送给 zipkin server，zipkin 将跟踪信息存储，以及提供 RESTful API 接口，zipkin ui 通过调用 api 进行数据展示。默认内存存储，可以用 mysql，ES 等存储。</p><p><strong>操作步骤</strong>：</p><ol><li>每个需要监听的服务的pom中添加。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- zipkin --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><ol><li>每个需要监听的服务yml中</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  <span class="comment">#zipkin</span></div><div class="line">  zipkin:</div><div class="line">    base-url: http://localhost:9411/</div><div class="line">    <span class="comment">#采样比例1</span></div><div class="line">  sleuth:</div><div class="line">    sampler:</div><div class="line">      rate: 1  </div><div class="line">      </div><div class="line"><span class="comment"># zipkin 服务地址</span></div><div class="line">spring.zipkin.base-url=http://localhost:9411/</div><div class="line"><span class="comment"># 采用比例</span></div><div class="line">spring.sleuth.sampler.rate=1</div></pre></td></tr></table></figure><ol><li>启动zipkin。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jar包下载：curl -sSL https://zipkin.io/quickstart.sh | bash -s</div><div class="line">我放到了目录：D:\01_code\03_springbasic\spring-cloud</div><div class="line">java -jar zipkin.jar</div><div class="line">或者docker：</div><div class="line">docker run -d -p 9411:9411 openzipkin/zipkin</div></pre></td></tr></table></figure><ol><li>验证</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 浏览器访问</span></div><div class="line">http://localhost/ribbon-consumer/test/user/alive</div><div class="line"><span class="meta">#</span><span class="bash"> 后台日志</span></div><div class="line">[zuul-server,ba8d3dcdf72e8a07,ba8d3dcdf72e8a07,true]</div><div class="line">[ribbon-consumer,ba8d3dcdf72e8a07,14b7b2c2a541aa03,true]</div><div class="line"><span class="meta">#</span><span class="bash"> zipkin</span></div><div class="line">zuul-server -&gt; ribbon-consumer -&gt; hello-service</div></pre></td></tr></table></figure><h2 id="4、SpringCloud-Admin-健康检查"><a href="#4、SpringCloud-Admin-健康检查" class="headerlink" title="4、SpringCloud Admin 健康检查"></a>4、SpringCloud Admin 健康检查</h2><h3 id="4-1-Admin-服务搭建"><a href="#4-1-Admin-服务搭建" class="headerlink" title="4.1 Admin 服务搭建"></a>4.1 Admin 服务搭建</h3><p>pom 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Admin 服务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Admin 界面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@EnableAdminServer</div></pre></td></tr></table></figure><h3 id="4-2-微服务端"><a href="#4-2-微服务端" class="headerlink" title="4.2 微服务端"></a>4.2 微服务端</h3><p>pom 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Admin 服务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">management.endpoints.web.exposure.include=*</div><div class="line">management.endpoint.health.show-details=always</div><div class="line">spring.boot.admin.client.url=http://localhost:8080</div></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/</div></pre></td></tr></table></figure><h3 id="4-3-邮件通知"><a href="#4-3-邮件通知" class="headerlink" title="4.3 邮件通知"></a>4.3 邮件通知</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.qq.com</div><div class="line">spring.mail.username=1109075867</div><div class="line">spring.mail.password=edsgbgljwlxfgjga</div><div class="line">spring.mail.properties.mail.smpt.auth=<span class="literal">true</span></div><div class="line">spring.mail.properties.mail.smpt.starttls.enable=<span class="literal">true</span></div><div class="line">spring.mail.properties.mail.smpt.starttls.required=<span class="literal">true</span></div><div class="line"><span class="comment">#收件邮箱</span></div><div class="line">spring.boot.admin.notify.mail.to=1109075867@qq.com</div><div class="line"><span class="comment"># 发件邮箱</span></div><div class="line">spring.boot.admin.notify.mail.from=1109075867@qq.com</div></pre></td></tr></table></figure></li></ol><h3 id="4-4-钉钉群通知"><a href="#4-4-钉钉群通知" class="headerlink" title="4.4 钉钉群通知"></a>4.4 钉钉群通知</h3><h4 id="启动类ding"><a href="#启动类ding" class="headerlink" title="启动类ding"></a>启动类ding</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableAdminServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServerApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(AdminServerApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DingDingNotifier <span class="title">dingDingNotifier</span><span class="params">(InstanceRepository repository)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DingDingNotifier(repository);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingDingNotifier</span> <span class="keyword">extends</span> <span class="title">AbstractStatusChangeNotifier</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DingDingNotifier</span><span class="params">(InstanceRepository repository)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(repository);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Mono&lt;Void&gt; <span class="title">doNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> </span>&#123;</div><div class="line">        String serviceName = instance.getRegistration().getName();</div><div class="line">        String serviceUrl = instance.getRegistration().getServiceUrl();</div><div class="line">        String status = instance.getStatusInfo().getStatus();</div><div class="line">        Map&lt;String, Object&gt; details = instance.getStatusInfo().getDetails();</div><div class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</div><div class="line">        str.append(<span class="string">"服务预警 : 【"</span> + serviceName + <span class="string">"】"</span>);</div><div class="line">        str.append(<span class="string">"【服务地址】"</span> + serviceUrl);</div><div class="line">        str.append(<span class="string">"【状态】"</span> + status);</div><div class="line">        str.append(<span class="string">"【详情】"</span> + JSONObject.toJSONString(details));</div><div class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</div><div class="line">            DingDingMessageUtil.sendTextMessage(str.toString());</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="发送工具类"><a href="#发送工具类" class="headerlink" title="发送工具类"></a>发送工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingDingMessageUtil</span> </span>&#123;</div><div class="line"><span class="comment">// 群设置-&gt;只能群助手-&gt;添加机器人-&gt;Token</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String access_token = <span class="string">"Token"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendTextMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Message message = <span class="keyword">new</span> Message();</div><div class="line">            message.setMsgtype(<span class="string">"text"</span>);</div><div class="line">            message.setText(<span class="keyword">new</span> MessageInfo(msg));</div><div class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"https://oapi.dingtalk.com/robot/send?access_token="</span> + access_token);</div><div class="line">            <span class="comment">// 建立 http 连接</span></div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            conn.setDoOutput(<span class="keyword">true</span>);</div><div class="line">            conn.setDoInput(<span class="keyword">true</span>);</div><div class="line">            conn.setUseCaches(<span class="keyword">false</span>);</div><div class="line">            conn.setRequestMethod(<span class="string">"POST"</span>);</div><div class="line">            conn.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</div><div class="line">            conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/Json; charset=UTF-8"</span>);</div><div class="line">            conn.connect();</div><div class="line">            OutputStream out = conn.getOutputStream();</div><div class="line">            String textMessage = JSONObject.toJSONString(message);</div><div class="line">            <span class="keyword">byte</span>[] data = textMessage.getBytes();</div><div class="line">            out.write(data);</div><div class="line">            out.flush();</div><div class="line">            out.close();</div><div class="line">            InputStream in = conn.getInputStream();</div><div class="line">            <span class="keyword">byte</span>[] data1 = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</div><div class="line">            in.read(data1);</div><div class="line">            System.out.println(<span class="keyword">new</span> String(data1));</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String msgtype;</div><div class="line">    <span class="keyword">private</span> MessageInfo text;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsgtype</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> msgtype;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsgtype</span><span class="params">(String msgtype)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.msgtype = msgtype;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> MessageInfo <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(MessageInfo text)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageInfo</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> content;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="微信通知"><a href="#微信通知" class="headerlink" title="微信通知"></a>微信通知</h3><p>服务号 模板消息</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;网关&lt;/li&gt;
&lt;li&gt;链路追踪&lt;/li&gt;
&lt;li&gt;SpringCloud Admin&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(六)</title>
    <link href="http://yoursite.com/2020-10-03-Spring%20Cloud/SpringCloud(4)-Hystrix.html"/>
    <id>http://yoursite.com/2020-10-03-Spring Cloud/SpringCloud(4)-Hystrix.html</id>
    <published>2020-10-03T15:33:12.000Z</published>
    <updated>2020-10-08T08:12:47.608Z</updated>
    
    <content type="html"><![CDATA[<ul><li>RestTemplate 基本使用</li><li>Ribbon 客户端负载均衡</li></ul><a id="more"></a><h2 id="1、Hystrix-和相关概念"><a href="#1、Hystrix-和相关概念" class="headerlink" title="1、Hystrix 和相关概念"></a>1、Hystrix 和相关概念</h2><h3 id="舱壁模式"><a href="#舱壁模式" class="headerlink" title="舱壁模式"></a>舱壁模式</h3><p>舱壁模式（Bulkhead）隔离了每个工作负载或服务的关键资源，如连接池、内存和CPU，硬盘。每个工作单元都有独立的 连接池，内存，CPU。</p><p>使用舱壁避免了单个服务消耗掉所有资源，从而导致其他服务出现故障的场景。<br>这种模式主要是通过防止由一个服务引起的级联故障来增加系统的弹性。</p><p>据说泰坦尼克原因：泰坦尼克号上有16个防水舱，设计可以保障如果只有4个舱进水，密闭和隔离可以阻止水继续进入下一个防水舱，从而保证船的基本浮力。</p><p>但是当时冰山从侧面划破了船体，从而导致有5个防水舱同时进水，而为了建造豪华的头等舱大厅，也就是电影里杰克和罗斯约会的地方，5号舱的顶部并未达到密闭所需要的高度，水就一层层进入了船体，隔离的失败导致了泰坦尼克的沉没。</p><p>给我们的思路：可以对每个请求设置，单独的连接池，配置连接数，不要影响 别的请求。就像一个一个的防水舱。</p><p>对在公司中的管理也一样：给每个独立的 小组，分配独立的资源，比如产品，开发，测试。在小公司，大多数情况 这些资源都是共享的，有一个好处是充分利用资源，坏处是，如果一个项目延期，会影响别的项目推进。自己权衡利弊。</p><p><img src="../../images/springcloud/4/舱壁模式.png" alt=""></p><p>最近比较火的一句话： 真正的知识，是 产品提高一个等级和成本提高0.2元的 痛苦抉择。</p><h3 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h3><p>​        每个服务 发出一个HTTP请求都会 在 服务中 开启一个新线程。而下游服务挂了或者网络不可达，通常线程会阻塞住，直到 Timeout。如果并发量多一点，这些阻塞的线程就会占用大量的资源，很有可能把自己本身这个微服务所在的机器资源耗尽，导致自己也挂掉。</p><p>​        如果服务提供者响应非常缓慢，那么服务消费者调用此提供者就会一直等待，直到提供者响应或超时。在高并发场景下，此种情况，如果不做任何处理，就会导致服务消费者的资源耗竭甚至整个系统的崩溃。一层一层的崩溃，导致所有的系统崩溃。</p><p><img src="../../images/springcloud/4/雪崩示意图.png" alt=""></p><p>​        <strong>雪崩</strong>：由基础服务故障导致级联故障的现象。描述的是：提供者不可用 导致消费者不可用，并将不可用逐渐放大的过程。像滚雪球一样，不可用的服务越来越多。影响越来越恶劣。</p><p>雪崩三个流程：</p><ul><li><p>服务提供者不可用</p></li><li><p>重试会导致网络流量加大，更影响服务提供者。</p></li><li><p>导致服务调用者不可用，由于服务调用者 一直等待返回，一直占用系统资源。</p></li></ul><p>（不可用的范围 被逐步放大）</p><p>服务不可用原因：</p><ul><li><p>服务器宕机</p></li><li><p>网络故障</p></li><li><p>宕机</p></li><li><p>程序异常</p></li><li><p>负载过大，导致服务提供者响应慢</p></li><li><p>缓存击穿导致服务超负荷运行</p></li></ul><p>总之 ： 基础服务故障  导致 级联故障   就是  雪崩。</p><h3 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h3><ol><li><p>为网络请求设置超时。</p><p>必须为网络请求设置超时。一般的调用一般在几十毫秒内响应。如果服务不可用，或者网络有问题，那么响应时间会变很长。长到几十秒。</p><p>每一次调用，对应一个线程或进程，如果响应时间长，那么线程就长时间得不到释放，而线程对应着系统资源，包括CPU,内存，得不到释放的线程越多，资源被消耗的越多，最终导致系统崩溃。</p><p>因此必须设置超时时间，让资源尽快释放。</p></li><li><p>使用断路器模式。</p><p>想一下家里的保险丝，跳闸。如果家里有短路或者大功率电器使用，超过电路负载时，就会跳闸，如果不跳闸，电路烧毁，波及到其他家庭，导致其他家庭也不可用。通过跳闸保护电路安全，当短路问题，或者大功率问题被解决，在合闸。</p><p>自己家里电路，不影响整个小区每家每户的电路。</p></li></ol><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><pre><code>如果对某个微服务请求有大量超时（说明该服务不可用），再让新的请求访问该服务就没有意义，只会无谓的消耗资源。例如设置了超时时间1s，如果短时间内有大量的请求无法在1s内响应，就没有必要去请求依赖的服务了。</code></pre><ol><li><p>断路器是对容易导致错误的操作的代理。这种代理能统计一段时间内的失败次数，并依据次数决定是正常请求依赖的服务还是直接返回。</p></li><li><p>断路器可以实现快速失败，如果它在一段时间内检测到许多类似的错误（超时），就会在之后的一段时间，强迫对该服务的调用快速失败，即不再请求所调用的服务。这样对于消费者就无须再浪费 CPU 去等待长时间的超时。</p></li><li><p>断路器也可自动诊断依赖的服务是否恢复正常。如果发现依赖的服务已经恢复正常，那么就会恢复请求该服务。通过重置时间来决定断路器的重新闭合。</p><p>这样就实现了微服务的“自我修复”：当依赖的服务不可用时，打开断路器，让服务快速失败，从而防止雪崩。当依赖的服务恢复正常时，又恢复请求。</p></li></ol><p><img src="../../images/springcloud/4/断路器开关时序图.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">第一次正常</div><div class="line"></div><div class="line">第二次提供者异常</div><div class="line"></div><div class="line">提供者多次异常后，断路器打开</div><div class="line"></div><div class="line">后续请求，则直接降级，走备用逻辑。</div></pre></td></tr></table></figure><p>​    断路器状态转换的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">关闭状态：正常情况下，断路器关闭，可以正常请求依赖的服务。</div><div class="line"></div><div class="line">打开状态：当一段时间内，请求失败率达到一定阈值，断路器就会打开。服务请求不会去请求依赖的服务。调用方直接返回。不发生真正的调用。重置时间过后，进入半开模式。</div><div class="line"></div><div class="line">半开状态：断路器打开一段时间后，会自动进入“半开模式”，此时，断路器允许一个服务请求访问依赖的服务。如果此请求成功(或者成功达到一定比例)，则关闭断路器，恢复正常访问。否则，则继续保持打开状态。</div><div class="line"></div><div class="line">断路器的打开，能保证服务调用者在调用异常服务时，快速返回结果，避免大量的同步等待，减少服务调用者的资源消耗。并且断路器能在打开一段时间后继续侦测请求执行结果，判断断路器是否能关闭，恢复服务的正常调用。</div></pre></td></tr></table></figure><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>为了在整体资源不够的时候，适当放弃部分服务，将主要的资源投放到核心服务中，待渡过难关之后，再重启已关闭的服务，保证了系统核心服务的稳定。当服务停掉后，自动进入 fallback 替换主方法。</p><p>用 fallback 方法代替主方法执行并返回结果，对失败的服务进行降级。当调用服务失败次数在一段时间内超过了断路器的阈值时，断路器将打开，不再进行真正的调用，而是快速失败，直接执行 fallback 逻辑。服务降级保护了服务调用者的逻辑。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">熔断和降级：</div><div class="line">共同点：</div><div class="line">1、为了防止系统崩溃，保证主要功能的可用性和可靠性。</div><div class="line">2、用户体验到某些功能不能用。</div><div class="line">不同点：</div><div class="line">1、熔断由下级故障触发，主动惹祸。</div><div class="line">2、降级由调用方从负荷角度触发，无辜被抛弃。</div></pre></td></tr></table></figure><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>spring cloud 用的是 hystrix，是一个容错组件。</p><p>Hystrix 实现了超时机制和断路器模式。</p><p>目的：<strong><em>当我自身 依赖的服务不可用时，服务自身不会被拖垮。防止微服务级联异常</em></strong>。</p><p>Hystrix 是 Netflix 开源的一个类库，用于隔离远程系统、服务或者第三方库，防止级联失败，从而提升系统的<strong>可用性与容错性</strong>。主要有以下几点功能：</p><ol><li>为系统提供保护机制。在依赖的服务出现高延迟或失败时，为系统提供保护和控制。</li><li>防止雪崩。</li><li>包裹请求：使用 HystrixCommand（或 HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中运行。</li><li><strong>跳闸机制-熔断</strong>：当某服务失败率达到一定的阈值时，Hystrix 可以自动跳闸，停止请求该服务一段时间。</li><li><strong>资源隔离</strong>：Hystrix 为每个请求的资源都维护了一个小型线程池，如果该线程池已满，发往该资源的请求就被立即拒绝，而不是排队等候，从而加速失败判定。防止级联失败。</li><li>快速失败：Fail Fast。同时能快速恢复。侧重点是：（不去真正的请求服务，发生异常再返回），而是直接失败。</li><li>监控：Hystrix 可以实时监控运行指标和配置的变化，提供近实时的监控、报警、运维控制。</li><li>回退机制：fallback，当请求失败、超时、被拒绝，或当断路器被打开时，执行回退逻辑。回退逻辑我们自定义，提供优雅的服务降级。</li><li>自我修复：断路器打开一段时间后，会自动进入“半开”状态，可以进行打开，关闭，半开状态的转换。前面有介绍。</li></ol><h2 id="2、Hystrix-单独使用"><a href="#2、Hystrix-单独使用" class="headerlink" title="2、Hystrix 单独使用"></a>2、Hystrix 单独使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixTest</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HystrixTest</span><span class="params">(HystrixCommandGroupKey group)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(group);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        HystrixTest hystrixTest = <span class="keyword">new</span> HystrixTest(HystrixCommandGroupKey.Factory.asKey(<span class="string">"ext"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * execute()：以同步阻塞方式执行run()。以demo为例，调用execute()后，</span></div><div class="line"><span class="comment">         * hystrix 先创建一个新线程运行 run()，</span></div><div class="line"><span class="comment">         * 接着调用程序要在 execute() 调用处一直阻塞着，直到 run() 运行完成</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">// System.out.println("result:" + hystrixTest.execute());</span></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * queue()：以异步非阻塞方式执行run()。以demo为例，</span></div><div class="line"><span class="comment">         * 一调用queue()就直接返回一个Future对象，</span></div><div class="line"><span class="comment">         * 同时hystrix创建一个新线程运行run()，</span></div><div class="line"><span class="comment">         * 调用程序通过Future.get()拿到run()的返回结果，</span></div><div class="line"><span class="comment">         * 而Future.get()是阻塞执行的</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        Future&lt;String&gt; futureResult = hystrixTest.queue();</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = futureResult.get();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"程序结果："</span>+result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行逻辑"</span>);</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"getFallbackgetFallback"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、Hystrix-和-RestTemplate-整合"><a href="#3、Hystrix-和-RestTemplate-整合" class="headerlink" title="3、Hystrix 和 RestTemplate 整合"></a>3、Hystrix 和 RestTemplate 整合</h2><p>RestTemplate 不带有 Hystrix，需要在<strong>启动类</strong>上加注解手动开启。<code>@EnableCircuitBreaker</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testRestHystrix"</span>, method = RequestMethod.GET)</div><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">testRestHystrix</span><span class="params">()</span> </span>&#123;</div><div class="line">    Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    param.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</div><div class="line">    param.put(<span class="string">"name"</span>, <span class="string">"getObjectByPost"</span>);</div><div class="line">    ResponseEntity&lt;Person&gt; entity = restTemplate.postForEntity(<span class="string">"http://HELLO-SERVICE/testRestHystrix"</span>,</div><div class="line">                                                               param, Person.class);</div><div class="line">    System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">    <span class="keyword">return</span> entity.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">fallback</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"testRestHystrix 请求失败..."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4、Hystrix-和-Feign-整合"><a href="#4、Hystrix-和-Feign-整合" class="headerlink" title="4、Hystrix 和 Feign 整合"></a>4、Hystrix 和 Feign 整合</h2><p>Feign 本身集成了 Hystrix，但是默认是关闭的。需要在配中中手动开启。</p><p><strong>配置</strong>：<code>feign.hystrix.enabled=true</code></p><h3 id="4-1-fallback-形式"><a href="#4-1-fallback-形式" class="headerlink" title="4.1 fallback 形式"></a>4.1 fallback 形式</h3><p>API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, fallback = UserConsumerApiFallback.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConsumerApi</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这里的映射是给 Feign 看的,用于拼接地址</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMap"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id)</span>;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMap2"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap2</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id,@<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMap3"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap3</span><span class="params">(@RequestParam Map&lt;String, Object&gt; map)</span></span>;</div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/postMap"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">postMap</span><span class="params">(@RequestBody Map&lt;String, Object&gt; map)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Fallback:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">// 不加会报错...</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"userfallback"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerApiFallback</span> <span class="keyword">implements</span> <span class="title">UserConsumerApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"熔断了"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="4-2-fallback-factory-形式"><a href="#4-2-fallback-factory-形式" class="headerlink" title="4.2 fallback factory 形式"></a>4.2 fallback factory 形式</h3><p>这种形式可以获取到报错的具体信息。</p><p>API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, fallbackFactory = UserConsumerApiFallbackFactory.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConsumerApi</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>FallbackFactoty:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConsumerApiFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserConsumerApi</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserConsumerApi <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserConsumerApi() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">alive</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 捕获异常</span></div><div class="line">                System.out.println(<span class="string">"====&gt;"</span>+throwable);</div><div class="line">                <span class="keyword">if</span>(throwable <span class="keyword">instanceof</span> HttpServerErrorException.InternalServerError) &#123;</div><div class="line">                    System.out.println(<span class="string">"InternalServerError"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="string">"远程服务报错"</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(throwable <span class="keyword">instanceof</span> RuntimeException) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">"请求时异常："</span> + throwable;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> HystrixTimeoutException)&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">"远程服务器处理超时"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">"FallbackFactory 熔断、降级、限流、隔离"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5、Hystrix-Dashboard"><a href="#5、Hystrix-Dashboard" class="headerlink" title="5、Hystrix Dashboard"></a>5、Hystrix Dashboard</h2><h3 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h3><p>启动类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@EnableHystrixDashboard</div></pre></td></tr></table></figure><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>开放 actuator 端点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">management.endpoints.web.exposure.include=*</div></pre></td></tr></table></figure><p>健康上报请求查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9001/actuator/hystrix.stream</div></pre></td></tr></table></figure><p>图形化页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9001/hystrix</div></pre></td></tr></table></figure><p>界面说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki</div></pre></td></tr></table></figure><h3 id="集中可视化-turbine"><a href="#集中可视化-turbine" class="headerlink" title="集中可视化-turbine"></a>集中可视化-turbine</h3><p>上面的方法只能监控一个服务。实际生产中不方便。</p><p><img src="../../images/springcloud/4/Turbine原理.png" alt=""></p><p>创建study-hystrix-turbine</p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- eureka客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>yml</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">turbine:</div><div class="line">  app-config: api-driver,api-passenger</div><div class="line">  cluster-name-expression: <span class="string">"'default'"</span></div></pre></td></tr></table></figure><p>启动类</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@EnableTurbine</div></pre></td></tr></table></figure><p>地址：<a href="http://localhost:6102/turbine.stream,也是一直ping，相当于原来的hystrix.stream,不过此处是综合了所有的项目。" target="_blank" rel="external">http://localhost:6102/turbine.stream,也是一直ping，相当于原来的hystrix.stream,不过此处是综合了所有的项目。</a></p><p>启动 hystrix-dashboard。</p><p>访问：<a href="http://localhost:6101/hystrix" target="_blank" rel="external">http://localhost:6101/hystrix</a></p><p>填上上面的地址：<a href="http://localhost:6102/turbine.stream" target="_blank" rel="external">http://localhost:6102/turbine.stream</a></p><h2 id="6、Hystrix-捕获-忽略异常"><a href="#6、Hystrix-捕获-忽略异常" class="headerlink" title="6、Hystrix 捕获/忽略异常"></a>6、Hystrix 捕获/忽略异常</h2><h3 id="6-1-捕获异常"><a href="#6-1-捕获异常" class="headerlink" title="6.1 捕获异常"></a>6.1 捕获异常</h3><p>即获取熔断的原因。</p><p><strong>restTemplate 中 fallback</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">fallback</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"异常信息："</span>+throwable);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"testRestHystrix 请求失败..."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>feign 中 FallbackFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> UserConsumerApi <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-2-忽略异常"><a href="#6-2-忽略异常" class="headerlink" title="6.2 忽略异常"></a>6.2 忽略异常</h3><p>即有些异常不让其走熔断，而是直接报错。</p><p><strong>继承 HystrixBadRequestException</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> alvin</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-10-07 20:55</span></div><div class="line"><span class="comment"> * 继承 HystrixBadRequestException，如果抛出该异常，Hystrix 不会走备用逻辑。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixAutoIgnoreException</span> <span class="keyword">extends</span> <span class="title">HystrixBadRequestException</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HystrixAutoIgnoreException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HystrixAutoIgnoreException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message, cause);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>ignoreExceptions</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>,</div><div class="line">    ignoreExceptions = &#123;HystrixIgnoreException.class&#125;,</div><div class="line">    commandProperties = &#123;<span class="meta">@HystrixProperty</span>(name = <span class="string">"fallback.enabled"</span>, value = <span class="string">"true"</span>)&#125;)</div></pre></td></tr></table></figure><h2 id="7、Feign-客户端禁用-hystrix"><a href="#7、Feign-客户端禁用-hystrix" class="headerlink" title="7、Feign 客户端禁用 hystrix"></a>7、Feign 客户端禁用 hystrix</h2><p>直接不写 fallback 不就行了？</p><p>为 @feignclient 单独配置 Feign.Builder</p><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ScanIgnore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignDisableHystrixConfig</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * singleton 表示在spring容器中的单例，通过spring容器获得该bean时总是返回唯一的实例</span></div><div class="line"><span class="comment">     *prototype表示每次获得bean都会生成一个新的对象</span></div><div class="line"><span class="comment">     *request表示在一次http请求内有效（只适用于web应用）</span></div><div class="line"><span class="comment">     *session表示在一个用户会话内有效（只适用于web应用）</span></div><div class="line"><span class="comment">     *globalSession表示在全局会话内有效（只适用于web应用）</span></div><div class="line"><span class="comment">     *在多数情况，我们只会使用singleton和prototype两种scope，如果在spring配置文件内未指定scope属性，默认为singleton。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</div><div class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Feign.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, configuration = FeignDisableHystrixConfig.class)</div></pre></td></tr></table></figure><p>测试点：发现不再走熔断。</p><h2 id="8、Hystrix-配置"><a href="#8、Hystrix-配置" class="headerlink" title="8、Hystrix 配置"></a>8、Hystrix 配置</h2><p>点击 @HystrixCommand 进去。可以看到很多配置项。</p><p>官网说明：<a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="external">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p><h3 id="8-1-commandProperties-配置"><a href="#8-1-commandProperties-配置" class="headerlink" title="8.1 commandProperties 配置"></a>8.1 commandProperties 配置</h3><p>源码：HystrixCommandProperties.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">##1、Execution 相关，控制 HystrixCommand.run() 执行</div><div class="line"># HystrixCommand.run() 执行的隔离策略。默认为 ExecutionIsolationStrategy.THREAD。</div><div class="line"># Thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用</div><div class="line"># Semaphore 通过 semaphore count 来限制并发请求数，适用于无网络的高并发请求</div><div class="line">execution.isolation.strategy=THREAD</div><div class="line"># HystrixCommand 执行的超时时间，单位为毫秒。</div><div class="line">execution.isolation.thread.timeoutInMilliseconds=1000</div><div class="line"># HystrixCommand.run() 的执行是否启用超时时间。默认为true。</div><div class="line">execution.timeout.enabled=true</div><div class="line"># HystrixCommand.run() 执行超时的时候是否要它中断。</div><div class="line">execution.isolation.thread.interruptOnTimeout=true</div><div class="line"># HystrixCommand.run()执行取消时是否要它中断。</div><div class="line">execution.isolation.thread.interruptOnCancel=false</div><div class="line"># 当 HystrixCommand 命令的隔离策略使用信号量时，该属性用来配置信号量的大小。当最大并发请求达到该设置值时，后续的请求将被拒绝。</div><div class="line">execution.isolation.semaphore.maxConcurrentRequests=10</div><div class="line"></div><div class="line">##2、Fallback 相关，控制 HystrixCommand.getFallback() 的执行</div><div class="line"># HystrixCommand.getFallback()方法执行的最大并发请求数。当达到最大并发请求时，后续的请求将会被拒绝并抛出异常。</div><div class="line">fallback.isolation.semaphore.maxConcurrentRequests=10</div><div class="line"># 设置服务降级策略是否启用。如果为false 当请求失败或者拒绝发生时，将不会调用 HystrixCommand.getFallback() 来执行服务降级逻辑。</div><div class="line">fallback.enabled=true</div><div class="line"></div><div class="line">##3、Circuit Breaker：用来控制HystrixCircuitBreaker的行为。</div><div class="line"># 是否启动熔断器，确定当服务请求命令失败时，是否使用断路器来跟踪其健康指标和熔断请求。默认为true。</div><div class="line">circuitBreaker.enabled=true</div><div class="line"># 用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20的时候，如果滚动时间窗（默认10秒）内仅收到19个请求，即使这19个请求都失败了，断路器也不会打开。</div><div class="line">#10秒内20次失败，断路器打开</div><div class="line">circuitBreaker.requestVolumeThreshold=20</div><div class="line"># 熔断时间窗口，用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后，会将断路器设置为“半开”状态，尝试熔断的请求命令，如果请求失败就将断路器继续设置为“打开”状态，如果请求成功，就管关闭熔断器</div><div class="line">circuitBreaker.sleepWindowInMilliseconds=5000</div><div class="line"># 开启熔断器阈值百分比。该属性用来设置断路器打开的错误百分比条件。默认值为50，表示在滚动时间窗中，在请求值超过requestVolumeThreshold阈值的前提下，如果错误请求数百分比超过50，就把断路器设置为“打开”状态，否则就设置为“关闭”状态。</div><div class="line">circuitBreaker.errorThresholdPercentage=50</div><div class="line">#该属性默认为false。如果该属性设置为true，断路器将强制进入“打开”状态，它会拒绝所有请求。该属性优于forceClosed属性。</div><div class="line">circuitBreaker.forceOpen=false</div><div class="line">#该属性默认为false。如果该属性设置为true，断路器强制进入“关闭”状态，它会接收所有请求。如果forceOpen属性为true，该属性不生效。</div><div class="line">circuitBreaker.forceClosed=false</div><div class="line"></div><div class="line">##4、Metrics：该属性与HystrixCommand和HystrixObservableCommand执行中捕获的指标相关。</div><div class="line"># 该属性用来设置滚动时间窗的长度，单位为毫秒。该时间用于断路器判断健康度时需要收集信息的持续时间。断路器在收集指标信息时会根据设置的时间窗长度拆分成多个桶来累计各度量值，每个桶记录了一段时间的采集指标。例如，当为默认值10000毫秒时，断路器默认将其分成10个桶，每个桶记录1000毫秒内的指标信息。</div><div class="line">metrics.rollingStats.timeInMilliseconds=10000</div><div class="line"># 用来设置滚动时间窗统计指标信息时划分“桶”的数量。默认值为10。</div><div class="line">metrics.rollingStats.numBuckets=10</div><div class="line"># 用来设置对命令执行延迟是否使用百分位数来跟踪和计算。默认为true，如果设置为false，那么所有的概要统计都将返回-1。</div><div class="line">metrics.rollingPercentile.enabled=true</div><div class="line"># 用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</div><div class="line">metrics.rollingPercentile.timeInMilliseconds=60000</div><div class="line"># 用来设置百分位统计滚动窗口中使用桶的数量。</div><div class="line">metrics.rollingPercentile.numBuckets=6</div><div class="line"># 用来设置每个“桶”中保留的最大执行数。</div><div class="line">metrics.rollingPercentile.bucketSize=100</div><div class="line"># 用来设置采集影响断路器状态的健康快照的间隔等待时间。</div><div class="line">metrics.healthSnapshot.intervalInMilliseconds=500</div><div class="line"></div><div class="line">##5、Request Context：涉及HystrixCommand使用HystrixRequestContext的设置。</div><div class="line"># 用来配置是否开启请求缓存。</div><div class="line">requestCache.enabled=true</div><div class="line"># 用来设置HystrixCommand的执行和事件是否打印到日志的HystrixRequestLog中。</div><div class="line">requestLog.enabled=true</div></pre></td></tr></table></figure><h3 id="8-2-threadPoolProperties-配置"><a href="#8-2-threadPoolProperties-配置" class="headerlink" title="8.2 threadPoolProperties 配置"></a>8.2 threadPoolProperties 配置</h3><p>源码：HystrixThreadPoolProperties.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 配置线程池大小 core size of thread pool</div><div class="line">coreSize=10</div><div class="line"># maximum size of thread pool</div><div class="line">maximumSize=10</div><div class="line"># minutes to keep a thread alive</div><div class="line">keepAliveTimeMinutes=1</div><div class="line"># size of queue (this can&apos;t be dynamically changed so we use &apos;queueSizeRejectionThreshold&apos; to artificially limit and reject)</div><div class="line"># -1 turns it off and makes us use SynchronousQueue</div><div class="line">maxQueueSize=-1</div><div class="line"># number of items in queue</div><div class="line">queueSizeRejectionThreshold=5</div></pre></td></tr></table></figure><p>通过下面例子，说一下配置方法。大家下去可以参考上面 看需要试试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/sendFail"</span>, method = RequestMethod.GET)</div><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>,</div><div class="line">                ignoreExceptions = &#123;HystrixIgnoreException.class&#125;,</div><div class="line">                commandProperties = &#123;<span class="meta">@HystrixProperty</span>(name = <span class="string">"fallback.enabled"</span>, value = <span class="string">"false"</span>)&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">sendFail</span><span class="params">()</span> </span>&#123;</div><div class="line">    Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    param.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</div><div class="line">    param.put(<span class="string">"name"</span>, <span class="string">"getObjectByPost"</span>);</div><div class="line">    ResponseEntity&lt;Person&gt; entity = restTemplate.postForEntity(<span class="string">"http://HELLO-SERVICE/testRestHystrix"</span>,</div><div class="line">                                                               param, Person.class);</div><div class="line">    System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">    <span class="keyword">return</span> entity.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">fallback</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">"testRestHystrix 请求失败..."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="9、测试断路器开启-CIRCUIT-OPEN"><a href="#9、测试断路器开启-CIRCUIT-OPEN" class="headerlink" title="9、测试断路器开启-CIRCUIT_OPEN"></a>9、测试断路器开启-CIRCUIT_OPEN</h2><h3 id="jmeter-简单使用"><a href="#jmeter-简单使用" class="headerlink" title="jmeter 简单使用"></a>jmeter 简单使用</h3><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-5.3.zip</div></pre></td></tr></table></figure><p>安装：解压并设置 classpath 环境遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># JMETER_HOME</div><div class="line">D:\apache-jmeter-5.3</div><div class="line"># classpath</div><div class="line">%JMETER_HOME%\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib/logkit-2.0.jar;</div></pre></td></tr></table></figure><p>运行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 管理员方式运行</div><div class="line">D:\apache-jmeter-5.3\bin\jmeter.bat</div></pre></td></tr></table></figure><h3 id="测试-断路器开启、半开和关闭"><a href="#测试-断路器开启、半开和关闭" class="headerlink" title="测试-断路器开启、半开和关闭"></a>测试-断路器开启、半开和关闭</h3><p><img src="../../images/springcloud/4/测试Hystrix断路器开启半开和关闭.png" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">http://localhost:9001/actuator/health</div><div class="line">hystrix: &#123;</div><div class="line">status: "UP"</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 多次访问，多次失败，测试断路器开启</div><div class="line"># 打开 jmeter，设置1秒访问15次(配置10秒 10次，开始熔断计算)。错误，熔断。查看开关.</div><div class="line">http://localhost:9001/sendFail3</div><div class="line"># 观察异常信息的变化</div><div class="line">异常信息：java.lang.IllegalStateException: No instances available for HELLO-SERVICE</div><div class="line">异常信息：java.lang.RuntimeException: Hystrix circuit short-circuited and is OPEN</div><div class="line"></div><div class="line">http://localhost:9001/actuator/health</div><div class="line">"hystrix": &#123;</div><div class="line">"status":"CIRCUIT_OPEN",</div><div class="line">"details":&#123;"openCircuitBreakers":["RestTempleteTestController::sendFail"]&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># 等待五秒钟，再次跑一次 jmeter</div><div class="line"># 发现第一次尝试去请求了 user-server 服务，但是失败了</div><div class="line"># 断路器再次开启，后面 14 次请求直接熔断</div><div class="line"></div><div class="line"># 访问成功一次，状态变为 UP</div><div class="line"># 用浏览器访问</div></pre></td></tr></table></figure><h2 id="10、-Hystrix-原理"><a href="#10、-Hystrix-原理" class="headerlink" title="10、 Hystrix 原理"></a>10、 Hystrix 原理</h2><p>了解前面一些概念：舱壁模式，命令模式（下面），雪崩，容错，断路器，降级。</p><p>熔断降级：北京去武汉招大学生的例子。</p><p>资源隔离：类似于高铁高架桥，并不是一个整体，而是一块一块的拼装的，一段路坏了，不会影响整条路。</p><h3 id="隔离策略-线程池隔离、信号量隔离"><a href="#隔离策略-线程池隔离、信号量隔离" class="headerlink" title="隔离策略-线程池隔离、信号量隔离"></a>隔离策略-线程池隔离、信号量隔离</h3><p>概念中的舱壁模式。想一下货船上，每个货仓中间的隔离。两个好处：</p><ol><li>服务提供者高延迟或异常，不会影响到整个系统的失败。</li><li>能够控制每个调用者的并发度。因为有独立的线程池。</li></ol><p>两种线程隔离策略：线程池隔离（默认）-THREAD、信号量隔离-SEMAPHORE。</p><p><img src="../../images/springcloud/4/Hystrix隔离策略.png" alt=""></p><p>@HystrixCommand 注释修饰一个服务时，HystrixCommand 的运行逻辑有可能是在该请求的主线程(<strong>Tomcat 线程</strong>)上一并执行，也有可能是单独起一个线程来执行，这取决于我们如何设置 Hystrix 线程的隔离策略（<code>execution.isolation.strategy</code>）。</p><p><strong>THREAD(线程隔离）</strong>：使用该方式，HystrixCommand 将会在单独的线程上执行，并发请求受线程池中线程数量的限制。不同服务通过使用不同线程池，彼此间将不受影响，达到隔离效果。</p><p>此种隔离方式：将调用服务线程与服务访问的执行线程分割开来，调用线程能够空出来去做其他工作，而不至于因为服务调用的执行，阻塞过长时间。</p><p>hystrix 将使用独立的线程池对应每一个服务提供者，用于隔离和限制这些服务。于是某个服务提供者的高延迟或者资源受限只会发生在该服务提供者对应的线程池中。</p><p><strong>SEMAPHORE（信号量隔离）</strong>：其实就是个计数器，使用该方式，HystrixCommand 将会在调用线程上执行，通过信号量限制单个服务提供者的并发量，开销相对较小（因为不用那么多线程池），并发请求受到信号量个数的限制。 线程隔离会带来线程开销，有些场景（比如无网络请求场景）可能会因为用开销换隔离得不偿失，为此 hystrix 提供了信号量隔离，当服务的并发数大于信号量阈值时将进入 fallback。</p><p>信号量隔离不需要内部线程池，更加轻量级，但是需要保证程序的健壮性或者低延迟处理，否则会影响其他服务的使用，因为 Tomcat 的 worker 线程不仅仅负责调用 Service1，也可能调用 Service2。不需要内部线程池，更加轻量级，但是需要保证程序的健壮性或者低延迟处理，否则会影响其他服务的使用，因为 Tomcat 的 worker 线程不仅仅负责调用 Service1，也可能调用 Service2。</p><p>一般来说，只有当<strong>调用负载异常高</strong>时（例如每个实例每秒调用数百次）才需要信号量隔离，因为这种场景下使用 THREAD 开销会比较高。信号量隔离一般仅适用于<strong>非网络调用</strong>的隔离。 正常情况下，默认为线程隔离, 保持默认即可。</p><p>线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。线程池模式下，当超过指定时间未响应的服务，Hystrix 会通过响应中断的方式通知线程立即结束并返回。</p><p>线程池隔离优点：</p><ol><li>可以根据不同的业务，用不同的拒绝策略</li><li>可以异步请求，解放 worker 的线程阻塞</li><li>只会影响线程池内部，服务异常隔离</li></ol><p>信号量隔离优点：</p><ol><li>效率更高，无需维护额为线程池</li><li>适合于计算密集型的请求，即速度快低延迟</li><li>要求代码非常健壮，基本不会出现问题，否则会影响 Tomcat 调用其他服务，因为信号量隔离用的是 Tomcat  的 worker 线程。</li></ol><h3 id="Hystrix实现思路"><a href="#Hystrix实现思路" class="headerlink" title="Hystrix实现思路"></a>Hystrix实现思路</h3><ol><li><p>请求过来时，将请求的远程调用逻辑，封装到 HystrixCommand 或者 HystrixObservableCommand 对象（并在构造方法配置请求被执行需要的参数）中，这些远程调用将会在独立的线程中执行。（资源隔离、命令模式）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">https://www.runoob.com/design-pattern/<span class="built_in">command</span>-pattern.html</div><div class="line">介绍</div><div class="line">意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</div><div class="line"></div><div class="line">主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</div><div class="line"></div><div class="line">何时使用：在某些场合，比如要对行为进行<span class="string">"记录、撤销/重做、事务"</span>等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将<span class="string">"行为请求者"</span>与<span class="string">"行为实现者"</span>解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</div><div class="line"></div><div class="line">如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</div><div class="line"></div><div class="line">关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</div><div class="line"></div><div class="line">应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</div><div class="line"></div><div class="line">优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</div><div class="line"></div><div class="line">缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</div><div class="line"></div><div class="line">使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</div><div class="line"></div><div class="line">注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</div></pre></td></tr></table></figure></li><li><p>Hystrix 对访问耗时超过设置阈值的请求采用自动超时的策略。该策略对所有的命令都有效。（如果是信号量隔离方式，则此特性失效），超时的阈值可以通过命令配置进行自定义。</p></li><li><p>为每个服务提供者维护一个线程池（信号量），当线程池（信号量）被占满时，对于该服务提供者的请求将会被直接拒绝（快速失败，走回滚）而不是排队等待，减少系统等待资源。</p></li><li><p>针对请求服务提供者划分出成功、失效、超时和线程池被占满等情况。</p></li><li><p>断路器将在请求服务提供者失败次数超过一定阈值后手动或自动切断服务一段时间。</p></li><li><p>当请求服务提供者出现服务拒绝、超时和 短路（多个服务提供者依次顺序请求，前面的服务提供者请求失败，后面的请求将不再发出）等情况，执行器 fallback 方法，服务降级。</p></li><li><p>提供近乎实时的监控和配置变更服务。</p></li></ol><h3 id="hystrix实现流程"><a href="#hystrix实现流程" class="headerlink" title="hystrix实现流程"></a>hystrix实现流程</h3><ol><li>构建 HystrixCommand 或者 HystrixObservableCommand 对象，用于封装请求，并在构造方法配置请求被执行需要的参数。</li><li>执行命令，Hystrix 提供了 4 种执行命令的方法。</li><li>检查是否有相同命令执行的缓存，若启用了缓存，且缓存可用，直接使用缓存响应请求。Hystrix 支持请求缓存，但需要用户自定义启动。</li><li>检查断路器是否打开，如果打开走 第8步。</li><li>检查<strong>线程池或者信号量</strong>是否被消耗完，如果已满，走第 8 步。</li><li>调用 HystrixCommand 的 run 或者 HystrixObservableCommand 的 construct 执行被封装的调用逻辑，如果执行失败或超时，走第 8 步。</li><li>计算链路的健康情况</li><li>在命令执行失败时获取 fallback 逻辑。</li><li>返回响应。</li></ol><p><img src="../../images/springcloud/4/断路器整体流程.png" alt=""></p><h2 id="11、-Hystrix-源码"><a href="#11、-Hystrix-源码" class="headerlink" title="11、 Hystrix 源码"></a>11、 Hystrix 源码</h2><h3 id="11-1-包裹请求"><a href="#11-1-包裹请求" class="headerlink" title="11.1 包裹请求"></a>11.1 包裹请求</h3><p>@HystrixCommand、HystrixCommandAspect 。</p><p>被注解 @HystrixCommand 修饰的方法，会被 HystrixCommand 包装执行，通过切面来实现。</p><p>命令模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HystrixInvokable 是被 HystrixCommand 标记的接口，继承了它的类，都是可以被执行的HystrixCommand。提供具体方法的为 HystrixExecutable。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;RestTemplate 基本使用&lt;/li&gt;
&lt;li&gt;Ribbon 客户端负载均衡&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(五)</title>
    <link href="http://yoursite.com/2020-10-02-Spring%20Cloud/SpringCloud(3)-Feign.html"/>
    <id>http://yoursite.com/2020-10-02-Spring Cloud/SpringCloud(3)-Feign.html</id>
    <published>2020-10-02T15:33:12.000Z</published>
    <updated>2020-10-07T11:17:47.974Z</updated>
    
    <content type="html"><![CDATA[<ul><li>RestTemplate 基本使用</li><li>Ribbon 客户端负载均衡</li></ul><a id="more"></a><h2 id="1-Feigin-声明式服务调用"><a href="#1-Feigin-声明式服务调用" class="headerlink" title="1. Feigin-声明式服务调用"></a>1. Feigin-声明式服务调用</h2><p>OpenFeign 是 Netflix  开发的<strong>声明式、模板化</strong>的 HTTP 请求客户端。可以更加便捷、优雅地调用 http api。</p><p>OpenFeign 会根据带有注解的函数信息构建出网络请求的模板，在发送网络请求之前，OpenFeign 会将函数的参数值设置到这些请求模板中。</p><p>feign 主要是构建微服务消费端。只要使用 OpenFeign 提供的注解修饰定义网络请求的接口类，就可以使用该接口的实例发送 RESTful的 网络请求。还可以集成 Ribbon 和 Hystrix，提供负载均衡和断路器。</p><p>英文表意为“假装，伪装，变形”， 是一个 Http 请求调用的轻量级框架，可以以 Java 接口注解的方式调用 Http 请求，而不用像 Java 中通过封装 HTTP 请求报文的方式直接调用。通过处理注解，将请求模板化，当实际调用的时候，传入参数，根据参数再应用到请求上，进而转化成真正的请求，这种请求相对而言比较直观。Feign 封装 了 HTTP 调用流程，面向接口编程，回想第一节课的 SOP。</p><h2 id="2、Feign-和-OpenFeign-关系"><a href="#2、Feign-和-OpenFeign-关系" class="headerlink" title="2、Feign 和 OpenFeign 关系"></a>2、Feign 和 OpenFeign 关系</h2><p>Feign 本身不支持 Spring MVC 的注解，它有一套自己的注解</p><p>OpenFeign 是 Spring Cloud 在 Feign 的基础上支持了 Spring MVC 的注解，如 @RequesMapping 等等。<br>OpenFeign 的 <code>@FeignClient</code> 可以解析 SpringMVC 的 @RequestMapping 注解下的接口，<br>并通过<strong>动态代理</strong>的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><h2 id="3、Feign-的使用"><a href="#3、Feign-的使用" class="headerlink" title="3、Feign 的使用"></a>3、Feign 的使用</h2><h3 id="3-1-创建接口服务"><a href="#3-1-创建接口服务" class="headerlink" title="3.1 创建接口服务"></a>3.1 创建接口服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/alive"</span>)</div><div class="line">    <span class="function">String <span class="title">alive</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">Person <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接口服务安装。mvn install user-api。</p><h3 id="3-2-创建-Provider-服务"><a href="#3-2-创建-Provider-服务" class="headerlink" title="3.2 创建 Provider 服务"></a>3.2 创建 Provider 服务</h3><p>pom.xml 中依赖接口服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- user-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.monkeykong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"alive"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok, I am alive"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(id, <span class="string">"alvin"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>个人不喜欢这么做，也有的企业这么用，不喜欢是因为这样<strong>服务端和客户端就耦合</strong>了，这么用，会方便编码。自己权衡取舍。没有对错。</p><h3 id="3-3-创建-Consumer-服务"><a href="#3-3-创建-Consumer-服务" class="headerlink" title="3.3 创建 Consumer 服务"></a>3.3 创建 Consumer 服务</h3><p>pom.xml 中依赖接口服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- openfeign --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- user-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.monkeykong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>feign 接口定义，继承 UserApi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConsumerApi</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>重要：声明允许使用 Feign</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableFeignClients</span></div></pre></td></tr></table></figure><p>编写测试 Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"test/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserConsumerApi userConsumerApi;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/alive"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userConsumerApi.alive();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userConsumerApi.getUserById(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>浏览器测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 9001 为 consumer 端口</div><div class="line">http://localhost:9001/test/user/alive</div><div class="line">http://localhost:9001/test/user/1</div></pre></td></tr></table></figure><h3 id="3-4-基本测试"><a href="#3-4-基本测试" class="headerlink" title="3.4 基本测试"></a>3.4 基本测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserConsumerApi</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这里的映射是给 Feign 看的,用于拼接地址</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getMap"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id)</span>;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMap2"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap2</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Integer id,@<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMap3"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">getMap3</span><span class="params">(@RequestParam Map&lt;String, Object&gt; map)</span></span>;</div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/postMap"</span>)</div><div class="line">    <span class="function">Map&lt;Integer, String&gt; <span class="title">postMap</span><span class="params">(@RequestBody Map&lt;String, Object&gt; map)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4、Fegin-自定义配置"><a href="#4、Fegin-自定义配置" class="headerlink" title="4、Fegin 自定义配置"></a>4、Fegin 自定义配置</h2><p>通过 user-service 增加权限的例子来学习自定义配置。</p><p>服务提供者。上述例子开放service-valuation的权限 后，访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">开放权限：</div><div class="line">&lt;!-- 安全认证 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="comment">// 关闭csrf</span></div><div class="line">http.csrf().disable();</div><div class="line"><span class="comment">// 表示所有的访问都必须认证，认证处理后才可以正常进行</span></div><div class="line">http.httpBasic().and().authorizeRequests().anyRequest().fullyAuthenticated();</div><div class="line"><span class="comment">// 所有的rest服务一定要设置为无状态，以提升操作效率和性能</span></div><div class="line">http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">spring.security.user.name=root</div><div class="line">spring.security.user.password=root</div></pre></td></tr></table></figure><p>继续feign原来访问，报错。401。</p><h3 id="4-1-自定义配置类方式"><a href="#4-1-自定义配置类方式" class="headerlink" title="4.1 自定义配置类方式"></a>4.1 自定义配置类方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">// 扫描时忽略掉，否则配置信息会被所有 @FeignClient 共享</span></div><div class="line"><span class="meta">@ScanIgnore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignAuthConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BasicAuthRequestInterceptor <span class="title">basicAuthRequestInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicAuthRequestInterceptor(<span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"hello-service"</span>, fallbackFactory = UserConsumerApiFallbackFactory.class, configuration = FeignAuthConfig.class)</div></pre></td></tr></table></figure><h3 id="4-2-拦截器方式"><a href="#4-2-拦截器方式" class="headerlink" title="4.2 拦截器方式"></a>4.2 拦截器方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> alvin</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-10-07 18:10</span></div><div class="line"><span class="comment"> * 测试拦截器实现 feign 请求时，自动配置 security 信息</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignAuthInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</div><div class="line">        <span class="comment">// root root =&gt; Basic cm9vdDpyb290</span></div><div class="line">        template.header(<span class="string">"Authorization"</span>, <span class="string">"Basic cm9vdDpyb290"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">feign.client.config.hello-service.request-interceptors[0]=cn.monkeykong.interceptor.FeignAuthInterceptor</div></pre></td></tr></table></figure><h2 id="5、Feign-压缩"><a href="#5、Feign-压缩" class="headerlink" title="5、Feign 压缩"></a>5、Feign 压缩</h2><p>开启压缩可以有效节约网络资源，但是会增加 CPU 压力，建议把最小<strong>压缩的文档大小适度调大一点</strong>，进行 gzip 压缩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># feign 压缩</div><div class="line">feign.compression.request.enabled=true</div><div class="line">feign.compression.request.mime-types=text/xml</div><div class="line"># 单位是 B</div><div class="line">feign.compression.request.min-request-size=2048</div><div class="line"># 设置返回值后，接受参数要改一下。</div><div class="line">feign.compression.response.enabled=true</div></pre></td></tr></table></figure><p>源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">org.springframework.cloud.openfeign.encoding.FeignContentGzipEncodingInterceptor</div><div class="line"></div><div class="line">方法 判断内容是否超过配置的大小</div><div class="line">private boolean contentLengthExceedThreshold(Collection&lt;String&gt; contentLength) &#123;</div><div class="line"></div><div class="line">try &#123;</div><div class="line"><span class="keyword">if</span> (contentLength == null || contentLength.size() != 1) &#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">final String strLen = contentLength.iterator().next();</div><div class="line">final long length = Long.parseLong(strLen);</div><div class="line"><span class="built_in">return</span> length &gt; getProperties().getMinRequestSize();</div><div class="line">&#125;</div><div class="line">catch (NumberFormatException ex) &#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">在HTTP协议中，有Content-Length的详细解读。Content-Length用于描述HTTP消息实体的传输长度the transfer-length of the message-body。在HTTP协议中，消息实体长度和消息实体的传输长度是有区别，比如说gzip压缩下，消息实体长度是压缩前的长度，消息实体的传输长度是gzip压缩后的长度。</div></pre></td></tr></table></figure><p>一般不需要设置压缩，如果系统流量浪费比较多，可以考虑一下。</p><h2 id="6、超时和重试"><a href="#6、超时和重试" class="headerlink" title="6、超时和重试"></a>6、超时和重试</h2><p>Feign 默认支持 Ribbon；Ribbon 的重试机制和 Feign 的重试机制有冲突，所以源码中默认关闭 Feign 的重试机制，使用 Ribbon 的重试机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#连接超时时间(ms)</div><div class="line">ribbon.ConnectTimeout=1000</div><div class="line">#业务逻辑超时时间(ms)</div><div class="line">ribbon.ReadTimeout=6000</div><div class="line"></div><div class="line">#同一台实例最大重试次数,不包括首次调用</div><div class="line">ribbon.MaxAutoRetries=1</div><div class="line">#重试负载均衡其他的实例最大重试次数,不包括首次调用</div><div class="line">ribbon.MaxAutoRetriesNextServer=1</div><div class="line">#是否所有操作都重试（POST 重试可能引发问题）</div><div class="line">ribbon.OkToRetryOnAllOperations=false</div></pre></td></tr></table></figure><p>使用 ribbon 重试机制，请求失败后，每个6秒会重新尝试。</p><h2 id="7、原理"><a href="#7、原理" class="headerlink" title="7、原理"></a>7、原理</h2><p><img src="../../images/springcloud/3/feign流程图.png" alt=""></p><ol><li>主程序入口添加 @EnableFeignClients 注解开启对 Feign Client 扫描加载处理。根据 Feign Client 的开发规范，定义接口并加 @FeignClient 注解。</li><li>当程序启动时，会进行包扫描，扫描所有 @FeignClient 注解的类，并将这些信息注入Spring IoC 容器中。当定义的 Feign 接口中的方法被调用时，通过 JDK 的代理方式，来生成具体的 RequestTemplate。<strong>当生成代理时，Feign 会为每个接口方法创建一个 RequestTemplate 对象</strong>，该对象封装了 HTTP 请求需要的全部信息，如请求参数名、请求方法等信息都在这个过程中确定。</li><li>然后由 RequestTemplate 生成 Request，然后把这个 Request 交给 client 处理，这里指的 Client 可以是 JDK 原生的 URLConnection、Apache 的 Http Client，也可以是 Okhttp。最后 Client 被封装到LoadBalanceClient 类，这个类结合 Ribbon 负载均衡发起服务之间的调用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;RestTemplate 基本使用&lt;/li&gt;
&lt;li&gt;Ribbon 客户端负载均衡&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(四)</title>
    <link href="http://yoursite.com/2020-10-02-Spring%20Cloud/SpringCloud(2).html"/>
    <id>http://yoursite.com/2020-10-02-Spring Cloud/SpringCloud(2).html</id>
    <published>2020-10-02T15:13:12.000Z</published>
    <updated>2020-10-07T09:51:24.868Z</updated>
    
    <content type="html"><![CDATA[<ul><li>RestTemplate 基本使用</li><li>Ribbon 客户端负载均衡</li></ul><a id="more"></a><h2 id="1、服务间的调用"><a href="#1、服务间的调用" class="headerlink" title="1、服务间的调用"></a>1、服务间的调用</h2><p>微服务中，很多服务系统都在独立的进程中运行，通过各个服务系统之间的协作来实现一个大项目的所有业务功能。服务系统间使用多种<strong>跨进程</strong>的方式进行通信协作，而 RESTful 风格的网络请求是最为常见的交互方式之一。</p><p>思想：</p><ul><li>根据服务名称调用，避免 ip、域名硬编码。<code>Map&lt;服务名，服务列表&gt; map;</code></li><li>加上负载均衡，实现高可用。</li></ul><h3 id="1-1-Restful-风格的-API"><a href="#1-1-Restful-风格的-API" class="headerlink" title="1.1 Restful 风格的 API"></a>1.1 Restful 风格的 API</h3><p>RESTful 网络请求是指 RESTful 风格的网络请求，其中 REST 是 <strong>Resource Representational State Transfer</strong>的 缩写，直接翻译即“<strong>资源表现层状态转移</strong>”。<br>Resource 代表互联网资源。所谓“资源”是网络上的一个实体，或者说网上的一个具体信息。它可以是一段文本、一首歌曲、一种服务，可以使用一个 URI 指向它，每种“资源”对应一个 URI。<br>Representational 是“表现层”意思。“资源”是一种消息实体，它可以有多种外在的表现形式，我们把“资源”具体呈现出来的形式叫作它的“表现层”。比如说文本可以用 TXT 格式进行表现，也可以使用 XML 格式、JSON 格式和二进制格式；视频可以用 MP4 格式表现，也可以用 AVI 格式表现。URI 只代表资源的实体，不代表它的形式。它的具体表现形式，<strong>应该由 HTTP 请求的头信息 Accept 和 Content-Type 字段指定</strong>，这两个字段是对“表现层”的描述。<br>State Transfer 是指“状态转移”。客户端访问服务的过程中必然涉及数据和状态的转化。如果客户端想要操作服务端资源，必须通过某种手段，让服务器端资源发生“状态转移”。而这种转化是建立在表现层之上的，所以被称为“表现层状态转移”。客户端通过使用 HTTP 协议中的四个动词来实现上述操作，它们分别是：<strong>获取资源的 GET、新建或更新资源的 POST、更新资源的 PUT 和删除资源的 DELETE。</strong></p><p>第一个层次（Level 0）的 Web 服务只是使用 HTTP 作为传输方式，实际上只是远程方法调用（RPC）的一种具体形式。SOAP 和 XML-RPC 都属于此类。<br>第二个层次（Level 1）的 Web 服务引入了资源的概念。每个资源有对应的标识符和表达。<br>第三个层次（Level 2）的 Web 服务使用不同的 HTTP 方法来进行不同的操作，并且使用 HTTP 状态码来表示不同的结果。如 HTTP GET 方法来获取资源，HTTP DELETE 方法来删除资源。<br>第四个层次（Level 3）的 Web 服务使用 HATEOAS。在资源的表达中包含了链接信息。客户端可以根据链接来发现可以执行的动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">L0:只是使用 HTTP 作为传输方式，实际上只是 RPC 的一种具体形式</div><div class="line">http://ip:port/User/getUserList GET</div><div class="line">http://ip:port/v1/User/deleteById GET/POST</div><div class="line">L1/L2:引入资源的概念；不同的请求方式所作的操作不同</div><div class="line">http://xxx/users GET 约定，相当于到数据库的表</div><div class="line">http://xxx/v1/users/1 GET=获取id为1 Delete=删除 PUT=修改</div><div class="line">L3:针对单表，不再重复 crud SpringData Rest</div></pre></td></tr></table></figure><h2 id="2、RestTemplate"><a href="#2、RestTemplate" class="headerlink" title="2、RestTemplate"></a>2、RestTemplate</h2><h3 id="2-1-远程服务调用-RestTemplate"><a href="#2-1-远程服务调用-RestTemplate" class="headerlink" title="2.1 远程服务调用 RestTemplate"></a>2.1 远程服务调用 RestTemplate</h3><p>RestTemplate 是 Spring 提供的同步 HTTP 网络客户端接口，它可以简化客户端与 HTTP 服务器之间的交互，并且它<strong>强制使用 RESTful 风格</strong>。<strong>它会处理 HTTP 连接和关闭</strong>，只需要使用者提供服务器的地址(URL)和模板参数。</p><p>服务提供者：demo_eureka_client RestTemplateTestController.java</p><p>服务调用者：demo_ribbon_consume RestTemplateTestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTempleteTestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getString"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResponseEntity&lt;String&gt; entity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getString"</span>, String.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getString"</span>, String.class).getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getMap"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResponseEntity&lt;Map&gt; entity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getMap"</span>, Map.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> entity.getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getObject"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResponseEntity&lt;Person&gt; entity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getObject"</span>, Person.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> entity.getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getForObject"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getForObject</span><span class="params">()</span> </span>&#123;</div><div class="line">        Person person = restTemplate.getForObject(<span class="string">"http://HELLO-SERVICE/getObject"</span>, Person.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+person);</div><div class="line">        <span class="keyword">return</span> person;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getObjectWithParam"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObjectWithParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        ResponseEntity&lt;Person&gt; entity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getObjectWithParam?name=&#123;1&#125;"</span>,</div><div class="line">                Person.class, <span class="string">"hi,i am a param."</span>);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> entity.getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getObjectWithMapParam"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObjectWithMapParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        param.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</div><div class="line">        param.put(<span class="string">"name"</span>, <span class="string">"getObjectWithMapParam"</span>);</div><div class="line">        ResponseEntity&lt;Person&gt; entity = restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/getObjectWithMapParam?name=&#123;name&#125;&amp;id=&#123;id&#125;"</span>,</div><div class="line">                Person.class, param);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> entity.getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//===========================</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getObjectByPost"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getObjectByPost</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        param.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</div><div class="line">        param.put(<span class="string">"name"</span>, <span class="string">"getObjectByPost"</span>);</div><div class="line">        ResponseEntity&lt;Person&gt; entity = restTemplate.postForEntity(<span class="string">"http://HELLO-SERVICE/getObjectByPost"</span>,</div><div class="line">                param, Person.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+entity);</div><div class="line">        <span class="keyword">return</span> entity.getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/postForLocation"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">postForLocation</span> <span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        param.put(<span class="string">"id"</span>, <span class="string">"2"</span>);</div><div class="line">        param.put(<span class="string">"name"</span>, <span class="string">"postForLocation"</span>);</div><div class="line">        URI uri = restTemplate.postForLocation(<span class="string">"http://HELLO-SERVICE/postForLocation"</span>,</div><div class="line">                param, Person.class);</div><div class="line">        System.out.println(<span class="string">"返回结果 Body："</span>+uri);</div><div class="line">        response.sendRedirect(uri.toURL().toString());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingClientHttpRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] bytes,</span></span></div><div class="line"><span class="function"><span class="params">                                        ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"请求URI："</span>+request.getURI());</div><div class="line">        ClientHttpResponse response = execution.execute(request, bytes);</div><div class="line">        System.out.println(<span class="string">"返回结果 Headers："</span> + response.getHeaders());</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span></div><div class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</div><div class="line">    restTemplate.getInterceptors().add(<span class="keyword">new</span> LoggingClientHttpRequestInterceptor());</div><div class="line">    <span class="keyword">return</span> restTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2、Ribbon"><a href="#2、Ribbon" class="headerlink" title="2、Ribbon"></a>2、Ribbon</h2><h3 id="2-1-负载均衡"><a href="#2-1-负载均衡" class="headerlink" title="2.1 负载均衡"></a>2.1 负载均衡</h3><p>当系统面临大量的用户访问，负载过高的时候，通常会<strong>增加服务器数量来进行横向扩展（集群）</strong>，多个服务器的负载需要均衡，以免出现服务器负载不均衡，部分服务器负载较大，部分服务器负载较小的情况。通过负载均衡，使得集群中服务器的负载保持在稳定高效的状态，从而提高整个系统的处理能力。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">软件负载均衡：nginx,lvs</div><div class="line">硬件负载均衡：F5</div><div class="line">我们只关注软件负载均衡，</div><div class="line">第一层可以用 DNS，配置多个 A 记录，让 DNS 做第一层分发。</div><div class="line">第二层用比较流行的是反向代理，核心原理：代理根据一定规则，将http请求转发到服务器集群的单一服务器上。</div></pre></td></tr></table></figure><p>软件负载均衡分为：服务端（集中式），客户端。</p><p><strong>服务端负载均衡</strong>：在客户端和服务端中间使用代理，nginx。在服务端负载均衡中，客户端节点只知道单一服务代理的地址，服务代理则知道所有服务端的地址。</p><p><strong>客户端负载均衡</strong>：根据自己的情况做负载。Ribbon 就是。在客户端负载均衡中，所有的客户端节点都有一份自己要访问的服务端地址列表，这些列表统统都是从服务注册中心获取的；</p><p>客户端负载均衡和服务端负载均衡最大的区别在于 <strong><em>服务端地址列表的存储位置，以及负载算法在哪里</em></strong>。</p><p>而在 Spring Cloud 中我们如果想要使用客户端负载均衡，方法很简单，使用 @LoadBalanced 注解即可，这样客户端在发起请求的时候会根据<strong>负载均衡策略</strong>从服务端列表中选择一个服务端，向该服务端发起网络请求，从而实现负载均衡。</p><p>上面几种负载均衡，硬件，软件（服务端nginx，客户端ribbon）。目的：将请求分发到其他功能相同的服务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">手写客户端负载均衡</div><div class="line">1、知道自己的请求目的地（虚拟主机名，默认是spring.application.name）</div><div class="line">2、获取所有服务端地址列表（也就是注册表）。</div><div class="line">3、选出一个地址，找到虚拟主机名对应的ip、port（将虚拟主机名 对应到 ip和port上）。</div><div class="line">4、发起实际请求(最朴素的请求)。</div></pre></td></tr></table></figure><p>Ribbon 是 Netflix 开发的客户端负载均衡器，为 Ribbon 配置<strong>服务提供者地址列表</strong>后，Ribbon就可以基于某种<strong>负载均衡策略算法</strong>，自动地帮助服务消费者去请求 提供者。Ribbon 默认为我们提供了很多负载均衡算法，例如轮询、随机等。我们也可以实现自定义负载均衡算法。</p><p>Ribbon 作为 Spring Cloud 的客户端负载均衡机制的实现，</p><ol><li>Ribbon 可以单独使用，作为一个独立的负载均衡组件。只是需要我们手动配置 服务地址列表。</li><li>Ribbon 与 Eureka 配合使用时，Ribbon 可自动从 Eureka Server 获取服务提供者地址列表（DiscoveryClient），并基于负载均衡算法，请求其中一个服务提供者实例。</li><li>Ribbon 与 OpenFeign 和 RestTemplate 进行无缝对接，让二者具有负载均衡的能力。OpenFeign 默认集成了 ribbon。</li></ol><h3 id="2-2-Ribbon组成"><a href="#2-2-Ribbon组成" class="headerlink" title="2.2 Ribbon组成"></a>2.2 Ribbon组成</h3><p>官网首页：<a href="https://github.com/Netflix/ribbon" target="_blank" rel="external">https://github.com/Netflix/ribbon</a></p><p>ribbon-core: 核心的通用性代码。api一些配置。</p><p>ribbon-eureka：基于eureka封装的模块，能快速集成eureka。</p><p>ribbon-examples：学习示例。</p><p>ribbon-httpclient：基于apache httpClient封装的rest客户端，集成了负载均衡模块，可以直接在项目中使用。</p><p>ribbon-loadbalancer：负载均衡模块。</p><p>ribbon-transport：基于 netty 实现多协议的支持。比如 http，tcp，udp 等。</p><h3 id="2-3-负载均衡算法"><a href="#2-3-负载均衡算法" class="headerlink" title="2.3 负载均衡算法"></a>2.3 负载均衡算法</h3><p>默认实现：</p><p>ZoneAvoidanceRule（区域权衡策略）：复合判断 Server 所在区域的性能和 Server 的可用性，轮询选择服务器。</p><p>其他规则：</p><p>BestAvailableRule（最低并发策略）：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。逐个找服务，如果断路器打开，则忽略。</p><p>RoundRobinRule（轮询策略）：以简单轮询选择一个服务器。按顺序循环选择一个server。</p><p>RandomRule（随机策略）：随机选择一个服务器。</p><p>AvailabilityFilteringRule（可用过滤策略）：会先过滤掉多次访问故障而处于断路器跳闸状态的服务和过滤并发的连接数量超过阀值得服务，然后对剩余的服务列表安装轮询策略进行访问。</p><p>WeightedResponseTimeRule（响应时间加权策略）：据平均响应时间计算所有的服务的权重，响应时间越快服务权重越大，容易被选中的概率就越高。刚启动时，如果统计信息不中，则使用RoundRobinRule(轮询)策略，等统计的信息足够了会自动的切换到WeightedResponseTimeRule。响应时间长，权重低，被选择的概率低。反之，同样道理。此策略综合了各种因素（网络，磁盘，IO等），这些因素直接影响响应时间。</p><p>RetryRule（重试策略）：先按照RoundRobinRule(轮询)的策略获取服务，如果获取的服务失败则在指定的时间会进行重试，进行获取可用的服务。如多次获取某个服务失败，就不会再次获取该服务。主要是在一个时间段内，如果选择一个服务不成功，就继续找可用的服务，直到超时。</p><h3 id="2-4-切换负载均衡策略"><a href="#2-4-切换负载均衡策略" class="headerlink" title="2.4 切换负载均衡策略"></a>2.4 切换负载均衡策略</h3><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//return new RoundRobinRule();</span></div><div class="line">    <span class="comment">//return new RandomRule();</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RetryRule(); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>针对服务定ribbon策略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure><p>给所有服务定ribbon策略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure><p>属性配置方式优先级高于Java代码。</p><h3 id="2-5-Ribbon脱离Eureka"><a href="#2-5-Ribbon脱离Eureka" class="headerlink" title="2.5 Ribbon脱离Eureka"></a>2.5 Ribbon脱离Eureka</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ribbon.eureka.enabled=<span class="literal">false</span></div><div class="line">ribbon.listOfServers=localhost:80,localhost:81</div></pre></td></tr></table></figure><p>为 service-sms 设置 请求的网络地址列表。</p><p>Ribbon 可以和服务注册中心 Eureka 一起工作，从服务注册中心获取服务端的地址信息，也可以在配置文件中使用 listOfServers 字段来设置服务端地址。</p><h3 id="2-6-饥饿模式"><a href="#2-6-饥饿模式" class="headerlink" title="2.6 饥饿模式"></a>2.6 饥饿模式</h3><p>改成以上饥饿加载后，将在启动时加载对应的程序上下文，从而提高首次请求的访问速度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 启动拉取服务列表。默认false：当服务调用时，采取拉取服务列表。</div><div class="line">ribbon.eager-load.enabled=true</div><div class="line">ribbon.eager-load.clients=HELLO-SERVICE</div></pre></td></tr></table></figure><h3 id="2-5-原理"><a href="#2-5-原理" class="headerlink" title="2.5 原理"></a>2.5 原理</h3><ol><li>拦截请求。</li><li>获取url。</li><li>通过url中 serviceName 获取 List<serviceinstance>。</serviceinstance></li><li>通过负载均衡算法选取一个ServiceInstance。</li><li>替换请求，将原来url中的 serviceName换成ip+port。</li></ol><p>总结：由于加了@LoadBalanced 注解，使用 RestTemplateCustomizer 对所有标注了@LoadBalanced 的RestTemplate Bean 添加了一个 <strong>LoadBalancerInterceptor 拦截器</strong>。利用 RestTempllate 的拦截器，spring 可以对 restTemplate bean 进行定制，加入 loadbalance 拦截器进行 ip:port 的替换，也就是将请求的地址中的服务逻辑名转为具体的服务地址。</p><h3 id="2-6-自定义负载均衡策略"><a href="#2-6-自定义负载均衡策略" class="headerlink" title="2.6 自定义负载均衡策略"></a>2.6 自定义负载均衡策略</h3><p>自定义一个类，继承 AbstractLoadBalancerRule 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRandomRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span></span></div></pre></td></tr></table></figure><p>配置上 MyRandomRule 就生效了。</p><p>思考：如何按照流量分发（60%到A，40%到B）？</p><p>负载均衡实际上是做请求分发的：将 60% 流量分发到 A，将 40% 到 B，可以更复杂。大家发挥想象。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Random random = new Random();</div><div class="line">final int number = random.nextInt(10);</div><div class="line"><span class="keyword">if</span>(number&lt;7)&#123;</div><div class="line"><span class="built_in">return</span> servers.get(0);</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> servers.get(1);</div></pre></td></tr></table></figure><h3 id="2-7-Ribbon-小结"><a href="#2-7-Ribbon-小结" class="headerlink" title="2.7 Ribbon 小结"></a>2.7 Ribbon 小结</h3><ol><li>几种负载均衡。（硬，软（服务端，客户端（Ribbon）））</li><li>Ribbon可以单独使用。需要提供服务地址列表。</li><li>原理。拦截请求，然后替换地址（servicename到ip+port）。</li><li>源码。ILoadBalancer，Map&lt;服务名，ILoadBalancer&gt;</li><li>@LoadBalanced，拦截器。（LoadBalancerInterceptor中intercept）</li><li>自定义配置：java配置，yml配置。</li><li>自定义负载均衡策略</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;RestTemplate 基本使用&lt;/li&gt;
&lt;li&gt;Ribbon 客户端负载均衡&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(一)</title>
    <link href="http://yoursite.com/2020-10-01-Spring%20Cloud/SpringCloud(1).html"/>
    <id>http://yoursite.com/2020-10-01-Spring Cloud/SpringCloud(1).html</id>
    <published>2020-10-01T14:13:12.000Z</published>
    <updated>2020-10-06T07:20:25.907Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud 全家桶 Hoxton SR3。</p><p>1、开班典礼</p><p>2、微服务</p><p>3、单体应用向微服务异构平台架构演变</p><p>4、Spring Cloud Alibaba/Netflix</p><a id="more"></a><p>前置知识。Springboot + ssm 架构师前置知识7-16节课。</p><p>人人都是架构师，只是缺少一个机会。</p><h2 id="1、单体应用到微服务演变"><a href="#1、单体应用到微服务演变" class="headerlink" title="1、单体应用到微服务演变"></a>1、单体应用到微服务演变</h2><h3 id="1-1-单体应用"><a href="#1-1-单体应用" class="headerlink" title="1.1 单体应用"></a>1.1 单体应用</h3><ol><li><p>概念：所有功能全部打包在一起。应用大部分是一个 war 包或 jar 包。我参与网约车最开始架构是：一个乘客项目中有用户、订单、消息、地图等功能。随着业务发展，项目会越来越臃肿。</p></li><li><p>好处：容易开发、测试、部署，适合项目初期试错</p></li><li><p>坏处：</p><ul><li>复杂性高：代码多，十万行，百万行级别。加一个小功能，会带来其他功能的隐患，因为他们是在一起的。</li><li>技术债务：人员流动，不坏不修，因为不敢修</li><li>持续部署困难：由于是全量应用，一个小改动就需要全部部署，会导致和这个功能无关的功能也暂停使用。编译部署上限耗时长，不敢随便部署，导致部署频率低，进而又导致两次部署之间功能修改很多，所以越不敢部署，恶心循环</li><li>可靠性差：某个小问题，比如小功能出现 OOM，会导致整个应用崩溃。</li><li>扩展受限：只能整体扩展，无法按照需要进行扩展，不能根据计算密集型（派单系统）和 IO 密集型（文件服务）进行合适的区分</li><li>阻碍创新：单体应用是以一种技术解决所有问题，不同意引入新技术。但在高速的互联网发展过程中，适应的潮流是：用合适的语言做合适的事情。比如在单体应用中，一个项目用 Spring MVC，想换成 SpringBoot，切换成本很高，因为有可能 10 万，百万行代码都要改，而微服务可以轻松切换，因为每个服务，功能简单，代码少。</li></ul></li></ol><h3 id="1-2-SOA"><a href="#1-2-SOA" class="headerlink" title="1.2 SOA"></a>1.2 SOA</h3><p>SOA 是对单体应用的改进。引入 SOA（Service-Oriented Architecture）面向服务架构，拆分系统，用服务的流程化来实现业务的灵活性。服务间需要某些方法进行连接，面向接口等。它是一种设计方法，其中包含多个服务，服务之间通过互相依赖最终提供一系列的功能。一个服务 通常以独立的形式存在于操作系统进程中。各个服务之间 通过网络调用。但是还是需要用些方法来进行服务组合，有可能还是个单体应用。</p><h3 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3 微服务"></a>1.3 微服务</h3><p>微服务是 SOA 思想的一种具体实践。</p><p>微服务架构=80%的 SOA 服务架构思想 + 100% 的组件化架构思想。</p><h4 id="微服务概况"><a href="#微服务概况" class="headerlink" title="微服务概况"></a>微服务概况</h4><ul><li><p>微服务是一种架构风格，将单体应用划分为小型的服务单元</p></li><li><p>微服务架构是一种使用一系列粒度较小的服务来开发单个应用的方式；每个服务运行在自己的进程中；服务间采用轻量级的方式进行通信(通常是HTTP API)；这些服务是基于业务逻辑和范围，通过自动化部署的机制来独立部署的，并且服务的集中管理应该是最低限度的，即每个服务可以采用不同的编程语言编写，使用不同的数据存储技术。</p></li><li><p>英文定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.martinfowler.com/articles/microservices.html</div></pre></td></tr></table></figure></li><li><p>小类比来理解微服务</p><ul><li>合久必分。分开后通信，独立部署，独立存储</li><li>服务拆多了再合起来就叫中台</li></ul></li></ul><h4 id="微服务特性"><a href="#微服务特性" class="headerlink" title="微服务特性"></a>微服务特性</h4><ul><li>独立运行在自己的进程中</li><li>一系列独立服务共同构建起整个系统</li><li>一个服务只关注自己的独立业务</li><li>轻量的通信机制 Restful API</li><li>可以使用不同的语言开发</li><li>全自动部署机制</li><li>可插拔</li></ul><h4 id="微服务组件"><a href="#微服务组件" class="headerlink" title="微服务组件"></a>微服务组件</h4><ul><li><p>服务注册与发现：服务提供方将己方调用地址注册到服务注册中心，让服务调用方能够方便地找到自己；服务调用方从服务注册中心找到自己需要调用的服务的地址。Eureka、Zookeeper、Consul、Nacos等。Eureka 是基于 REST 风格的。</p></li><li><p>负载均衡：服务提供方一般以多实例的形式提供服务，负载均衡功能能够让服务调用方连接到合适的服务节点。并且，服务节点选择的过程对服务调用方来说是透明的。</p></li><li><p>服务网关：服务网关是服务调用的唯一入口，可以在这个组件中实现用户鉴权、动态路由、灰度发布、A/B测试、负载限流等功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</div></pre></td></tr></table></figure></li><li><p>配置中心：将本地化的配置信息(Properties、XML、YAML等形式)注册到配置中心，实现程序包在开发、测试、生产环境中的无差别性，方便程序包的迁移，也是无状态特性。</p></li><li><p>继承框架：微服务组件都以职责单一的程序包对外提供服务，集成框架以配置的形式将所有微服务组件(特别是管理端组件)集成到统一的界面框架下，让用户能够在统一的界面中使用系统。Spring Cloud 就是一个集成框架。</p></li><li><p>调用链监控：记录完成一次请求的先后衔接和调用关系，并将这种串行或并行的调用关系展示出来。在系统出错时，可以方便地找到出错点。</p></li><li><p>支撑平台：系统微服务化后，各个业务模块经过拆分变得更加细化，系统的部署、运维、监控等都比单体应用架构更加复杂，这就需要将大部分的工作自动化。现在，Docker等工具可以给微服务架构的部署带来较多的便利，例如持续集成、蓝绿发布、健康检查、性能监控等等。如果没有合适的支撑平台或工具，微服务架构就无法发挥它最大的功效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 蓝绿部署是不停老版本，部署新版本然后进行测试，确认OK，将流量切到新版本，然后老版本同时也升级到新版本。</div><div class="line">2. 灰度是选择部分部署新版本，将部分流量引入到新版本，新老版本同时提供服务。等待灰度的版本OK，可全量覆盖老版本。</div><div class="line"></div><div class="line">灰度是不同版本共存，蓝绿是新旧版本切换，2种模式的出发点不一样。</div></pre></td></tr></table></figure></li></ul><h4 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h4><ol><li>独立部署。不依赖其他服务，耦合性低，不用管其他服务的部署对自己的影响</li><li>易于开发和维护：关注特定业务，所以业务清晰，代码量少，模块变得易开发、易理解、易维护。</li><li>启动快：功能少，代码少，所以启动快，有需要停机维护的服务，不会长时间暂停服务</li><li>局部修改容易：著需要部署相应的服务即可，适合敏捷开发</li><li>技术栈不受限：java、node.js 等</li><li>按需伸缩：某个服务受限，可以按需增加内存、cpu 等</li><li>职责专一：专门团队负责专门业务，有利于团队分工</li><li>代码复用：不需要重复写。底层实现通过接口方式提供</li><li>便于团队协作：每个团队只需要提供 API 就行，定义好 API 后，可以并行开发</li></ol><h4 id="微服务缺点"><a href="#微服务缺点" class="headerlink" title="微服务缺点"></a>微服务缺点</h4><ol><li><p>分布式固有的复杂性：容错（某个服务宕机）、网络延时、调用关系、分布式事务、分布式锁等都会带来复杂。</p></li><li><p>分布式事务的挑战：每个服务有自己的数据库，有点在于不同服务可以选择自身业务的数据库。订单用 MySQL，评论用 Mongodb 等。目前最理想解决方案是：柔性事务的最终一致性。</p><blockquote><p>刚性事务：遵循ACID原则，强一致性。<br>柔性事务：遵循BASE理论，最终一致性；与刚性事务不同，柔性事务允许一定时间内，不同节点的数据不一致，但要求最终一致。</p><p>BASE 是 Basically Available(基本可用)、Soft state(软状态)和 Eventually consistent (最终一致性)三个短语的缩写。BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足BASE理论的事务，我们称之为“柔性事务”。</p></blockquote></li><li><p>接口调整成本高：改一个接口，调用方都要改</p></li><li><p>测试难度提升：一个接口的改变，所有调用方都得测。自动化测试就变得重要了。API 文档的管理也尤为重要。推荐 yapi</p></li><li><p>运维要求高：需要维护几十上百个服务。监控变得复杂。并且还要关注多个集群，不像原来单体应用，一个应用正常运行即可。</p></li><li><p>重复工作：比如 java 的工具类可以在 common.jar 中，但在多语言下行不通，C++ 无法直接使用 java 的 jar 包。</p></li></ol><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>单一职责原则：关注整个系统功能中单独、有界限的一部分</li><li>服务自治原则：可以独立开发、测试、构建、部署、运行，与其他服务解耦</li><li>轻量级通信原则：轻、跨平台、跨语言。REST、AMQP 等</li><li>粒度把控：与自己实际相结合。不要追求完美，随业务进化而调整</li></ul><h2 id="2、Spring-Cloud"><a href="#2、Spring-Cloud" class="headerlink" title="2、Spring Cloud"></a>2、Spring Cloud</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>Spring Cloud是实现微服务架构的一系列框架的有机集合。</p><p>是在 <strong>Spring Boot 基础上构建</strong>的，用于简化分布式系统构建的工具集。是拥有众多子项目的项目集合。利用Spring Boot的开发便利性，巧妙地<strong>简化了分布式系统基础设施</strong>（服务注册与发现、熔断机制、网关路由、配置中心、消息总线、负载均衡、链路追踪等）的开发。</p><h3 id="2-2-版本演进"><a href="#2-2-版本演进" class="headerlink" title="2.2 版本演进"></a>2.2 版本演进</h3><ol><li><p>版本过程：版本名.版本号。</p></li><li><p>版本名：伦敦地铁字母顺序。</p></li><li><p>版本号：M（milestone）：里程碑，</p><p>​                SR（Service Releases）：稳定版，</p><p>​                RC(Release Candidate)：稳定版的候选版，也就是稳定版的最后一个版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">看官网：查询每个cloud版本下面的子模块的版本。</div><div class="line">https://spring.io/projects/spring-cloud</div><div class="line">版本记录</div><div class="line">https://github.com/spring-cloud/spring-cloud-release/releases</div></pre></td></tr></table></figure></li></ol><h3 id="2-3-组件"><a href="#2-3-组件" class="headerlink" title="2.3 组件"></a>2.3 组件</h3><ol><li>服务注册与发现组件：Eureka，Zookeeper，Consul,Nacos等。Eureka基于REST风格的。</li><li>服务调用组件：Hystrix(熔断降级，在出现依赖服务失效的情况下，通过隔离 系统依赖服务  的方式，防止服务级联失败，同时提供失败回滚机制，使系统能够更快地从异常中恢复)，Ribbon（客户端负载均衡，用于提供客户端的软件负载均衡算法，提供了一系列完善的配置项：连接超时、重试等），OpenFeign（优雅的封装Ribbon，是一个声明式RESTful网络请求客户端，它使编写Web服务客户端变得更加方便和快捷）。</li><li>网关：路由和过滤。Zuul，Gateway。</li><li>配置中心：提供了配置集中管理，动态刷新配置的功能；配置通过Git或者其他方式来存储。</li><li>消息组件：Spring Cloud Stream（对分布式消息进行抽象，包括发布订阅、分组消费等功能，实现了微服务之间的异步通信）和Spring Cloud Bus（主要提供服务间的事件通信，如刷新配置）</li><li>安全控制组件：Spring Cloud Security 基于OAuth2.0开放网络的安全标准，提供了单点登录、资源授权和令牌管理等功能。</li><li>链路追踪组件：Spring Cloud Sleuth（收集调用链路上的数据），Zipkin（对Sleuth收集的信息，进行存储，统计，展示）。</li></ol><p><img src="../../images/springcloud/1/springcloud组件关系.png" alt=""></p><h3 id="2-4-整体架构图"><a href="#2-4-整体架构图" class="headerlink" title="2.4 整体架构图"></a>2.4 整体架构图</h3><p><img src="../../images/springcloud/1/Spring Cloud整体架构图.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud 全家桶 Hoxton SR3。&lt;/p&gt;
&lt;p&gt;1、开班典礼&lt;/p&gt;
&lt;p&gt;2、微服务&lt;/p&gt;
&lt;p&gt;3、单体应用向微服务异构平台架构演变&lt;/p&gt;
&lt;p&gt;4、Spring Cloud Alibaba/Netflix&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习（五）</title>
    <link href="http://yoursite.com/2020-09-20-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%94%E8%AF%BE.html"/>
    <id>http://yoursite.com/2020-09-20-操作系统/第五课.html</id>
    <published>2020-09-20T14:13:12.000Z</published>
    <updated>2020-09-20T12:15:00.769Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统学习（五）</p><p>内存同步机制、汇编实现引导程序</p><a id="more"></a><h2 id="1、内核同步机制"><a href="#1、内核同步机制" class="headerlink" title="1、内核同步机制"></a>1、内核同步机制</h2><h3 id="1-1-同步理论的一些基本概念"><a href="#1-1-同步理论的一些基本概念" class="headerlink" title="1.1 同步理论的一些基本概念"></a>1.1 同步理论的一些基本概念</h3><ul><li>临界区（critical area）：访问或操作共享数据的代码段。简单理解就是 synchronized 大括号中部分</li><li>竞争条件（race conditions）：两个线程同时拥有临界区的执行权</li><li>数据不一致（data disconsistency）：由竞争条件引起的数据破坏</li><li>同步（synchronization）：避免 race conditions</li><li>锁：完成同步的手段（门锁，门后是临界区，只允许一个线程存在），上锁解锁必须具备原子性</li><li>原子性：像原子一样不可分割的操作</li><li>有序性：禁止指令重排序</li><li>可见性：一个线程内的修改，另一个线程可见</li><li>互斥锁 排他锁 共享锁 分段锁 </li></ul><h3 id="1-2-内核同步常用方法"><a href="#1-2-内核同步常用方法" class="headerlink" title="1.2 内核同步常用方法"></a>1.2 内核同步常用方法</h3><ol><li><p>原子操作 – 内核中类似于AtomicXXX，位于<linux types.h=""></linux></p></li><li><p>自旋锁 – 内核中通过汇编支持的cas，位于<asm spinlock.h=""></asm></p></li><li><p>读-写自旋 – 类似于ReadWriteLock，可同时读，只能一个写 读的时候是共享锁，写的时候是排他锁</p></li><li><p>信号量 – 类似于Semaphore(PV操作 down up操作 占有和释放） 重量级锁，线程会进入wait，适合长时间持有的锁情况</p></li><li><p>读-写信号量 – downread upread downwrite upwrite （多个写，可以分段写，比较少用）(分段锁）</p></li><li><p>互斥体(mutex) – 特殊的信号量（二值信号量）</p></li><li><p>完成变量 – 特殊的信号量（A发出信号给B，B等待在完成变量上） vfork() 在子进程结束时通过完成变量叫醒父进程 类似于(Latch)</p></li><li><p>BKL：大内核锁（早期，现在已经不用）</p></li><li><p>顺序锁（2.6）：  – 线程可以挂起的读写自旋锁 序列计数器（从0开始，写时增加(+1)，写完释放(+1)，读前发现单数， 说明有写线程，等待，读前读后序列一样，说明没有写线程打断）</p></li><li><p>禁止抢占 – preempt_disable() 单核 CPU 使用。对单核 CPU 多线程的优化。如果确认某个数据只会有一个 CPU 使用，就可以使用禁止抢占，而不用加锁。</p></li><li><p>内存屏障 – 见volatile</p></li></ol><h2 id="2、汇编实现引导程序"><a href="#2、汇编实现引导程序" class="headerlink" title="2、汇编实现引导程序"></a>2、汇编实现引导程序</h2><h3 id="2-1-编写汇编码"><a href="#2-1-编写汇编码" class="headerlink" title="2.1 编写汇编码"></a>2.1 编写汇编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">; 文件名 boot.asm</div><div class="line"> </div><div class="line">org 7c00h                     ; BIOS读入MBR后，从0x7c00h处开始执行</div><div class="line"> </div><div class="line">; 下面部分和10h有关中断，10h中断用来显示字符</div><div class="line">mov ax, cs</div><div class="line">mov es, ax</div><div class="line">mov ax, msg</div><div class="line">mov bp, ax                    ; ES:BP表示显示字符串的地址</div><div class="line">mov cx, msgLen                ; CX存字符长度</div><div class="line">mov ax, 1301h                 ; AH=13h表示向TTY显示字符，AL=01h表示显示方式（字符串是否包含显示属性，01h表示不包含）</div><div class="line">mov bx, 000fh                 ; BH=00h表示页号，BL=0fh表示颜色</div><div class="line">mov dl, 0                     ; 列</div><div class="line">int 10h</div><div class="line">  </div><div class="line">msg: db &quot;hello world, welcome to OS!&quot;</div><div class="line">msgLen: equ $ - msg           ; 字符串长度</div><div class="line">times 510 - ($ - $$) db 0     ; 填充剩余部分</div><div class="line">dw 0aa55h                     ; 魔数，必须有这两个字节BIOS才确认是MBR</div></pre></td></tr></table></figure><h3 id="2-2-编译"><a href="#2-2-编译" class="headerlink" title="2.2 编译"></a>2.2 编译</h3><p><code>nasm boot.asm -o boot.bin</code></p><h3 id="2-3-制作启动软盘"><a href="#2-3-制作启动软盘" class="headerlink" title="2.3 制作启动软盘"></a>2.3 制作启动软盘</h3><ol><li>dd if=/dev/zero of=floppy.img bs=1474560 count=1 <strong>生成空白软盘镜像</strong></li><li>dd if=boot.bin of=myos.img bs=512 count=1 <strong>制作包含主引导记录boot.bin的启动镜像文件</strong></li><li>dd if=floppy.img of=myos.img skip=1 seek=1 bs=512 count=2879 <strong>在 bin 生成的镜像文件后补上空白，成为合适大小的软盘镜像，一共2880个扇区，略过第一个</strong></li></ol><h3 id="2-4-用软盘启动系统"><a href="#2-4-用软盘启动系统" class="headerlink" title="2.4 用软盘启动系统"></a>2.4 用软盘启动系统</h3><blockquote><ol><li>将myos.img下载到windows</li><li>VMWare创建空的虚拟机<ol><li>文件 - 创建新的虚拟机 - 典型</li><li>稍后安装操作系统</li><li>其他</li><li>一路next 完成</li><li>虚拟机设置，去掉CD/DVD选项中“启动时连接”</li><li>网络，选择“仅主机模式”，勾选“启动时连接”（好像无所谓）</li><li>添加软盘驱动器 使用软盘映像 找到myos.img</li></ol></li><li>启动虚拟机</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统学习（五）&lt;/p&gt;
&lt;p&gt;内存同步机制、汇编实现引导程序&lt;/p&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习（四）</title>
    <link href="http://yoursite.com/2020-09-19-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E5%9B%9B%E8%AF%BE.html"/>
    <id>http://yoursite.com/2020-09-19-操作系统/第四课.html</id>
    <published>2020-09-19T14:13:12.000Z</published>
    <updated>2020-09-19T14:48:41.316Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统学习（四）</p><p>内存管理。</p><a id="more"></a><h2 id="1、内存管理的发展历程"><a href="#1、内存管理的发展历程" class="headerlink" title="1、内存管理的发展历程"></a>1、内存管理的发展历程</h2><p>DOS 时代：同一时间只能有一个进程在运行（也有一些特殊算法可以支持多进程）</p><p>Windows95：多个进程装入内存</p><ul><li>内存不够用</li><li>互相干扰</li></ul><p><img src="../../images/os/4/早期系统内存管理.png" alt=""></p><p>现在的内存管理系统：虚拟地址 分页装入 软件硬件结合寻址</p><ul><li><p>内存分成一页一页固定大小的页框（page frame）一般都是 4K 大小</p></li><li><p>解决内存撑爆问题，把应用程序（硬盘上）分成 4K 大小的块，用到哪个页就把哪个页装入内存(加载)；加载过程中如果内存满了，通过 <strong>LRU 算法</strong>把最久未使用的页装入交换(swap)分区（交换分区位于硬盘），然后把新的页加载进来。</p></li><li><p>解决互相打扰问题：虚拟地址空间，虚拟内存</p><ul><li>DOS Win31 … 应用程序直接访问物理地址，容易互相打扰</li><li>为了保证互不影响，让进程工作在虚拟空间。程序中用到的空间地址不再是直接的物理地址，而是虚拟的地址，这样，A 进程永远不可能访问到 B 进程的空间。</li><li>虚拟空间多大呢？就是寻址空间：64 位系统， 2^64 byte，比物理空间大很多。</li><li>站在虚拟的角度，进程是独享整个系统 + CPU</li><li>虚拟内存是分段的，因为每段的作用和权限都不同，段内再分页。</li><li>虚拟内存和物理内存需要映射</li></ul><p><img src="../../images/os/4/虚拟内存.png" alt=""></p></li></ul><p>为什么使用虚拟内存？</p><ul><li>隔离应用程序<ul><li>每个程序都认为自己有连续的可用的内存</li><li>突破物理内存的限制</li><li>应用程序不需要考虑物理内存是否够用，是否能够分配等底层问题</li></ul></li><li>安全<ul><li>保护物理内存，不被恶意程序访问</li></ul></li></ul><p><strong>线性地址</strong></p><p>内存映射：偏移量 + 段的基地址 = 线性地址（还是虚拟地址），线性地址到物理地址的映射是由 操作系统 + 硬件 MMU(Memory Management Unit)来完成的。</p><p><img src="../../images/os/4/内存映射.png" alt=""></p><p><img src="../../images/os/4/内存映射2.png" alt=""></p><p><strong>缺页中断/缺页异常</strong></p><ul><li>需要用的 page 内存中没有，产生缺页异常（中断），由内核处理并加载。</li></ul><h2 id="2、LRU-算法（手撕）"><a href="#2、LRU-算法（手撕）" class="headerlink" title="2、LRU 算法（手撕）"></a>2、LRU 算法（手撕）</h2><p>LRU：Least Recently Used 最不常用</p><p>LFU：</p><h3 id="2-1-数组实现"><a href="#2-1-数组实现" class="headerlink" title="2.1 数组实现"></a>2.1 数组实现</h3><p>找出数组中哪一项最不常用(每一项上记一个时间戳)，需要遍历数组，时间复杂度是 O(N)。</p><h3 id="2-2-链表实现"><a href="#2-2-链表实现" class="headerlink" title="2.2 链表实现"></a>2.2 链表实现</h3><p>链表头永远是最不常用的，链表尾部一定是最近使用的。</p><p>但是如果再次用到中间的一个元素，所以我们需要找到这个元素，然后把这个元素放到尾巴上去。但是链表中查找一个元素的时间复杂度是 O(N)。</p><p><img src="../../images/os/4/LRU-链表.png" alt=""></p><h3 id="2-3-哈希表-链表"><a href="#2-3-哈希表-链表" class="headerlink" title="2.3 哈希表+链表"></a>2.3 哈希表+链表</h3><p><img src="../../images/os/4/LRU-链表加哈希表.png" alt=""></p><p>java 中  LinkdHashMap 就是用来实现缓存的。</p><ul><li><p>哈希表：保证查找操作 O(1)</p></li><li><p>链表：保证排序操作和新增操作 O(1)</p></li></ul><p>命中缓存时，需要把前面的一个元素指向后面一个元素，单链表 O(1) 无法实现，所以必须要用双链表。</p><p>作业：leetcode 146 题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;Integer, Node&gt; map;</div><div class="line">    <span class="keyword">private</span> Node head,tail;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheCapacity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">this</span>.cacheCapacity = capacity;</div><div class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> Node();</div><div class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> Node();</div><div class="line">        <span class="keyword">this</span>.head.next = tail;</div><div class="line">        <span class="keyword">this</span>.tail.pre = head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">        <span class="comment">// 命中缓存</span></div><div class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</div><div class="line">            Node curNode = map.get(key);</div><div class="line">            <span class="comment">// 把 curNode 从链表删除</span></div><div class="line">            removeNode(curNode);</div><div class="line">            <span class="comment">// 把 curNode 移动到链表头部</span></div><div class="line">            moveToHead(curNode);</div><div class="line">            <span class="keyword">return</span> curNode.value;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</div><div class="line">            Node curNode = map.get(key);</div><div class="line">            <span class="comment">// 把 curNode 从链表删除</span></div><div class="line">            removeNode(curNode);</div><div class="line">            <span class="comment">// 把 curNode 移动到链表头部</span></div><div class="line">            moveToHead(curNode);</div><div class="line">            <span class="comment">// 记得要更新值</span></div><div class="line">            curNode.value = value;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (map.size() == cacheCapacity) &#123;</div><div class="line">                <span class="comment">// 删除 map 数据</span></div><div class="line">                map.remove(tail.pre.key);</div><div class="line">                <span class="comment">// 删除链表尾部数据节点</span></div><div class="line">                removeNode(tail.pre);</div><div class="line">            &#125;</div><div class="line">            Node newNode = <span class="keyword">new</span> Node(key,value);</div><div class="line">            <span class="comment">// 新节点插入链表头部</span></div><div class="line">            moveToHead(newNode);</div><div class="line">            <span class="comment">// 维护 map</span></div><div class="line">            map.put(key,newNode);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将节点从链表中移除</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> curNode</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node curNode)</span> </span>&#123;</div><div class="line">        curNode.pre.next = curNode.next;</div><div class="line">        curNode.next.pre = curNode.pre;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将节点插入链表头部</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> curNode</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Node curNode)</span> </span>&#123;</div><div class="line">        curNode.next = head.next;</div><div class="line">        curNode.pre = head;</div><div class="line">        head.next.pre = curNode;</div><div class="line">        head.next = curNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 双链表节点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> Node pre;</div><div class="line">        <span class="keyword">private</span> Node next;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> key;</div><div class="line">        Node()&#123;&#125;</div><div class="line">        Node(<span class="keyword">int</span> key, <span class="keyword">int</span> value) &#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3、ZGC"><a href="#3、ZGC" class="headerlink" title="3、ZGC"></a>3、ZGC</h2><p>算法：Colored Pointer</p><p>GC 信息记录在指针上，不是记录在头部。作为 ZGC 来说 Immediate menory use 内存立即可用。</p><p>42 位指针，寻址空间 4TB，JDK 13 扩展到 16T（2^44次方）</p><p>颜色指针本质上包含了地址映射的概念。不同状态的对象，在逻辑上位于不同的逻辑空间。</p><p><img src="../../images/os/4/ZGC-颜色指针.png" alt=""></p><h3 id="CPU-如何区分一个立即数和一条指令？"><a href="#CPU-如何区分一个立即数和一条指令？" class="headerlink" title="CPU 如何区分一个立即数和一条指令？"></a>CPU 如何区分一个立即数和一条指令？</h3><p>总线内部分为数据总线、地址总线和控制总线。</p><p>目前地址总线：48 位。所以最大寻址空间为 16T</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统学习（四）&lt;/p&gt;
&lt;p&gt;内存管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习（三）</title>
    <link href="http://yoursite.com/2020-09-18-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E8%AF%BE.html"/>
    <id>http://yoursite.com/2020-09-18-操作系统/第三课.html</id>
    <published>2020-09-18T14:13:12.000Z</published>
    <updated>2020-09-19T04:00:13.909Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统学习（三）</p><ul><li>进程、线程和纤程</li><li>进程调度</li><li>中断</li></ul><a id="more"></a><h2 id="1、进程、线程和纤程"><a href="#1、进程、线程和纤程" class="headerlink" title="1、进程、线程和纤程"></a>1、进程、线程和纤程</h2><h3 id="1-1-进程和线程的区别？"><a href="#1-1-进程和线程的区别？" class="headerlink" title="1.1 进程和线程的区别？"></a>1.1 进程和线程的区别？</h3><p>进程就是一个程序运行起来的状态，线程是一个进程中的不同的执行路径。</p><p>进程是 OS <strong>分配资源</strong>的基本单位，线程是 CPU <strong>执行调度</strong>的基本单位，线程共享进程的内存空间，线程没有自己独立的内存空间。分配资源最重要的就是分配<strong>独立的内存空间</strong>。</p><p><img src="../../images/os/3/进程-线程-纤程.png" alt=""></p><h3 id="1-2-线程在-linux-中的实现"><a href="#1-2-线程在-linux-中的实现" class="headerlink" title="1.2 线程在 linux 中的实现"></a>1.2 线程在 linux 中的实现</h3><p><img src="../../images/os/3/linux中的进程.png" alt=""></p><p>linux 中的线程就是一个普通的进程，只不过这个进程和主进程共享资源（内存空间，全局数据等）。</p><p>不同的操作系统对线程的实现各不相同，其他系统都有各自的所谓 LWP(Light Weight Process)的实现。</p><p>可以把线程理解为一个进程中不同的执行路线。</p><h3 id="1-3-纤程"><a href="#1-3-纤程" class="headerlink" title="1.3 纤程"></a>1.3 纤程</h3><p>线程中的线程，用户空间的线程， 切换和调度不需要经过 OS ，启动一个纤程无需操作系统级别通过系统调用启动一个对应的线程(LWP)。</p><p>OS 启动线程的数量是有限的，如果启动太多，大量时间耗费在线程间的切换。但是纤程是位于用户空间，非常轻量级，<strong>启动、调度和切换</strong>消耗资源都很小。</p><p>OS 线程切换的消耗还是挺大的，需要把 Register 中的数据拿出去，然后把其他线程数据拿进来，相对来说是个比较重量级的操作。</p><p>所有纤程的优势有：</p><ol><li>占有资源少。OS 启动一个线程，大概需要 1M；Fiber 只需 4K</li><li>切换比较简单，因为无需经过 OS，直接在用户态切换</li><li>启动数量多，可以启动 10w+</li></ol><p>目前（202003）支持内置纤程的语言：Kotlin、Scala、Go、Python(lib)、java(open jdk:loom)</p><p><img src="../../images/os/3/纤程.png" alt=""></p><h3 id="1-4-Java-纤程例子"><a href="#1-4-Java-纤程例子" class="headerlink" title="1.4 Java 纤程例子"></a>1.4 Java 纤程例子</h3><p>启动 10000 个线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFiber</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> size = <span class="number">10000</span>;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[size];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; calc());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].join();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        <span class="comment">// 8462</span></div><div class="line">        System.out.println(end - start);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 模拟耗时操作</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">10000</span>; m++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) result += i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>利用 Quaser 库实现纤程，启动 10000 个纤程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFiber2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> size = <span class="number">10000</span>;</div><div class="line">        Fiber&lt;Void&gt;[] fibers = <span class="keyword">new</span> Fiber[size];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibers.length; i++) &#123;</div><div class="line">            fibers[i] = <span class="keyword">new</span> Fiber&lt;Void&gt;((SuspendableRunnable) () -&gt; calc());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibers.length; i++) &#123;</div><div class="line">            fibers[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibers.length; i++) &#123;</div><div class="line">            fibers[i].join();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        <span class="comment">// 3201</span></div><div class="line">        System.out.println(end - start);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 模拟耗时操作</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">10000</span>; m++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) result += i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>目前是 10000 个 Fiber 对应 1 个 JVM 线程，想办法提高效率，比如 10000 Fiber 用 10 JVM 线程来执行。这样即充分利用了 CPU 调度能力又利用了 Fiber 的优势。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFiber3</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">int</span> size = <span class="number">10000</span>;</div><div class="line">        <span class="keyword">int</span> threadSize = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> batchSize = size/threadSize;</div><div class="line"></div><div class="line">        Fiber&lt;Void&gt;[] fibers = <span class="keyword">new</span> Fiber[size];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fibers.length; i++) &#123;</div><div class="line">            fibers[i] = <span class="keyword">new</span> Fiber&lt;Void&gt;((SuspendableRunnable) () -&gt; calc());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[threadSize];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; threads.length; j++) &#123;</div><div class="line">            threads[j] = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batchSize; i++) &#123;</div><div class="line">                        fibers[i].start();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batchSize; i++) &#123;</div><div class="line">                        fibers[i].join();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].join();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        <span class="comment">// 467</span></div><div class="line">        System.out.println(end - start);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">10000</span>; m++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) result += i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-5-纤程的应用场景"><a href="#1-5-纤程的应用场景" class="headerlink" title="1.5 纤程的应用场景"></a>1.5 纤程的应用场景</h3><p>线程 vs 线程池：<strong>很短的计算任务</strong>，不需要和内核打交道，适合用纤程；<strong>并发量高</strong>的时候适合用纤程。</p><h3 id="1-6-进程"><a href="#1-6-进程" class="headerlink" title="1.6 进程"></a>1.6 进程</h3><p>linux 中进程也被称为 task，是系统分配资源的基本单位。</p><p>所谓的资源是指独立的地址空间、内核数据结构（进程描述符）、全局变量、数据段。</p><p>进程描述符：PCB(Process Control Block)</p><p>一个进程在 linux 内核使用一个叫做 PCB 的数据结构来描述它跟踪它，每个进程都跟着一个 PCB。内核中维护进程的时候用的是这个 PCB 数据结构，叫做进程描述符。PCB 大小不是固定的，每个进程 PCB 的大小不一样。</p><h3 id="1-7-内核线程"><a href="#1-7-内核线程" class="headerlink" title="1.7 内核线程"></a>1.7 内核线程</h3><p>内核启动之后经常需要做一些<strong>后台操作</strong>，这些后台操作由 Kernel Thread 来完成，只在内核空间运行。</p><h3 id="1-8-进程创建和启动"><a href="#1-8-进程创建和启动" class="headerlink" title="1.8 进程创建和启动"></a>1.8 进程创建和启动</h3><p>系统调用 fork() 创建进程（其实底层还有一个 clone() 调用），exec() 启动进程。</p><p>从 A 中 fork B 的话，A 称之为 B 的父进程。</p><h3 id="1-9-僵尸进程和孤儿进程"><a href="#1-9-僵尸进程和孤儿进程" class="headerlink" title="1.9 僵尸进程和孤儿进程"></a>1.9 僵尸进程和孤儿进程</h3><p><strong>安装 C 语言编译环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 查看是否已经安装 gcc</span></div><div class="line">rpm -qa|grep gcc</div><div class="line"><span class="meta">#</span><span class="bash"> gcc 是 C 语言编译器</span></div><div class="line">yum install gcc</div><div class="line"><span class="meta">#</span><span class="bash"> gcc-c++ 是 c++ 编译器</span></div><div class="line">yum install gcc-c++</div></pre></td></tr></table></figure><p><strong>僵尸进程</strong></p><p>父进程产生子进程后，会维护子进程的一个 PCB 结构，子进程退出，由父进程释放这个 PCB 结构。如果父进程没有释放这个 PCB，那么这个子进程就成为一个僵尸进程。其实影响不大，因为子进程退出，子进程所占用的资源都已经释放，只是一个 PCB 还未释放而已。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// zombie.c</span></div><div class="line"><span class="comment">// ps 命令可以看到 &lt;defunct&gt; 就表示僵尸进程</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 返回 0 表示子进程</span></div><div class="line">    <span class="keyword">pid_t</span> pid = fork();</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == pid) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"child id is %d\n"</span>, getpid());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"parent id is %d\n"</span>, getppid());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 父进程一直未结束，所以子进程变为了僵尸进程</span></div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译</span></div><div class="line">gcc -o zombie zombie.c</div><div class="line"><span class="comment">// 执行    </span></div><div class="line">./zombie &amp;</div></pre></td></tr></table></figure><p><strong>孤儿进程</strong></p><p>子进程结束之前，父进程已经退出。孤儿进程会成为 init 进程的孩子，由 1 号进程维护。图形界面时不一定是 1 号进程，但是总之都会由一个特殊的进程统一管理。影响不大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// orphan.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">pid_t</span> pid = fork();</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == pid) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"child ppid is %d\n"</span>, getppid());</div><div class="line">        sleep(<span class="number">10</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"parent ppid is %d\n"</span>, getppid()); <span class="comment">// 前后不一致</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"parent id is %d\n"</span>, getpid());</div><div class="line">        sleep(<span class="number">5</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2、进程调度"><a href="#2、进程调度" class="headerlink" title="2、进程调度"></a>2、进程调度</h2><p>内核进程调度器决定现在该哪个进程运行了，何时开始运行，运行多长时间。</p><p>linux 内核中，可以给每个进程<strong>定制专属</strong>的调度方案。</p><p>进程调度的发展从单任务（独占）到多任务（分时）。原则就是最大限度的压榨 CPU 资源。</p><p>DOS 就是单任务独占式的。</p><p><strong>非抢占式（cooperative multitasking）</strong></p><ul><li>除非进程主动认出 CPU（yielding），否则将一直运行</li></ul><p><strong>抢占式（preemptive multitasking）</strong></p><ul><li>由进程调度器强制开始或暂停（抢占）某一进程的执行</li></ul><p>linux2.5 经典 Unix O(1) 调度策略，时间分片挨个执行，偏向服务器，但对交互不友好。</p><p>Linux2.6.23 采用 <strong>CFS</strong> 完全公平调度算法 Completely Fair Scheduler。</p><ul><li>不再采用绝对时间片。使用绝对时间片反而不公平，比如医院看病来了急诊或者是个自处理软件和一个要求实时响应的软件，时间片不应该一样。</li><li>按优先级分配时间片的比例，记录每个进程的执行时间，如果有一个进程执行时间不到他应该分配的比例，某个时刻该进程请求 CPU 时优先执行，相当于补偿。</li></ul><p><strong>进程调度基本概念</strong></p><ul><li>进程类型<ul><li>IO 密集型，大部分时间用于等待 IO</li><li>CPU 密集型，大部分时间用于闷头计算</li></ul></li><li>进程优先级<ul><li>实时进程 &gt; 普通进程（0~99）。实时进程远大于普通进程，有实时进程时，普通进程没有执行机会。</li><li>普通进程 nice 值（-20~19）</li></ul></li><li>时间分配<ul><li>linux 采用按优先级的 CPU <strong>时间比</strong></li><li>其他系统多采用按优先级的时间片</li></ul></li><li>eg. 两个 app 同时运行<ul><li>一个文本处理程序</li><li>一个影视后期程序</li></ul></li></ul><p><strong>Linux 默认的调度策略</strong></p><p>对于实时进程：不同优先级使用 SCHED_FIFO(First In First Out) 和相同优先级使用 SCHED_RR（Round Robin） 两种。</p><p>对于普通进程：使用 CFS</p><p>其中等级最高的是 FIFO，这两种进程除非自己让 CPU 否则 Linux 会一直执行它，除非更高等级的 FIFO 和 RR 抢占它。</p><p>RR 只是这种线程中是同等级别 FIFO 中的平均分配。只有实时进程主动让出，或者执行完毕后，普通进程才有机会执行。</p><h2 id="3、中断"><a href="#3、中断" class="headerlink" title="3、中断"></a>3、中断</h2><h3 id="3-1-中断实现细节"><a href="#3-1-中断实现细节" class="headerlink" title="3.1 中断实现细节"></a>3.1 中断实现细节</h3><p>中断是<strong>硬件、软件和操作系统通讯</strong>的一种方式。</p><p>不管 OS 现在在干嘛，只要是有一些硬件的反应，都是需要优先执行。硬件反应后，软件也应该给出一些反馈。</p><p><img src="../../images/os/3/中断细节.png" alt=""></p><p>键盘按下一个键之后，中断控制器通知 CPU，但是 CPU 如何知道处理哪个应用程序呢？比如我敲下的字母是微信上敲的还是 office 上敲的？这个只有内核知道。CPU 会去固定位置（中断向量表）读取应该处理哪个应用程序。上半场是指内核处理，下半场是指应用程序。</p><p><strong>硬中断</strong></p><p>键盘、鼠标、网络等硬件事件就是硬中断</p><p><strong>软中断</strong></p><p><strong>用户态程序需要请求内核做事情是通过系统调用实现的，做任何系统调用都要打断内核，这就是软中断</strong>。软中断是中断向量表中的一个特殊中断，0x80H，这就是经常说的 80 中断。或者 sysenter 原语(某些新的 CPU 支持)。 </p><p><strong>调用细节</strong></p><p>需要调用哪个应用程序通过 ax 寄存器填入系统调用号或者说函数的编号。</p><p>系统调用函数的参数通过 bx cx dx si di 寄存器传入内核。</p><p>系统调用返回值通过 ax 返回。</p><p>Java 读网络 -&gt; jvm read() -&gt; c 库 read() -&gt; 内核空间 -&gt; system_call()（系统调用处理程序）-&gt; sys_read()</p><h3 id="3-2-从汇编角度理解软中断"><a href="#3-2-从汇编角度理解软中断" class="headerlink" title="3.2 从汇编角度理解软中断"></a>3.2 <strong>从汇编角度理解软中断</strong></h3><p><strong>搭建汇编环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nasm</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">;hello.asm</div><div class="line">;write(int fd, const void *buffer, size_t nbytes) 调用内核的 write 方法</div><div class="line">;fd 文件描述符 file descriptor - linux下一切皆文件。数据传输的一种介质</div><div class="line"></div><div class="line">section data</div><div class="line">    msg db &quot;Hello&quot;, 0xA</div><div class="line">    len equ $ - msg</div><div class="line"></div><div class="line">section .text</div><div class="line">global _start</div><div class="line">_start:</div><div class="line"></div><div class="line">    mov edx, len</div><div class="line">    mov ecx, msg</div><div class="line">    mov ebx, 1 ;文件描述符1 std_out 标准输出；所以 bx 寄存器传 1</div><div class="line">    mov eax, 4 ;write函数系统调用号 4；所以 ax 寄存器传 4</div><div class="line">    int 0x80 ;调用 80 中断。OS 收到这个信号后，会调用 80 的处理程序；从 ax 中拿出 4 来，发现应该调用 write 函数，然后从 bx 中取出 1，发现要以标准输出往外写；然后中 cx、dx 取出数据和长度</div><div class="line"></div><div class="line">    mov ebx, 0</div><div class="line">    mov eax, 1 ;exit函数系统调用号</div><div class="line">    int 0x80</div></pre></td></tr></table></figure><p><strong>编译：</strong><code>nasm -f elf  hello.asm -o hello.o</code></p><p><strong>链接：</strong><code>ld -m elf_i386 -o hello hello.o</code> 是指和原来已经写好的类库进行连接。</p><p> 一个程序的执行过程，要么处于用户态，要么处于内核态 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统学习（三）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程、线程和纤程&lt;/li&gt;
&lt;li&gt;进程调度&lt;/li&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习（二）</title>
    <link href="http://yoursite.com/2020-09-16-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%BA%8C%E8%AF%BE.html"/>
    <id>http://yoursite.com/2020-09-16-操作系统/第二课.html</id>
    <published>2020-09-16T14:13:12.000Z</published>
    <updated>2020-09-19T03:15:52.039Z</updated>
    
    <content type="html"><![CDATA[<p>IO 学习（二）。</p><a id="more"></a><h2 id="2、NUMA-Non-Uniform-Memory-Access"><a href="#2、NUMA-Non-Uniform-Memory-Access" class="headerlink" title="2、NUMA-Non Uniform Memory Access"></a>2、NUMA-Non Uniform Memory Access</h2><h3 id="2-1-UMA"><a href="#2-1-UMA" class="headerlink" title="2.1 UMA"></a>2.1 UMA</h3><p><strong>多块 CPU 通过主线共享同一个内存。</strong></p><p>UMA 问题：不易扩展，CPU 数量增多后引起内存访问冲突加剧，CPU 的很多资源花在争抢内存地址上面，4 颗 CPU 左右比较合适。</p><p><img src="../../images/os/2/UMA.png" alt=""></p><h3 id="2-2-NUMA"><a href="#2-2-NUMA" class="headerlink" title="2.2 NUMA"></a>2.2 NUMA</h3><p>在主板的插槽上，一组 CPU 和内存放在一起，可以理解为<strong>每一组 CPU 有自己专属的内存</strong>。当然访问其他内存也可以，通过主线访问，只不过效率低一点。</p><p>所以现在程序可以做到 NUMA Aware，即当程序感知到底层架构是 NUMA 时，某个 CPU 要分配一个对象内存时，会优先分配在该线程所在 CPU 中最近的内存中，ZGC 就是这样实现的。</p><p><img src="../../images/os/2/NUMA.png" alt=""></p><h2 id="3、计算机启动过程"><a href="#3、计算机启动过程" class="headerlink" title="3、计算机启动过程"></a>3、计算机启动过程</h2><p><img src="../../images/os/2/启动过程.png" alt=""></p><ul><li>通电</li><li>bios/uefi 芯片开始工作<ul><li>加电自检</li><li>加载 bootloader 到内存，bootloader 位于硬盘固定位置-第一个扇区</li></ul></li><li>bootloader 从 cmos 芯片读取一些可配置的信息。cmos 由主板上的电池给它通电。</li><li>选择操作启动启动</li><li>操作系统启动后，CPU 全权由操作系统掌管</li></ul><p>cmos 存储可配置的信息。主板上有块电池给它通电。如果主板一直不通电，过个几年由于这个电池电量耗尽，信息也就丢失了。</p><h2 id="4、操作系统基础"><a href="#4、操作系统基础" class="headerlink" title="4、操作系统基础"></a>4、操作系统基础</h2><h3 id="4-1-harmony"><a href="#4-1-harmony" class="headerlink" title="4.1 harmony"></a>4.1 harmony</h3><ul><li>微内核<ul><li>针对 5G + IOT</li><li>全场景：手机、PC、平板、车辆、智能穿戴、居家设备</li><li>弹性部署</li><li>开源</li><li>方舟编译器</li><li>混合内核 Linux + LiteOS</li></ul></li></ul><h3 id="4-2-什么是操作系统"><a href="#4-2-什么是操作系统" class="headerlink" title="4.2 什么是操作系统"></a>4.2 什么是操作系统</h3><p>可以理解为一个特殊的软件，<strong>一边管理所有的硬件(CPU、磁盘、内存)，一边对外提供服务管理应用（进程）</strong>。其他所有软件都和操作系统打交道。</p><p><img src="../../images/os/2/什么是操作系统.png" alt=""></p><p><img src="../../images/os/2/操作系统做什么.png" alt=""></p><p><strong>OS 简要结构</strong></p><ul><li>kernel：操作系统最核心结构，内核最主要的就是<strong>管理硬件</strong>。</li><li>外围程序：和应用程序打交道</li></ul><p><img src="../../images/os/2/简要结构.png" alt=""></p><h3 id="4-3-kernel"><a href="#4-3-kernel" class="headerlink" title="4.3 kernel"></a>4.3 kernel</h3><p><img src="../../images/os/2/kernel作用.png" alt=""></p><p><strong>宏内核</strong></p><p>内核相关程序全部装在一起，在一块内存。</p><p><img src="../../images/os/2/宏内核.png" alt=""></p><p><strong>微内核</strong></p><p><strong>有一个最核心的 kernel，只负责进程调度。kernel 相关程序可以放在不同的芯片、内存</strong>。比如应用程序需要读取某个文件，之前宏内核接收到请求后，直接调用文件系统处理请求，但是在微内核中，请求发到内核后，内核再去别的地方找能处理请求的程序来处理请求。优点是部署灵活，弹性部署，部件可插拔。缺点是效率低一点。</p><p><img src="../../images/os/2/微内核.png" alt=""></p><h2 id="5、基础概念"><a href="#5、基础概念" class="headerlink" title="5、基础概念"></a>5、基础概念</h2><h3 id="5-1-用户态内核态"><a href="#5-1-用户态内核态" class="headerlink" title="5.1 用户态内核态"></a>5.1 用户态内核态</h3><p>内核态可以访问 ring 0 级别指令，用户态只能访问 ring 3 级别指令。</p><p><img src="../../images/os/2/用户态内核态.png" alt=""></p><p>CPU 分不同的指令级别。</p><p>linux 内核跑在 ring 0 级，用户程序跑在 ring 3 级，对于系统的关键访问，需要经过 kernel 的同意，保证系统健壮性。</p><p>内核执行的操作：linux 内核操作不算多，200 多个系统调用。sendfile read write。</p><p>JVM 站在 OS 的角度，就是个普通程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IO 学习（二）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统学习（一）</title>
    <link href="http://yoursite.com/2020-09-15-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E8%AF%BE.html"/>
    <id>http://yoursite.com/2020-09-15-操作系统/第一课.html</id>
    <published>2020-09-15T14:13:12.000Z</published>
    <updated>2020-09-24T14:46:07.129Z</updated>
    
    <content type="html"><![CDATA[<p>IO 学习（一）。Linux 基础。</p><p>操作系统学习（一）</p><ul><li>CPU 基本原理</li><li>汇编基本原理</li><li>计算机和 CPU 的基本组成</li><li>存储器层次结构</li><li>程序局部性原理、缓存行、伪共享、缓存行对齐</li><li>缓存一致性协议（缓存锁）</li><li>总线锁</li></ul><a id="more"></a><h2 id="1、相关书籍推荐"><a href="#1、相关书籍推荐" class="headerlink" title="1、相关书籍推荐"></a>1、相关书籍推荐</h2><h3 id="1-1-读书原则"><a href="#1-1-读书原则" class="headerlink" title="1.1 读书原则"></a>1.1 读书原则</h3><p>读书的原则：<strong>不求甚解，观其大略</strong></p><p>你如果进到庐山里头，二话不说，蹲下头来，弯下腰，就对着某棵树某棵小草猛研究而不是说先把庐山的整体脉络跟那研究清楚了，那么你的学习方法肯定效率巨低而且特别痛苦，最重要的还是慢慢地还打击你的积极性，说我的学习怎么那么不happy啊，怎么那么特没劲那，因为你的学习方法错了，大体读明白，先拿来用，用着用着，很多道理你就明白了。</p><h3 id="1-2-书籍推荐"><a href="#1-2-书籍推荐" class="headerlink" title="1.2 书籍推荐"></a>1.2 书籍推荐</h3><p><strong>计算机系统</strong></p><ul><li>《编码：隐匿在计算机软硬件背后的语言》  // 推荐</li><li>《深入理解计算机系统》 </li></ul><p><strong>高级语言</strong></p><ul><li>《C程序设计语言》 // 推荐</li><li>《C Primer Plus》 </li></ul><p><strong>数据结构和算法-毕生的学习 </strong></p><ul><li>《Java数据结构与算法》《算法》 </li><li>《算法导论》《计算机程序设计艺术》//难 </li></ul><p><strong>操作系统</strong></p><ul><li>《Linux内核源码解析》  </li><li>《Linux内核设计与实现》 // 推荐</li><li>《30天自制操作系统》</li><li>《深入理解 Linux 内核》</li></ul><p><strong>网络</strong></p><ul><li>机工《TCP/IP详解》卷一 翻译一般</li></ul><p><strong>编译原理</strong></p><ul><li>机工 龙书 《编译原理》 </li><li>《编程语言实现模式》</li></ul><p><strong>数据库</strong></p><ul><li>《SQLite源码》</li><li>Derby - JDK自带数据库</li></ul><h2 id="2、硬件基础知识"><a href="#2、硬件基础知识" class="headerlink" title="2、硬件基础知识"></a>2、硬件基础知识</h2><h3 id="2-1-CPU-的制作过程"><a href="#2-1-CPU-的制作过程" class="headerlink" title="2.1 CPU 的制作过程"></a>2.1 CPU 的制作过程</h3><p><strong>视频：</strong></p><p> <a href="https://haokan.baidu.com/v?vid=11928468945249380709&amp;pd=bjh&amp;fr=bjhauthor&amp;type=video" target="_blank" rel="external">https://haokan.baidu.com/v?vid=11928468945249380709&amp;pd=bjh&amp;fr=bjhauthor&amp;type=</a><a href="https://haokan.baidu.com/v?vid=11928468945249380709&amp;pd=bjh&amp;fr=bjhauthor&amp;type=video" target="_blank" rel="external">video</a> </p><p><strong>文字：</strong></p><p><a href="https://www.sohu.com/a/255397866_468626" target="_blank" rel="external">https</a><a href="https://www.sohu.com/a/255397866_468626" target="_blank" rel="external">://www.sohu.com/a/255397866_468626</a> </p><p><strong>原料：</strong>一堆沙子+一堆铜 + 一堆胶水 + 特定金属添加 + 特殊工艺</p><p><strong>工艺：</strong>沙子脱氧 -&gt; 石英 -&gt; 二氧化硅 -&gt; 提纯 -&gt; 硅锭 -&gt; 切割 -&gt; 晶圆 -&gt; 涂抹光刻胶 -&gt; 光刻 -&gt; 蚀刻 -&gt; 清除光刻胶 -&gt; 电镀 -&gt; 抛光 -&gt; 铜层 -&gt; 测试  -&gt; 切片 -&gt; 封装</p><h3 id="2-2-CPU-的原理"><a href="#2-2-CPU-的原理" class="headerlink" title="2.2 CPU 的原理"></a>2.2 CPU 的原理</h3><p><strong>如何代表数字？</strong></p><p>计算机需要解决的最根本问题：如何代表数字</p><p><strong>晶体管</strong>是如何工作的：</p><p><a href="https://haokan.baidu.com/v?vid=16026741635006191272&amp;pd=bjh&amp;fr=bjhauthor&amp;type=video" target="_blank" rel="external">https://haokan.baidu.com/v?vid=16026741635006191272&amp;pd=bjh&amp;fr=bjhauthor&amp;type=</a><a href="https://haokan.baidu.com/v?vid=16026741635006191272&amp;pd=bjh&amp;fr=bjhauthor&amp;type=video" target="_blank" rel="external">video</a></p><p><strong>晶体管</strong>的工作原理：</p><p><a href="https://www.bilibili.com/video/av47388949?p=2" target="_blank" rel="external">https://www.bilibili.com/video/av47388949?p=2</a></p><p>硅 -&gt; 加入特殊元素 -&gt; P半导体 N半导体 -&gt; PN 结 -&gt; 二极管 -&gt; 场效应晶体管 -&gt; 逻辑开关。</p><p>与门、或门、非门、或非门（异或） -&gt; 基础逻辑电路</p><p>加法器 累加器 锁存器</p><p>实现手动计算（通电一次，运行一次位运算）</p><p>加入内存，实现自动运算（每次读取内存指令，（高电低电））</p><p>《编码》17章</p><p><strong>CPU 工作原理：</strong>CPU 有很多针脚，这些针脚就是一些开关，每个针脚可以接收一个电信号，通电表示1，没通电表示0。通过振荡器（<strong>时钟发生器，相当于心脏，每震荡一次 CPU 进行一次计算</strong>）控制每个针脚通电断电，从而告诉 CPU 要做什么样的计算。</p><p><strong>引入内存：</strong>要输入给 CPU 的数据放在哪里呢？放在内存，内存就相当于 CPU 的仓库。所以内存的本质就是存储了一些电信号，通过总线和 CPU 相连接。</p><p>操作系统的位数可以动态控制，和 CPU 有关，CPU 每次读取 64 个数字就是 64 位。64 位 CPU 中每个寄存器大小 64 位，ALU 也是 64 位。</p><p>让计算机看懂计算：01000010 + 00101100</p><p>手工输入：纸带计算机</p><p>助计符：01000010 - mov sub</p><p>高级语言 -&gt; 编译器 -&gt; 机器语言</p><h3 id="2-3-汇编执行过程"><a href="#2-3-汇编执行过程" class="headerlink" title="2.3 汇编执行过程"></a>2.3 汇编执行过程</h3><p>汇编语言的本质就是机器语言的助计符。所以汇编语言就是机器语言。</p><p>计算机通电 -&gt; CPU 读取内存中程序(电信号输入) -&gt; 时钟发生器（目前每秒钟可以震荡 <strong>Ghz，几十亿次</strong>）不断震荡通断电 -&gt; 推动 CPU 内部一步一步执行(执行多少步取决于指令需要的时钟周期) -&gt; 计算完成 -&gt; 写回（电信号）-&gt; 写给显卡输出（sout，或者图形）</p><p><strong>问</strong>：屏幕的频率是啥意思？</p><p><strong>答</strong>：计算机经过计算，把结果从内存通过 DMA 走内存总线、IO 总线发送到显卡。屏幕上是一个一个的像素点，每个像素点对应显卡的一些数据。CPU 只负责把数据发送到显卡。屏幕所谓的频率比如 60HZ、144HZ，是指屏幕从显卡读取数据的频率。</p><p>JVM 本身不跨平台，Java 是通过 JVM 来跨平台。比如 Windows 行 10001000 表示 add，但是 Linux 上 10001001 表示加，但是 Java 统一规定 10001000 表示 add，然后提供两个 JVM 分别处理不同平台的实现，这样就实现了跨平台。</p><h3 id="2-4-量子计算机"><a href="#2-4-量子计算机" class="headerlink" title="2.4 量子计算机"></a>2.4 量子计算机</h3><p>普通比特：1bit 要么1要么0；</p><p>量子比特：可以同时又是1又是0</p><p><img src="../../images/os/1/量子比特.png" alt=""></p><p><img src="../../images/os/1/恐怖.png" alt=""></p><h2 id="3、Java-相关的硬件知识"><a href="#3、Java-相关的硬件知识" class="headerlink" title="3、Java 相关的硬件知识"></a>3、Java 相关的硬件知识</h2><p>CPU 和内存是计算机的核心。</p><h3 id="3-1-计算机和-CPU-的基本组成"><a href="#3-1-计算机和-CPU-的基本组成" class="headerlink" title="3.1 计算机和 CPU 的基本组成"></a>3.1 计算机和 CPU 的基本组成</h3><p><img src="../../images/os/1/计算机的组成.png" alt=""></p><p>1、PC：Program Counter 程序计数器（记录当前指令地址）</p><p>2、Registers：暂时存储 CPU 计算需要用到的数据。有的 CPU 有上百个寄存器。把内存数据拷贝过来，放入寄存器方便 CPU 使用，因为内存离 CPU 太远了。</p><p>3、ALU：Arithmetic &amp; Logic Unit 运算逻辑单元。比如计算 2 + 3</p><ul><li>CPU 把 2、3 读入 CPU 中的两个寄存器假设 AX、BX</li><li>然后从 PC 中读取到的指令是 add，</li><li>然后 ALU 则把 AX、BX 取出来进行一系列电路计算，结果返回到另一个寄存器假设 DX</li><li>最后把 DX 数据返回内存。</li></ul><p>4、CU：Control Unit 控制单元。中断信号控制</p><p>5、MMU：Memory Management Unit 内存管理单元</p><p>6、Cache</p><p><strong>超线程：一个 ALU 对应多个 PC|Registers 组合就是所谓的超线程。</strong></p><p>所谓的四核八线程结构，一个 CPU 核心对应一个 ALU，但是每个核心有两组 PC|Registers，所以正常来说四核对应四个 ALU，只能同时进行四个线程的并行运算，但是这里却可以八个线程并行，这就是超线程了。</p><p><img src="../../images/os/1/四核八线程.png" alt=""></p><h3 id="3-2-存储器层次结构"><a href="#3-2-存储器层次结构" class="headerlink" title="3.2 存储器层次结构"></a>3.2 存储器层次结构</h3><p> 在一个典型操作系统中，可能会有几个缓存（<strong>在多核系统中，每个核心都会有自己的缓存</strong>）共享主存总线，每个相应的 <code>CPU</code> 会发出读写请求，而缓存的目的是为了<strong>减少 CPU 读写共享主存的次数</strong>。 因为 CPU 和物理内存之间的通信速度远慢于 CPU 的处理速度 ，加入多级缓存就是为了解决<strong>处理器于内存速度之间的矛盾</strong>。</p><p><img src="../../images/os/1/存储器的层次结构.png" alt=""></p><p><strong>六级存储结构</strong></p><ul><li>L0：寄存器</li><li>L1：高速缓存（CPU 对应核心内部）</li><li>L2：高速缓存（CPU 对应核心内部）</li><li>L3：高速缓存（CPU 共享）</li><li>L4：主存</li><li>L5：磁盘</li><li>L6：远程文件存储</li></ul><p><strong>CPU 到六级存储结构时间表</strong></p><table><thead><tr><th>从 CPU 到</th><th>大约需要的 CPU 周期</th><th>大约需要的时间</th></tr></thead><tbody><tr><td>Registers</td><td>1 cycle</td><td>&lt; 1ns</td></tr><tr><td>L1 Cache</td><td>3~4 cycle</td><td>约 1ns</td></tr><tr><td>L2 Cache</td><td>10 cycle</td><td>约 3ns</td></tr><tr><td>L3 Cache</td><td>40~50 cycle</td><td>约 15ns</td></tr><tr><td>main memory</td><td></td><td>约 80ns</td></tr></tbody></table><p>从上表看出，CPU 访问 Registers 或者 L1 Cache 的速度大约是访问主存速度的 <strong>100 倍</strong>。</p><p><strong>多核 CPU 的缓存结构</strong></p><p>一块 CPU 有多个核心；每个核心有自己的 Registers、LI、L2 缓存；同一 CPU 的多个核心共享该 CPU 对应的 L3；所有 CPU 共享内存。</p><p><img src="../../images/os/1/多核CPU缓存结构.png" alt=""></p><h3 id="3-3-程序局部性原理"><a href="#3-3-程序局部性原理" class="headerlink" title="3.3 程序局部性原理"></a>3.3 程序局部性原理</h3><p>不管是从缓存读取还是从内存读取还是从磁盘读取都是<strong>按块读取</strong>。程序局部性原理，可以提高效率。充分发挥总线 CPU 针脚等一次性读取更多数据的能力。这个块对于内存来说就是内存页，对于 CPU 来说就是缓存行。</p><p><strong>Cache line 的概念。缓存行对齐、伪共享。</strong></p><p>缓存行：</p><ul><li>缓存行越大，局部性空间效率越高，但读取时间慢</li><li>缓存行越小，局部性空间效率越低，但读取时间快</li><li>取一个折中值，目前多用 64byte，工业实践决定。</li></ul><p><img src="../../images/os/1/缓存行对齐和伪共享.png" alt=""></p><h4 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a><strong>伪共享</strong></h4><p>如何保证两个 CPU L1、L2 数据同步？<strong>缓存一致性协议</strong>。以缓存行为单位。比如 CPU1 修改了 x，缓存一致性协议会通知 CPU2，大哥你这行数据已经过时了，请重新去内存读取。这时 x、y其实就是一个<strong>伪共享</strong>的状态，看似共享，实际上由于其他 CPU 的影响，还是需要不断去内存读数据。</p><p>验证伪共享的存在：</p><h4 id="缓存行对齐"><a href="#缓存行对齐" class="headerlink" title="缓存行对齐"></a><strong>缓存行对齐</strong></h4><p>对于有些特别敏感的数字，会存在线程高竞争的访问，<strong>为了保证不发生伪共享</strong>，可以使用缓存行对齐的编程方式。</p><p>验证使用缓存行对齐的方式提高程序的效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// disruptor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> p1,p2,p3,p4,p5,p6,p7; <span class="comment">// cache line padding</span></div><div class="line"><span class="comment">// 前后均加上 7 个long，所以 cursor 肯定不会和其他数据在同一个缓存行，所以就不会有伪共享的问题了</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> cursor = INITIAL_CURSOR_VALUE;</div><div class="line"><span class="keyword">public</span> <span class="keyword">long</span> p8,p9,p10,p11,p12,p13,p14; <span class="comment">// cache line padding</span></div><div class="line"></div><div class="line"><span class="comment">// JDK7中，很多采用 long padding 提高效率。</span></div><div class="line"><span class="comment">// JDK8中，加入了 @Contended 注解（实验），需要加上JVM 参数：-XX:-RestrictContended  </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Contended</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 需要加上以下 JVM 参数生效。</span></div><div class="line"><span class="comment">     * 增加该注解的原因是，原来前后加 7 个 long 的方式只对 intel CPU 有效</span></div><div class="line"><span class="comment">     * 对于其他 CPU 不一定有效，因为别的 CPU 缓存行不一定 64 字节，比如可能 128 字节</span></div><div class="line"><span class="comment">     * -XX:-RestrictContended</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Contended</span></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> x;</div><div class="line">    <span class="meta">@Contended</span></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> y;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T05_Contended t = <span class="keyword">new</span> T05_Contended();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">1_0000_0000L</span>; i++) &#123;</div><div class="line">                t.x = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">1_0000_0000L</span>; i++) &#123;</div><div class="line">                t.y = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t1.join();</div><div class="line">        t2.join();</div><div class="line">        System.out.println((System.nanoTime() - start)/<span class="number">100_0000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-缓存一致性-Cache-Coherence-协议"><a href="#3-4-缓存一致性-Cache-Coherence-协议" class="headerlink" title="3.4 缓存一致性(Cache Coherence)协议"></a>3.4 缓存一致性(Cache Coherence)协议</h3><p>在多路处理器系统中，每个<strong>处理器内部(L1、L2)</strong>都有自己的高速缓存，而它们又共享同一<strong>主内存（Main Memory）</strong>，这种系统称为<strong>共享内存多核系统（Shared Memory Multiprocessors System）</strong>。</p><p>当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致，从而引发缓存一致性问题。</p><p><img src="../../images/jvm/03/处理器_高速缓存_主内存关系.png" alt=""></p><p>不同 CPU 使用的缓存一致性协议有所不同。MSI、MESI、MOSI、Synapse、Firefly、Dragon 等都是缓存一致性协议。Intel 目前用的缓存一致性协议是 <strong>MESI</strong>。</p><p>JVM 也有自己的内存模型，并且与这里介绍的硬件级别的内存模型有高度的可类比性。</p><p>验证缓存一致性协议对性能的影响：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_CacheLinePadding</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * long 8字节，数组中两个元素肯定在同一个缓存行</span></div><div class="line"><span class="comment">     * 两个不同线程分别修改数组元素，两个 CPU 去处理，两个 CPU 都会缓存这个缓存行</span></div><div class="line"><span class="comment">     * 缓存一致性协议肯定会不停的互相通知对方去内存取最新的数据</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">long</span>[] arr = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10_0000_0000L</span>; i++) &#123;</div><div class="line">                arr[<span class="number">0</span>] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10_0000_0000L</span>; i++) &#123;</div><div class="line">                arr[<span class="number">1</span>] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t1.join();</div><div class="line">        t2.join();</div><div class="line">        System.out.println((System.nanoTime() - start)/<span class="number">100_0000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_CacheLinePadding</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * long 8字节，0 号和 8 号元素肯定不在一个缓存行</span></div><div class="line"><span class="comment">     * 两个不同线程分别修改数组元素，两个 CPU 去处理</span></div><div class="line"><span class="comment">     * 由于数据在不同的缓存行，互不影响</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">long</span>[] arr = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">16</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10_0000_0000L</span>; i++) &#123;</div><div class="line">                arr[<span class="number">0</span>] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">10_0000_0000L</span>; i++) &#123;</div><div class="line">                arr[<span class="number">8</span>] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t1.join();</div><div class="line">        t2.join();</div><div class="line">        System.out.println((System.nanoTime() - start)/<span class="number">100_0000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> MESI 协议细节：<a href="https://www.cnblogs.com/z00377750/p/9180644.html" target="_blank" rel="external">https://www.cnblogs.com/z00377750/p/9180644.html</a> </p><p><img src="../../images/os/1/缓存一致性协议.png" alt=""></p><h3 id="3-5-总线锁"><a href="#3-5-总线锁" class="headerlink" title="3.5 总线锁"></a>3.5 <strong>总线锁</strong></h3><p>有些无法被缓存的数据或者跨越多个缓存行的数据，缓存一致性协议无法解决一致性问题，这时需要锁总线。缓存一致性协议有时也被称为缓存锁。一旦总线锁定，这台计算机的其他 CPU 均无法访问内存，所以和缓存锁相比效率更低。</p><p><strong>总结：</strong>为了缓解 cpu 和内存之间速度差异，CPU 和内存之间增加多级高速缓存；为了减少访问内存的次数，引入程序局部性原理，引入缓存行的概念；为了解决多核 CPU 缓存行数据一致性问题，引入缓存锁（缓存一致性协议）的概念；还是为了解决多核 CPU 缓存行数据一致性问题，有些数据跨越多个缓存行或者无法缓存，引入总线锁的概念。</p><h3 id="3-6-CPU-乱序执行"><a href="#3-6-CPU-乱序执行" class="headerlink" title="3.6 CPU 乱序执行"></a>3.6 CPU 乱序执行</h3><p>除了增加高速缓存之外，为了使处理器内部的运算单元(ALU)能尽量被充分利用，处理器可能会对输入代码进行<strong>乱序执行（Out-Of-Order Execution）优化</strong>，保证最终结果一样，但不保证执行顺序。</p><p>CPU 为了提高指令执行效率，会在一条指令执行过程中（比如去内存读取数据（慢100倍）），去同时执行另一条指令，前提是<strong>两条指令没有依赖关系</strong>。</p><p>CPU 乱序的根源：CPU 在<strong>读等待</strong>的时候执行其他不影响的指令；CPU 在写的同时可以进行<strong>合并写</strong>。</p><p><img src="../../images/jvm/03/CPU指令重排序问题.png" alt=""></p><p><strong>CPU 乱序执行证明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisOrder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x, y;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 假设不会乱序执行</span></div><div class="line"><span class="comment">     * a=1 x=b b=1 y=a ==&gt;x=0,y=1</span></div><div class="line"><span class="comment">     * a=1 b=1 x=b y=a ==&gt;x=1,y=1</span></div><div class="line"><span class="comment">     * a=1 b=1 y=a x=b ==&gt;x=1,y=1</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * b=1 y=a a=1 x=b ==&gt;x=1,y=0</span></div><div class="line"><span class="comment">     * b=1 a=1 x=b y=a ==&gt;x=1,y=1</span></div><div class="line"><span class="comment">     * b=1 a=1 y=a x=b ==&gt;x=1,y=1</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 乱序</span></div><div class="line"><span class="comment">     * x=b y=a a=1 b=1</span></div><div class="line"><span class="comment">     * y=a x=b a=1 b=1</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            i++;</div><div class="line">            x = <span class="number">0</span>; y = <span class="number">0</span>;</div><div class="line">            a = <span class="number">0</span>; b = <span class="number">0</span>;</div><div class="line">            Thread one = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                <span class="comment">// shortWait(100000);</span></div><div class="line">                a = <span class="number">1</span>;</div><div class="line">                x = b;</div><div class="line">            &#125;);</div><div class="line">            Thread other = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                b = <span class="number">1</span>;</div><div class="line">                y = a;</div><div class="line">            &#125;);</div><div class="line">            one.start();other.start();</div><div class="line">            one.join();other.join();</div><div class="line">            String result = <span class="string">"第"</span> + i + <span class="string">"次("</span> + x + <span class="string">","</span> + y + <span class="string">")"</span>;</div><div class="line">            System.out.println(result);</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</div><div class="line">                System.err.println(result);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>CPU 合并写证明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteCombining</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITERATIONS = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEMS = <span class="number">1</span> &lt;&lt; <span class="number">24</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MASK = ITEMS - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayA = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayB = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayC = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayD = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayE = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] arrayF = <span class="keyword">new</span> <span class="keyword">byte</span>[ITEMS];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">            System.out.println(i + <span class="string">" singleLoop duration (ns) ="</span> + runCaseOne());</div><div class="line">            System.out.println(i + <span class="string">" singleLoop duration (ns) ="</span> + runCaseTwo());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 直接一次写完速度反而更慢</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseOne</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        <span class="keyword">int</span> i = ITERATIONS;</div><div class="line"></div><div class="line">        <span class="comment">// 写完四个字节后,剩下两个还要等待其他两个字节来填充后才提交</span></div><div class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>)  &#123;</div><div class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</div><div class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) i;</div><div class="line">            arrayA[slot] = b;</div><div class="line">            arrayB[slot] = b;</div><div class="line">            arrayC[slot] = b;</div><div class="line">            arrayD[slot] = b;</div><div class="line">            arrayE[slot] = b;</div><div class="line">            arrayF[slot] = b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> System.nanoTime() - start;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 充分利用合并写技术,速度块一倍</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">runCaseTwo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.nanoTime();</div><div class="line">        <span class="keyword">int</span> i = ITERATIONS;</div><div class="line">        <span class="comment">// 每次四个字节,直接提交</span></div><div class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</div><div class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</div><div class="line">            arrayA[slot] = b;</div><div class="line">            arrayB[slot] = b;</div><div class="line">            arrayC[slot] = b;</div><div class="line">        &#125;</div><div class="line">        i = ITERATIONS;</div><div class="line">        <span class="keyword">while</span> (--i != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> slot = i &amp; MASK;</div><div class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</div><div class="line">            arrayD[slot] = b;</div><div class="line">            arrayE[slot] = b;</div><div class="line">            arrayF[slot] = b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> System.nanoTime() - start;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>CPU 有一个  WC Cache，只有四个字节，速度比一级缓存更快。WC Cache 满了直接写回 L2。所以每次处理四个字节效率更高。</p><h3 id="3-6-CPU-如何保证有序执行"><a href="#3-6-CPU-如何保证有序执行" class="headerlink" title="3.6 CPU 如何保证有序执行"></a>3.6 CPU 如何保证有序执行</h3><h4 id="CPU-内存屏障"><a href="#CPU-内存屏障" class="headerlink" title="CPU 内存屏障"></a>CPU 内存屏障</h4><p>​    sfence（读）：在 sfence（save fence） 指令前的写操作必须在 sfence 指令后的写操作前完成</p><p>​    lfence（写）：在 lfence(load fence) 指令前的读操作必须在 lfence 指令后的读操作前完成</p><p>​    mfence（读写）：在 mfence(mix fence) 指令前的读写操作必须在 mfence 指令后的读写操作前完成</p><p>intel lock 汇编指令(原子指令)？</p><h4 id="总线锁"><a href="#总线锁" class="headerlink" title="总线锁"></a>总线锁</h4><p>和上面缓存一致性问题中的总线锁是一个概念。即总线锁既可以解决一致性问题又可以解决乱序问题 ，但是是一个重量级操作。</p><h3 id="3-7-JVM-如何保证有序执行"><a href="#3-7-JVM-如何保证有序执行" class="headerlink" title="3.7 JVM 如何保证有序执行"></a>3.7 JVM 如何保证有序执行</h3><h4 id="8-个-hanppens-before-原则"><a href="#8-个-hanppens-before-原则" class="headerlink" title="8 个 hanppens-before 原则"></a>8 个 hanppens-before 原则</h4><p>操作 A 先行发生于操作 B，其实就是说在发生操作 B 之前，操作 A 产生的影响能被操作 B 观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p><p>JMM 定义了一些“天然的”线性发生关系，他们无需任何同步器协助就已经存在。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来，则它们就没有顺序性保障，<strong>虚拟机可以对它们随意地进行重排序</strong>。</p><p>这只是 Java 的一个规范，具体由各个 JVM 实现。</p><p><img src="../../images/os/1/happens-before.png" alt=""></p><p><strong>时间先后顺序与先行发生原则之间基本没有因果关系</strong></p><ul><li>A 先行 B，但是时间上 A 不一定先于 B。典型的<strong>指令重排序</strong>，看程序次序规则就可理解。</li><li>A 时间顺序先于 B，A 不一定先行于 B。比如线程1时间上先 setValue，线程2紧接着 getValue。上面没有一个规则能证明线程1 set 操作先行于线程2 get 操作，所以如果不做手动同步处理，无法保证线程2 可以获取到正确的线程1 设置的值。</li></ul><h4 id="4-个-JVM-内存屏障"><a href="#4-个-JVM-内存屏障" class="headerlink" title="4 个 JVM 内存屏障"></a>4 个 JVM 内存屏障</h4><p>JVM 内存屏障只是一个规范，不同 CPU 的实现方式可能不同。比如龙芯、x86、arm 等 cpu 实现都不同。</p><p><strong>LoadLoad 屏障：</strong></p><ul><li><strong>对于这样的语句 Load1;</strong> LoadLoad;Load2，在 Load2及后续读取操作要读取的数据被访问前，保证 Load1 要读取的数据被读取完毕。</li></ul><p><strong>StoreStore 屏障：</strong></p><ul><li>对于这样的语句 Store1;StoreStore;Store2，在 Store2 及后续写入操作执行前，保证 Store1 的写入操作对其他处理器可见。</li></ul><p><strong>LoadStore 屏障：</strong></p><ul><li>对于这样的语句 Load1;StoreStore;Store2，在 Store2 及后续写入操作被刷出前，保证 Load1 要读取的数据已经被读取完毕。</li></ul><p><strong>StoreLoad 屏障：</strong></p><ul><li>对于这样的语句 Store1;StoreStore;Load2，在 Load2 及后续读取操作执行前，保证 Store1 的写入对所有处理器可见。</li></ul><p>CPU层面：Intel -&gt; 原语(mfence lfence sfence) 或者锁总线</p><p>JVM层级：8个hanppens-before原则 4个内存屏障 （LL LS SL SS）</p><p>as-if-serial : 不管硬件什么顺序，单线程执行的结果不变，看上去像是serial</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IO 学习（一）。Linux 基础。&lt;/p&gt;
&lt;p&gt;操作系统学习（一）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 基本原理&lt;/li&gt;
&lt;li&gt;汇编基本原理&lt;/li&gt;
&lt;li&gt;计算机和 CPU 的基本组成&lt;/li&gt;
&lt;li&gt;存储器层次结构&lt;/li&gt;
&lt;li&gt;程序局部性原理、缓存行、伪共享、缓存行对齐&lt;/li&gt;
&lt;li&gt;缓存一致性协议（缓存锁）&lt;/li&gt;
&lt;li&gt;总线锁&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="OS" scheme="http://yoursite.com/categories/OS/"/>
    
    
      <category term="OS" scheme="http://yoursite.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>MySql 调优(十四) 经典面试题目</title>
    <link href="http://yoursite.com/2020-09-10-mysql/mysql_14_%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98.html"/>
    <id>http://yoursite.com/2020-09-10-mysql/mysql_14_经典面试题.html</id>
    <published>2020-09-10T15:13:12.000Z</published>
    <updated>2020-09-13T11:27:14.471Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="1、MySQL的复制原理以及流程"><a href="#1、MySQL的复制原理以及流程" class="headerlink" title="1、MySQL的复制原理以及流程"></a>1、<a href="https://link.jianshu.com/?t=http://lib.csdn.net/base/mysql" target="_blank" rel="external">MySQL</a>的复制原理以及流程</h2><ul><li>master 必须开启 binlog</li><li>每当 master 数据有更新，数据会记录进入 binlog</li><li>slave 会定时嗅探 master binlog 变化</li><li>一旦有变化，就会启动一个 I/O Thread 请求 master 的数据</li><li>master 启动 dump 线程，向 slave 发送事件日志</li><li>I/O Thread 接收事件日志，然后存入本地的中继日志（relay-log 中）</li><li>启动 SQL Thread 重放 relay-log，从而进行主从数据同步</li></ul><h2 id="2、MyISAM-与-InnoDB-的区别"><a href="#2、MyISAM-与-InnoDB-的区别" class="headerlink" title="2、MyISAM 与 InnoDB 的区别"></a>2、MyISAM 与 InnoDB 的区别</h2><p>1、非聚簇索引、聚簇索引</p><p>2、不支持行锁、支持行锁；都支持表锁</p><p>3、不支持事务、支持事务</p><p>4、不支持外键、支持外键</p><p>5、支持全文索引、5.6 之后支持</p><h3 id="InnoDB-4-大特征"><a href="#InnoDB-4-大特征" class="headerlink" title="InnoDB 4 大特征"></a>InnoDB 4 大特征</h3><h3 id="两者-select-count-那个更快？"><a href="#两者-select-count-那个更快？" class="headerlink" title="两者 select count(*) 那个更快？"></a>两者 select count(*) 那个更快？</h3><ul><li>无 where count(*) MyISAM 很快；无 where count(column(not null)) MyISAM 很快</li><li><p>有 where 并建立了索引 count 很快，否则全表扫描</p><h2 id="3、varchar-与-char-的区别，-varchar-50-中的-50-代表的涵义"><a href="#3、varchar-与-char-的区别，-varchar-50-中的-50-代表的涵义" class="headerlink" title="3、varchar 与 char 的区别， varchar(50) 中的 50 代表的涵义"></a>3、varchar 与 char 的区别， varchar(50) 中的 50 代表的涵义</h2></li></ul><p>区别：</p><ul><li>大小不同，char 255 字符；varchar 65535 字节（换算字符除以 2 或 3）</li><li>一般用 varchar 来存储变长数据，char 存储定长数据比如手机号、身份证号、MD5码等</li></ul><p>50 的含义：</p><p>​    最长不能超过 50 个字符。</p><p> int（20）中 20 的涵义 ：</p><p>​    数字前面展示 0。不代表长度，实际能放多大的数据由 int 字节数限制。int 4 字节。</p><h2 id="4、-innodb-的事务与日志的实现方式"><a href="#4、-innodb-的事务与日志的实现方式" class="headerlink" title="4、 innodb 的事务与日志的实现方式"></a>4、 innodb 的事务与日志的实现方式</h2><p>1、事务的概念（ACID）</p><p>2、I 引出的四种隔离级别</p><p>3、各个隔离级别引发的并发事务问题</p><p>4、锁机制（表锁、行锁）；乐观锁(数据版本记录机制实现)、悲观锁(数据库锁机制实现)</p><p>5、有多少种日志，事务和日志（事务如何通过日志实现），日志先行技术。主从一致问题。</p><h2 id="5、-binlog-的几种日志录入格式以及区别"><a href="#5、-binlog-的几种日志录入格式以及区别" class="headerlink" title="5、 binlog 的几种日志录入格式以及区别"></a>5、 binlog 的几种日志录入格式以及区别</h2><p>binlog-format：row、statement、mixed</p><p>statement 日志量可能更小一点，降低 I/O 消耗，提升主从复制的性能。但并不是所有的语句都可以用 statement 记录，比如一些使用了 sleep()、uuid() 等特殊函数的语句。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1、MySQL的复制原理以及流程&quot;&gt;&lt;a href=&quot;#1、MySQL的复制原理以及流程&quot; class=&quot;headerlink&quot; title=&quot;1、MySQL的复制原理以及流程&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://l
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-09-09-%E8%AF%BB%E4%B9%A6/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8.html"/>
    <id>http://yoursite.com/2020-09-09-读书/富爸爸穷爸爸.html</id>
    <published>2020-09-09T15:41:28.570Z</published>
    <updated>2020-09-09T15:44:19.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、富人不为钱工作"><a href="#1、富人不为钱工作" class="headerlink" title="1、富人不为钱工作"></a>1、富人不为钱工作</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、富人不为钱工作&quot;&gt;&lt;a href=&quot;#1、富人不为钱工作&quot; class=&quot;headerlink&quot; title=&quot;1、富人不为钱工作&quot;&gt;&lt;/a&gt;1、富人不为钱工作&lt;/h2&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-09-05-%E7%94%B5%E5%BD%B1/%E8%A7%A6%E4%B8%8D%E5%8F%AF%E5%8F%8A.html"/>
    <id>http://yoursite.com/2020-09-05-电影/触不可及.html</id>
    <published>2020-09-05T12:36:44.875Z</published>
    <updated>2020-09-05T13:22:59.639Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>热爱与批判</strong>：人总要有自己的喜怒哀乐，自己的是非对错。热爱就表现出来，不喜欢就直说。</p></li><li><p><strong>尊重与理解</strong>：“是给他的吗？”，“老弟，别这样，直接问他”。真正尊重别人，就请摘下你的有色眼镜。</p></li><li><p><strong>成熟与成长</strong>：“人人都会犯错，可是我犯的错太多了”。在成熟之后，我也会感叹我犯的错太多了吗？</p></li><li><p><strong>绝境与重生</strong>：当人生走上绝境，我会遇到这样一个挚友吗？或者说我自己会成为自己的挚友吗？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;热爱与批判&lt;/strong&gt;：人总要有自己的喜怒哀乐，自己的是非对错。热爱就表现出来，不喜欢就直说。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;尊重与理解&lt;/strong&gt;：“是给他的吗？”，“老弟，别这样，直接问他”。真正尊重别人
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MySql 调优(十三) Java SPI 机制详解</title>
    <link href="http://yoursite.com/2020-08-29-mysql/mysql_13_JavaSPI%E6%9C%BA%E5%88%B6.html"/>
    <id>http://yoursite.com/2020-08-29-mysql/mysql_13_JavaSPI机制.html</id>
    <published>2020-08-29T15:13:12.000Z</published>
    <updated>2020-09-08T15:47:12.436Z</updated>
    
    <content type="html"><![CDATA[<ul><li>case … when + sum + group by 行转列</li></ul><a id="more"></a><h2 id="1、什么是-SPI？"><a href="#1、什么是-SPI？" class="headerlink" title="1、什么是 SPI？"></a>1、什么是 SPI？</h2><p>SPI 全称为 (<strong>Service Provider Interface</strong>) ，是 JDK 内置的一种服务提供发现机制。SPI是一种动态替换发现的机制， 比如有个接口，想运行时动态的给它添加实现，你只需要添加一个实现。我们经常遇到的就是java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，mysql 和 postgresql 都有不同的实现提供给用户，而 Java 的 SPI 机制可以为某个接口寻找服务实现。</p><p><img src="../../images/mysql/13/spi.jpg" alt=""></p><p>  如上图所示，接口对应的抽象SPI接口；实现方实现SPI接口；调用方依赖SPI接口。</p><p>SPI 接口的定义在调用方，在概念上更依赖调用方；组织上位于调用方所在的包中，<strong>实现位于独立的包中</strong>。</p><p>当服务的提供者提供了一种接口的实现之后，需要在 classpath 下的 <strong>META-INF/services/</strong> 目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个 jar 包（一般都是以 jar 包做依赖）的 META-INF/services/ 中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK 中查找服务实现的工具类是：<strong>java.util.ServiceLoader</strong>。</p><h2 id="2、SPI-的用途"><a href="#2、SPI-的用途" class="headerlink" title="2、SPI 的用途"></a>2、SPI 的用途</h2><p>数据库 DriverManager、Spring、ConfigurableBeanFactory 等都用到了 SPI 机制，这里以数据库DriverManager 为例，看一下其实现的内幕。</p><p>DriverManager 是 jdbc 里管理和注册不同数据库 driver 的工具类。针对一个数据库，可能会存在着不同的数据库驱动实现。我们在使用特定的驱动实现时，不希望修改现有的代码，而希望通过一个简单的配置就可以达到效果。 在使用 mysql 驱动的时候，会有一个疑问，DriverManager 是怎么获得某确定驱动类的？我们在运用 Class.forName(“com.mysql.jdbc.Driver”) 加载 mysql 驱动后，就会执行其中的静态代码把 driver 注册到 DriverManager 中，以便后续的使用。</p><h3 id="JDBC-使用-SPI-实现细节"><a href="#JDBC-使用-SPI-实现细节" class="headerlink" title="JDBC 使用 SPI 实现细节"></a>JDBC 使用 SPI 实现细节</h3><p>DriverManager.getConnection 获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/test?"</span> +</div><div class="line">  <span class="string">"useSSL=false&amp;serverTimezone=Hongkong&amp;allowPublicKeyRetrieval=true"</span>, <span class="string">"root"</span>, <span class="string">"Pass9876"</span>);</div><div class="line"></div><div class="line">ensureDriversInitialized();</div></pre></td></tr></table></figure><p>调用 ServiceLoader 的 hasNext 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If the driver is packaged as a Service Provider, load it.</span></div><div class="line"><span class="comment">// Get all the drivers through the classloader</span></div><div class="line"><span class="comment">// exposed as a java.sql.Driver.class service.</span></div><div class="line"><span class="comment">// ServiceLoader.load() replaces the sun.misc.Providers()</span></div><div class="line"></div><div class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</div><div class="line">        Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</div><div class="line"></div><div class="line">        <span class="comment">/* Load these drivers, so that they can be instantiated.</span></div><div class="line"><span class="comment">                     * It may be the case that the driver class may not be there</span></div><div class="line"><span class="comment">                     * i.e. there may be a packaged driver with the service class</span></div><div class="line"><span class="comment">                     * as implementation of java.sql.Driver but the actual class</span></div><div class="line"><span class="comment">                     * may be missing. In that case a java.util.ServiceConfigurationError</span></div><div class="line"><span class="comment">                     * will be thrown at runtime by the VM trying to locate</span></div><div class="line"><span class="comment">                     * and load the service.</span></div><div class="line"><span class="comment">                     *</span></div><div class="line"><span class="comment">                     * Adding a try catch block to catch those runtime errors</span></div><div class="line"><span class="comment">                     * if driver not available in classpath but it's</span></div><div class="line"><span class="comment">                     * packaged as service and that service is there in classpath.</span></div><div class="line"><span class="comment">                     */</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (driversIterator.hasNext()) &#123;</div><div class="line">                driversIterator.next();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            <span class="comment">// Do nothing</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>最终调用的是 LazyClassPathLookupIterator 的 hasNextService 方法中的 nextProviderClass 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Loads and returns the next provider class.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">private</span> Class&lt;?&gt; nextProviderClass() &#123;</div><div class="line">    <span class="keyword">if</span> (configs == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// static final String PREFIX = "META-INF/services/";</span></div><div class="line">            String fullName = PREFIX + service.getName();</div><div class="line">            <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">                configs = ClassLoader.getSystemResources(fullName);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loader == ClassLoaders.platformClassLoader()) &#123;</div><div class="line">                <span class="comment">// The platform classloader doesn't have a class path,</span></div><div class="line">                <span class="comment">// but the boot loader might.</span></div><div class="line">                <span class="keyword">if</span> (BootLoader.hasClassPath()) &#123;</div><div class="line">                    configs = BootLoader.findResources(fullName);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    configs = Collections.emptyEnumeration();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                configs = loader.getResources(fullName);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</div><div class="line">            fail(service, <span class="string">"Error locating configuration files"</span>, x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> ((pending == <span class="keyword">null</span>) || !pending.hasNext()) &#123;</div><div class="line">        <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// META-INF/services/ 下的配置文件</span></div><div class="line">        pending = parse(configs.nextElement());</div><div class="line">    &#125;</div><div class="line">    String cn = pending.next();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 加载配置类</span></div><div class="line">        <span class="keyword">return</span> Class.forName(cn, <span class="keyword">false</span>, loader);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</div><div class="line">        fail(service, <span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Class.forName 加载 Driver 实现类，会执行静态块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DriverManager.registerDriver，把 Driver 实现放入 registeredDrivers 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(java.sql.Driver driver,</span></span></div><div class="line"><span class="function"><span class="params">                                  DriverAction da)</span></span></div><div class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* Register the driver if it has not already been added to our list */</span></div><div class="line">    <span class="keyword">if</span> (driver != <span class="keyword">null</span>) &#123;</div><div class="line">        registeredDrivers.addIfAbsent(<span class="keyword">new</span> DriverInfo(driver, da));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// This is for compatibility with the original DriverManager</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(<span class="string">"registerDriver: "</span> + driver);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>回到 DriverManager.getConnection 方法，循环 registeredDrivers，取出 Driver 进行 connect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (DriverInfo aDriver : registeredDrivers) &#123;</div><div class="line">    <span class="comment">// If the caller does not have permission to load the driver then</span></div><div class="line">    <span class="comment">// skip it.</span></div><div class="line">    <span class="keyword">if</span> (isDriverAllowed(aDriver.driver, callerCL)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            println(<span class="string">"    trying "</span> + aDriver.driver.getClass().getName());</div><div class="line">            Connection con = aDriver.driver.connect(url, info);</div><div class="line">            <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Success!</span></div><div class="line">                println(<span class="string">"getConnection returning "</span> + aDriver.driver.getClass().getName());</div><div class="line">                <span class="keyword">return</span> (con);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</div><div class="line">            <span class="keyword">if</span> (reason == <span class="keyword">null</span>) &#123;</div><div class="line">                reason = ex;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        println(<span class="string">"    skipping: "</span> + aDriver.getClass().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="SPI-demo"><a href="#SPI-demo" class="headerlink" title="SPI demo"></a>SPI demo</h3><p>创建接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IShout</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">IShout</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"miao miao"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IShout</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"wang wang"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 resource 目录下新建 META-INF/services 目录，然后创建配置文件 unit13_jdbc.spi.IShout，文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unit13_jdbc.spi.Dog</div><div class="line">unit13_jdbc.spi.Cat</div></pre></td></tr></table></figure><p>验证是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SPIMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ServiceLoader&lt;IShout&gt; shouts = ServiceLoader.load(IShout.class);</div><div class="line">        Iterator&lt;IShout&gt; iterator = shouts.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            IShout s = iterator.next();</div><div class="line">            s.shout();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 控制台输出</span></div><div class="line">wang wang</div><div class="line">miao miao</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;case … when + sum + group by 行转列&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
