<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟空</title>
  
  <subtitle>悟空的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-06T14:02:27.857Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>monkey-kong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程高并发学习(七)</title>
    <link href="http://yoursite.com/2020-04-07-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(7).html"/>
    <id>http://yoursite.com/2020-04-07-多线程与高并发/多线程高并发学习(7).html</id>
    <published>2020-04-07T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:27.857Z</updated>
    
    <content type="html"><![CDATA[<p>JMH 基本使用；Disruptor 入门</p><a id="more"></a><h2 id="1-JMH-测试工具"><a href="#1-JMH-测试工具" class="headerlink" title="1. JMH 测试工具"></a>1. JMH 测试工具</h2><h3 id="1-JMH-官网"><a href="#1-JMH-官网" class="headerlink" title="1. JMH 官网"></a>1. JMH 官网</h3><p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external">http://openjdk.java.net/projects/code-tools/jmh/</a></p><h3 id="2-maven-依赖"><a href="#2-maven-依赖" class="headerlink" title="2. maven 依赖"></a>2. maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-idea-插件"><a href="#3-idea-插件" class="headerlink" title="3. idea 插件"></a>3. idea 插件</h3><p>JMH plugin</p><h3 id="4-idea-设置"><a href="#4-idea-设置" class="headerlink" title="4. idea 设置"></a>4. idea 设置</h3><p>compiler -&gt; Annotation Processors -&gt; Enable Annotation Processing</p><h3 id="5-待测试类"><a href="#5-待测试类" class="headerlink" title="5. 待测试类"></a>5. 待测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PS</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        Random r = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) nums.add(<span class="number">1000000</span> + r.nextInt(<span class="number">1000000</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreach</span><span class="params">()</span> </span>&#123;</div><div class="line">        nums.forEach(v-&gt;isPrime(v));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallel</span><span class="params">()</span> </span>&#123;</div><div class="line">        nums.parallelStream().forEach(PS::isPrime);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=num/<span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-测试类"><a href="#6-测试类" class="headerlink" title="6. 测试类"></a>6. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PSTest</span> </span>&#123;</div><div class="line">    <span class="comment">// 测试</span></div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="comment">// 预热</span></div><div class="line">    <span class="meta">@Warmup</span>(iterations = <span class="number">1</span>, time = <span class="number">3</span>)</div><div class="line">    <span class="comment">// 线程数</span></div><div class="line">    <span class="meta">@Fork</span>(<span class="number">5</span>)</div><div class="line">    <span class="comment">// 测试模式</span></div><div class="line">    <span class="meta">@BenchmarkMode</span>(Mode.Throughput)</div><div class="line">    <span class="comment">// 总共执行多少次测试</span></div><div class="line">    <span class="meta">@Measurement</span>(iterations = <span class="number">1</span>, time = <span class="number">3</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// PS.foreach();</span></div><div class="line">        PS.parallel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="7-启动报错"><a href="#7-启动报错" class="headerlink" title="7. 启动报错"></a>7. 启动报错</h3><p>堆栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​```javaERROR: org.openjdk.jmh.runner.RunnerException: ERROR: Exception while trying to acquire the JMH lock (C:\WINDOWS\/jmh.lock): C:\WINDOWS\jmh.lock (拒绝访问。), exiting. Use -Djmh.ignoreLock=true to forcefully continue.   at org.openjdk.jmh.runner.Runner.run(Runner.java:216)   at org.openjdk.jmh.Main.main(Main.java:71)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">解决：</div><div class="line"></div><div class="line">RunConfiguration -&gt; Environment Variables -&gt; include system environment viables</div><div class="line"></div><div class="line">### 8. 阅读测试报告</div><div class="line"></div><div class="line">### 9. 官网样例</div><div class="line"></div><div class="line">http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</div><div class="line"></div><div class="line">## 2. Disruptor</div><div class="line"></div><div class="line">### 2.1 介绍</div><div class="line"></div><div class="line">主页：http://lmax-exchange.github.io/disruptor/</div><div class="line"></div><div class="line">源码：https://github.com/LMAX-Exchange/disruptor</div><div class="line"></div><div class="line">GettingStarted: https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started</div><div class="line"></div><div class="line">api: http://lmax-exchange.github.io/disruptor/docs/index.html</div><div class="line"></div><div class="line">maven: https://mvnrepository.com/artifact/com.lmax/disruptor</div><div class="line"></div><div class="line">### 2.2 Disruptor的特点</div><div class="line"></div><div class="line">1. 效率比 ConcurrentLinkedQueue  高，因为 Disruptor 使用数组实现，同时 Dirruptor 只需要为欸胡一个序号，而队列一般要维护头尾两个序号，所以 Disruptor 效率更高。</div><div class="line">2. Disruptor 记录下一个可用的元素，使用的是 RingBuffer 的序号。假如长度为 8，  当添加到第 12 个元素时在哪个序号上呢？用 12 %8 决定，所以 Disruptor 要求环的长度为 2 的 n 次幂，利于二进制计算，因为：12 % 8 = 12 &amp; （8 -1）。</div><div class="line">3. 当 Buffer 被填满时到底是覆盖还是等待，由 Producer 的**等待策略**决定。</div><div class="line">4. 无锁，高并发，使用环形 Buffer，直接覆盖（不用清除）旧的数据，降低GC频率</div><div class="line">5. 实现了基于事件的生产者消费者模式（观察者模式）</div><div class="line"></div><div class="line">### 2.3 Disruptor开发步骤</div><div class="line"></div><div class="line">1. 定义 Event，队列中需要处理的元素</div><div class="line">2. 定义 Event 工厂，用于填充队列</div><div class="line">   - 这里涉及到效率问题：disruptor 初始化的时候，会调用Event工厂，对ringBuffer进行内存的提前分配。所以插入覆盖值时，甚至都不用 new 对象，直接改变内部属性即可。</div><div class="line">   - GC 产生频率会降低</div><div class="line">3. 定义EventHandler（消费者），处理容器中的元素</div><div class="line"></div><div class="line">```java</div><div class="line">/**</div><div class="line"> * 消息对象</div><div class="line"> */</div><div class="line">public class LongEvent &#123;</div><div class="line">    private long value;</div><div class="line">    public void setValue(long value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line">    public long getValue() &#123;</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;LongEvent[&quot; + value + &quot;]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息工厂</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class LongEventFactory implements EventFactory&lt;LongEvent&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public LongEvent newInstance() &#123;</div><div class="line">        return new LongEvent();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息消费者</div><div class="line"> */</div><div class="line">public class LongEventHandler implements EventHandler&lt;LongEvent&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public void onEvent(LongEvent event, long sequence, boolean endOfBatch) throws Exception &#123;</div><div class="line">        System.out.println(&quot;event:&quot;+event.getValue()+&quot;,sequence:&quot; + sequence);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息生产者</div><div class="line"> */</div><div class="line">public class LongEventProducer &#123;</div><div class="line">    private final RingBuffer&lt;LongEvent&gt; ringBuffer;</div><div class="line"></div><div class="line">    public LongEventProducer(RingBuffer&lt;LongEvent&gt; ringBuffer) &#123;</div><div class="line">        this.ringBuffer = ringBuffer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 原生发布数据</div><div class="line">    public void onData(ByteBuffer buffer)&#123;</div><div class="line">        long sequence = ringBuffer.next();</div><div class="line">        LongEvent longEvent = ringBuffer.get(sequence);</div><div class="line">        longEvent.setValue(buffer.getLong(0));</div><div class="line">        // 向环上设置数据</div><div class="line">        ringBuffer.publish(sequence);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 使用 lambda 发布数据(一个参数)</div><div class="line">    public void onData2(ByteBuffer buffer) &#123;</div><div class="line">        ringBuffer.publishEvent(((event, sequence, arg0) -&gt; event.setValue(arg0.getLong(0))),</div><div class="line">                buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 使用 lambda 发布数据(两个参数)</div><div class="line">    public void onData3(ByteBuffer buffer) &#123;</div><div class="line">        ringBuffer.publishEvent(((event, sequence, arg0, arg1) -&gt; event.setValue(arg0 + arg1)),</div><div class="line">                buffer.getLong(0), buffer.getLong(0));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 主函数</div><div class="line"> */</div><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 事件工厂</div><div class="line">        LongEventFactory longEventFactory = new LongEventFactory();</div><div class="line"></div><div class="line">        // 队列大小，必须是 2 的整数次幂</div><div class="line">        int ringBufferSize = 1024;</div><div class="line"></div><div class="line">        // 获取 disruptor</div><div class="line">        Disruptor&lt;LongEvent&gt; disruptor = new Disruptor&lt;&gt;(longEventFactory, ringBufferSize, Executors.defaultThreadFactory());</div><div class="line"></div><div class="line">        // 设置消费者</div><div class="line">        disruptor.handleEventsWith(new LongEventHandler());</div><div class="line"></div><div class="line">        // 启动 disruptor</div><div class="line">        disruptor.start();</div><div class="line"></div><div class="line">        // 构造生产者，并生产数据</div><div class="line">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</div><div class="line">        LongEventProducer producer = new LongEventProducer(ringBuffer);</div><div class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(8);</div><div class="line">        for (long i = 0; i &lt; 100; i++) &#123;</div><div class="line">            byteBuffer.putLong(0, i);</div><div class="line">//            producer.onData(byteBuffer);</div><div class="line">//            producer.onData2(byteBuffer);</div><div class="line">            producer.onData3(byteBuffer);</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(100);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 关闭 disruptor</div><div class="line">        disruptor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-4-生产者类型-ProducerType"><a href="#2-4-生产者类型-ProducerType" class="headerlink" title="2.4 生产者类型 ProducerType"></a>2.4 生产者类型 ProducerType</h3><ul><li>ProducerType.SINGLE：对 sequence 的操作不加锁，效率更高。但是得保证只有一个生产者。</li><li>ProducerType.MUTI：对 sequence 的操作要加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;&gt;(LongEvent::<span class="keyword">new</span>, ringBufferSize,</div><div class="line">    DaemonThreadFactory.INSTANCE, ProducerType.MULTI, <span class="keyword">new</span> BlockingWaitStrategy());</div></pre></td></tr></table></figure><h3 id="2-5-生产者等待策略-WaitStrategy"><a href="#2-5-生产者等待策略-WaitStrategy" class="headerlink" title="2.5 生产者等待策略 WaitStrategy"></a>2.5 生产者等待策略 WaitStrategy</h3><p>1，(常用）BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</p><p>2，BusySpinWaitStrategy：线程一直自旋等待，可能比较耗cpu</p><p>3，LiteBlockingWaitStrategy：线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在signalNeeded.getAndSet,如果两个线程同时访问一个访问waitfor,一个访问signalAll时，可以减少lock加锁次数.</p><p>4，LiteTimeoutBlockingWaitStrategy：与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛异常。</p><p>5，PhasedBackoffWaitStrategy：根据时间参数和传入的等待策略来决定使用哪种等待策略</p><p>6，TimeoutBlockingWaitStrategy：相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛异常</p><p>7，（常用）YieldingWaitStrategy：尝试100次，然后Thread.yield()让出cpu</p><p>8，（常用）SleepingWaitStrategy : sleep</p><h3 id="2-6-多消费者"><a href="#2-6-多消费者" class="headerlink" title="2.6 多消费者"></a>2.6 多消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置消费者(多个)</span></div><div class="line">disruptor.handleEventsWith(<span class="keyword">new</span> LongEventHandler(), <span class="keyword">new</span> LongEventHandler());</div></pre></td></tr></table></figure><h3 id="2-7-消费者异常处理"><a href="#2-7-消费者异常处理" class="headerlink" title="2.7 消费者异常处理"></a>2.7 消费者异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置消费者</span></div><div class="line">EventHandler h = (event, sequence, endOfBatch) -&gt; &#123;</div><div class="line">    System.out.println(event);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"消费者出现异常"</span>);</div><div class="line">&#125;;</div><div class="line">disruptor.handleEventsWith(h);</div><div class="line"></div><div class="line"><span class="comment">// 设置消费者异常处理</span></div><div class="line">disruptor.handleExceptionsFor(h).with(<span class="keyword">new</span> ExceptionHandler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEventException</span><span class="params">(Throwable ex, <span class="keyword">long</span> sequence, Object event)</span> </span>&#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnStartException</span><span class="params">(Throwable ex)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"启动时出现异常"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnShutdownException</span><span class="params">(Throwable ex)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"关闭时出现异常"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>默认：disruptor.setDefaultExceptionHandler()</p><p>覆盖：disruptor.handleExceptionFor().with()</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JMH 基本使用；Disruptor 入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(六)</title>
    <link href="http://yoursite.com/2020-04-06-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(6).html"/>
    <id>http://yoursite.com/2020-04-06-多线程与高并发/多线程高并发学习(6).html</id>
    <published>2020-04-06T14:13:12.000Z</published>
    <updated>2020-04-06T13:29:16.524Z</updated>
    
    <content type="html"><![CDATA[<p>线程池。ThreadPoolExecutor、ForkJoinPool、ThreadPoolExecutor 源码解读</p><a id="more"></a><h2 id="1-线程池相关接口认识"><a href="#1-线程池相关接口认识" class="headerlink" title="1. 线程池相关接口认识"></a>1. 线程池相关接口认识</h2><ul><li>Callable：和 Runnable 类似，但是可以有返回值和抛出异常。但是不能直接作为 Thread 的 target</li><li>Future：Callable 的返回结果</li><li>FutureTask：Runnable+Future</li><li>Executor：线程执行接口，将线程定义和执行分开</li><li>ExecutorService：在 Executor 基础上增加一些线程控制方法。</li><li>CompletableFuture：可以同时管理多个 Future，支持流式操作</li></ul><h2 id="2-线程池之-ThreadPoolExecutor"><a href="#2-线程池之-ThreadPoolExecutor" class="headerlink" title="2. 线程池之 ThreadPoolExecutor"></a>2. 线程池之 ThreadPoolExecutor</h2><p>ThreadPoolExecutor 中有一个线程队列，一个任务队列。</p><h3 id="2-1-自定义线程池"><a href="#2-1-自定义线程池" class="headerlink" title="2.1 自定义线程池"></a>2.1 自定义线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>,</div><div class="line">   <span class="number">20</span>, TimeUnit.SECONDS,</div><div class="line">   <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">4</span>),  <span class="comment">// 队列大小</span></div><div class="line">   Executors.defaultThreadFactory(), <span class="comment">// 线程工厂</span></div><div class="line">   <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class="comment">// 拒绝策略</span></div></pre></td></tr></table></figure><p>七个参数：</p><ol><li>corePoolSize：核心线程数。创建后不会释放</li><li>maxmumPoolSize：最大线程数。</li><li>keepAliveTime：线程没有工作时存活时间</li><li>timeunit：时间单位</li><li>workQueue：阻塞队列，队列大小</li><li>threadFactory：线程工厂</li><li>handler：拒绝策略。CallerRuns(调用者执行)、Discard(丢弃)、DiscardOldest(丢弃最早的)、Abort(报错)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_ThreadPool</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        Task(<span class="keyword">int</span> i)&#123;</div><div class="line">            <span class="keyword">this</span>.i = i;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" ==&gt; "</span> + i);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.in.read();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"task["</span>+i+<span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>,</div><div class="line">                <span class="number">20</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">4</span>),  <span class="comment">// 队列大小</span></div><div class="line">                Executors.defaultThreadFactory(), <span class="comment">// 线程工厂</span></div><div class="line">                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class="comment">// 拒绝策略</span></div><div class="line"></div><div class="line">        <span class="comment">// 启动八个线程</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">            pool.execute(<span class="keyword">new</span> Task(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// pool.submit() // submit 和 execute 有啥区别？</span></div><div class="line">        System.out.println(<span class="string">"队列："</span>+pool.getQueue());</div><div class="line">        <span class="comment">// 再加任务就会执行拒绝策略，应为定义的线程池最多只能8个任务</span></div><div class="line">        pool.execute(<span class="keyword">new</span> Task(<span class="number">100</span>));</div><div class="line">        System.out.println(<span class="string">"队列："</span>+pool.getQueue());</div><div class="line"></div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-Executors-提供-ThreadPoolExecutor"><a href="#2-2-Executors-提供-ThreadPoolExecutor" class="headerlink" title="2.2 Executors 提供 ThreadPoolExecutor"></a>2.2 Executors 提供 ThreadPoolExecutor</h3><h4 id="2-2-1-FixedThreadPool"><a href="#2-2-1-FixedThreadPool" class="headerlink" title="2.2.1 FixedThreadPool"></a>2.2.1 FixedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_FixedThreadPoll</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">            executorService.execute(()-&gt;&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">500</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(Thread.currentThread().getName());</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        System.out.println(executorService);</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">        System.out.println(executorService.isShutdown());</div><div class="line">        System.out.println(executorService.isTerminated());</div><div class="line"></div><div class="line">        Thread.sleep(<span class="number">5000</span>);</div><div class="line"></div><div class="line">        System.out.println(executorService.isShutdown());</div><div class="line">        System.out.println(executorService.isTerminated());</div><div class="line">        System.out.println(executorService);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际上就是 ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line"></div><div class="line"><span class="comment">// task 队列大小</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 拒绝策略</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler = <span class="keyword">new</span> AbortPolicy();</div></pre></td></tr></table></figure><h4 id="2-2-2-SingleThreadExecutor"><a href="#2-2-2-SingleThreadExecutor" class="headerlink" title="2.2.2 SingleThreadExecutor"></a>2.2.2 SingleThreadExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_SingleThreadPool</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> j = i;</div><div class="line">            executorService.execute(()-&gt;&#123;</div><div class="line">                System.out.println(j + Thread.currentThread().getName());</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际上就是 ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">  (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div></pre></td></tr></table></figure><p>只有一个线程的线程池，可以保证任务顺序执行。</p><h4 id="2-2-3-CachedThreadPool"><a href="#2-2-3-CachedThreadPool" class="headerlink" title="2.2.3 CachedThreadPool"></a>2.2.3 CachedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">   <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">   <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div></pre></td></tr></table></figure><h4 id="2-2-4-ScheduledThreadPool"><a href="#2-2-4-ScheduledThreadPool" class="headerlink" title="2.2.4 ScheduledThreadPool"></a>2.2.4 ScheduledThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_ScheduledThreadPool</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ScheduledExecutorService es = Executors.newScheduledThreadPool(<span class="number">5</span>);</div><div class="line">        es.scheduleAtFixedRate(()-&gt;&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName());</div><div class="line">        &#125;, <span class="number">500</span>, <span class="number">2000</span>, TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</div><div class="line">      DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</div><div class="line">      <span class="keyword">new</span> DelayedWorkQueue());</div></pre></td></tr></table></figure><h2 id="3-线程池之-ForkJoinPool"><a href="#3-线程池之-ForkJoinPool" class="headerlink" title="3. 线程池之 ForkJoinPool"></a>3. 线程池之 ForkJoinPool</h2><p>ForkJoinPool 中，可以对任务进行拆分和合并。</p><p>ThreadPoolExecutor: 一个一个线程从队列中取任务。无法拆分任务，也就没法把大任务分解给其他线程处理。</p><p>WorkStealing: 线程池中每一个线程都维护着自己的任务队列。如果某个线程任务执行完了，可以从其他线程拿一个过来执行，本质上是 ForkJoinPool</p><p>ForkJoinPool 例子参考 Java 讲义。</p><h2 id="4-ThreadPoolExecutor-源码解析"><a href="#4-ThreadPoolExecutor-源码解析" class="headerlink" title="4. ThreadPoolExecutor 源码解析"></a>4. ThreadPoolExecutor 源码解析</h2><p>addWorker：添加线程</p><ol><li>肯定有容器装线程。</li><li>涉及到多线程，肯定要做同步</li><li>考虑到性能问题，肯定不会直接使用 synchronized。他要么用 lock 要么用 cas（自旋）</li><li>count++ 线程数加一</li><li>addworker 增加worker</li><li>start work 启动worker</li></ol><p>Worker类：<br>  实现：Runnable 线程任务<br>  继承：AQS，因为有多个现象抢这个 worker，所以本身作为锁<br>  成员变量：thread 当前在处理哪个线程</p><p>execute方法：</p><ol><li>判断是否可以启动核心线程</li><li>判断是否可以加入队列</li><li>判断是否可以启动非核心线程</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程池。ThreadPoolExecutor、ForkJoinPool、ThreadPoolExecutor 源码解读&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(五)</title>
    <link href="http://yoursite.com/2020-04-05-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(5).html"/>
    <id>http://yoursite.com/2020-04-05-多线程与高并发/多线程高并发学习(5).html</id>
    <published>2020-04-05T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:11.075Z</updated>
    
    <content type="html"><![CDATA[<p>同步容器的学习（Set、List、Map）。</p><a id="more"></a><h2 id="1-From-HashTable-to-ConcurrrentHashMap"><a href="#1-From-HashTable-to-ConcurrrentHashMap" class="headerlink" title="1. From HashTable to ConcurrrentHashMap"></a>1. From HashTable to ConcurrrentHashMap</h2><ol><li>HashTable:早期使用 synchronized 实现，所有方法同步</li><li>HashMap:所有方法没有同步，线程不安全</li><li>SynchronizedHashMap:使用 synchronized 实现，但是锁的粒度更小一点</li><li>ConcurrentHashMap:使用 CAS 实现，专为高并发设计，<br>高并发 put 效率较低（因为要维护其他信息），但是高并发 get 效率极高，适合读多写少场景</li></ol><h3 id="1-1-HashTable、SynchronizedHashMap-不足"><a href="#1-1-HashTable、SynchronizedHashMap-不足" class="headerlink" title="1.1 HashTable、SynchronizedHashMap 不足"></a>1.1 HashTable、SynchronizedHashMap 不足</h3><ul><li>可伸缩性是一种障碍，因为一次只能有一个线程可以访问hash表。</li><li>这样仍不足以提供真正的线程安全性，许多公用的混合操作仍然需要额外的同步。例如判断集合不为空则删除一个元素，多线程同时处理最后一个元素时就有问题<ul><li>锁住整个集合</li><li>在遍历时也可以调用 List.toArray() ，在不同步的情况下对数组进行迭代，避免抛出  ConcurrentModificationException  异常，但如果容器数据较大的话，代价比较大</li></ul></li></ul><h3 id="1-2-HashTable、HashMap-区别"><a href="#1-2-HashTable、HashMap-区别" class="headerlink" title="1.2 HashTable、HashMap 区别"></a>1.2 HashTable、HashMap 区别</h3><ul><li>均实现 Map 接口， 但是Hashtable的实现是基于Dictionary抽象类。</li><li><p>HashMap 中 null 可以作为 key 和 value，所以判断 key 是否存在需要用 contiansKey ;HashTable 中 null 既不能作为 key 也不能作为 value</p></li><li><p>HashMap 不是线程安全的，在多线程环境中需要手动实现同步机制；HashTable 单个操作是线程安全的，可直接用于多线程环境，但是混合操作不一定线程安全，比如：<code>if(shm.containsKey(&#39;key&#39;)) shm.remove</code></p></li></ul><h3 id="1-3-ConcurrentHashMap"><a href="#1-3-ConcurrentHashMap" class="headerlink" title="1.3 ConcurrentHashMap"></a>1.3 ConcurrentHashMap</h3><p> ConcurrentHashMap 提供了和 Hashtable 以及 SynchronizedMap 中所不同的锁机制。Hashtable 中采用的锁机制是一次锁住整个 hash 表，从而同一时刻只能由一个线程对其进行操作；而 ConcurrentHashMap 中则是一次锁住一个桶。<br>ConcurrentHashMap 默认将 hash 表分为 16 个桶，诸如 get,put,remove 等常用操作只锁当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有 16 个写线程执行，并发性能的提升是显而易见的。</p><p>上面说到的 16 个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在 size 等操作时才需要锁住整个 hash 表。 </p><p>在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。<br>在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，<br>取而代之的是  在改变时new新的数据从而不影响原有的数据 。<br>iterator完成后再将头指针替换为新的数据 。<br>这样iterator线程可以使用原来老的数据。<br>而写线程也可以并发的完成改变。</p><h3 id="1-4-ConcurrentSkipListMap"><a href="#1-4-ConcurrentSkipListMap" class="headerlink" title="1.4 ConcurrentSkipListMap"></a>1.4 ConcurrentSkipListMap</h3><p>没有 ConcurrentTreeMap，因为 TreeMap 实现使用的是红黑树，但是使用红黑树来实现 CAS 比较复杂，所以提供了 ConcurrentSkipListMap 来代替 Tree 结构来做排序。</p><p>跳跃表数据结构。</p><h2 id="2-From-Vector-to-Queue"><a href="#2-From-Vector-to-Queue" class="headerlink" title="2. From Vector to Queue"></a>2. From Vector to Queue</h2><ol><li>Vector:早期使用 synchronized 实现，所有方法同步</li><li>ArrayList:所有方法没有同步，线程不安全</li><li>SynchronizedList:使用 synchronized 实现，但是锁的粒度更小一点</li><li>ConcurrentLinkedQueue:使用 CAS 实现，专为高并发设计</li></ol><h3 id="2-1-Queue-和-List-区别"><a href="#2-1-Queue-和-List-区别" class="headerlink" title="2.1 Queue 和 List 区别"></a>2.1 Queue 和 List 区别</h3><p>Queue 添加了一些对线程友好的 API，offer、pool、peek</p><p>BlockingQueue：put、take（阻塞）</p><h3 id="2-2-CopyOnWriteList"><a href="#2-2-CopyOnWriteList" class="headerlink" title="2.2 CopyOnWriteList"></a>2.2 CopyOnWriteList</h3><p>写时复制容器 copy on write。多线程环境下，写时效率低，读时效率高，适合写少读多的环境</p><h2 id="3-模拟十个窗口同时售票"><a href="#3-模拟十个窗口同时售票" class="headerlink" title="3. 模拟十个窗口同时售票"></a>3. 模拟十个窗口同时售票</h2><h3 id="3-1-ArrayList-线程不安全"><a href="#3-1-ArrayList-线程不安全" class="headerlink" title="3.1 ArrayList 线程不安全"></a>3.1 ArrayList 线程不安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller1</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> List&lt;String&gt; tickets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="comment">// ArrayList 线程不安全，会出现超卖现象</span></div><div class="line">                <span class="keyword">while</span> (tickets.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-2-Vector-单个原子操作线程安全"><a href="#3-2-Vector-单个原子操作线程安全" class="headerlink" title="3.2 Vector 单个原子操作线程安全"></a>3.2 Vector 单个原子操作线程安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller2</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Vector&lt;String&gt; tickets = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="comment">// Vector 线程安全，但是这里是两个原子操作，还是会出现超卖现象</span></div><div class="line">                <span class="keyword">while</span> (tickets.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-对容器加锁"><a href="#3-3-对容器加锁" class="headerlink" title="3.3 对容器加锁"></a>3.3 对容器加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller3</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> List&lt;String&gt; tickets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">synchronized</span> (tickets)&#123;</div><div class="line">                    <span class="comment">// ArrayList 线程不安全，会出现超卖现象</span></div><div class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                        <span class="keyword">if</span>(tickets.size()&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-使用-ConcurrentQueue-提高并发性"><a href="#3-4-使用-ConcurrentQueue-提高并发性" class="headerlink" title="3.4 使用 ConcurrentQueue 提高并发性"></a>3.4 使用 ConcurrentQueue 提高并发性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller4</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Queue&lt;String&gt; tickets = <span class="keyword">new</span> ConcurrentLinkedDeque&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    String t = tickets.poll();</div><div class="line">                    <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + t);</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>CAS 不一定比 synchronized 效率高，需要根据实际情况来考虑。</p><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><ul><li>Map： <a href="https://blog.csdn.net/itm_hadf/article/details/7506529" target="_blank" rel="external">https://blog.csdn.net/itm_hadf/article/details/7506529</a> </li><li><a href="https://blog.csdn.net/sunxianghuang/article/details/52221913" target="_blank" rel="external">https://blog.csdn.net/sunxianghuang/article/details/52221913</a> </li><li><a href="https://www.jianshu.com/p/1f19835e05c0" target="_blank" rel="external">https://www.jianshu.com/p/1f19835e05c0</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同步容器的学习（Set、List、Map）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(四)</title>
    <link href="http://yoursite.com/2020-04-04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(4).html"/>
    <id>http://yoursite.com/2020-04-04-多线程与高并发/多线程高并发学习(4).html</id>
    <published>2020-04-04T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:03.393Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal 的使用和理解、强软若虚引用理解。</p><a id="more"></a><h2 id="1-ThreadLocal"><a href="#1-ThreadLocal" class="headerlink" title="1. ThreadLocal"></a>1. ThreadLocal</h2><p>应用：Spring 声明式事务。Spring 声明式事务在<strong>一个线程</strong>多个方法内，需要保证多个方法一个事务，所以需要多个方法去拿 connection 时，取的是一个连接，如果直接去连接池取很可能这几个方法每个方法取的不是一个 connection，可以把 connection 放入 ThreadLocal 中，从而实现该功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ThreadLocal1</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> Person p = <span class="keyword">new</span> Person();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(p.name);</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            p.name = <span class="string">"lisi"</span>;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    String name = <span class="string">"zhangsan"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ThreadLocal2</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(tl.get());</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            tl.set(<span class="keyword">new</span> Person());</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-强引用"><a href="#2-强引用" class="headerlink" title="2. 强引用"></a>2. 强引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_NormalReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        M m = <span class="keyword">new</span> M();</div><div class="line">        <span class="comment">// 对象没有被引用时会被回收</span></div><div class="line">        m = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        System.in.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">M</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// M 对象被回收时，会执行该方法</span></div><div class="line">        System.out.println(<span class="string">"finalize..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-软引用"><a href="#3-软引用" class="headerlink" title="3. 软引用"></a>3. 软引用</h2><p>内存不足时，会被回收，主要用于<strong>缓存</strong>。</p><p><code>-Xms20m -Xmx20m</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_SoftReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; s = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>]);</div><div class="line">        System.out.println(s.get());</div><div class="line">        System.gc();</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        System.out.println(s.get());</div><div class="line"></div><div class="line">        <span class="comment">// 软引用，堆内存不足时，会回收</span></div><div class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">15</span>];</div><div class="line">        System.out.println(s.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-弱引用"><a href="#4-弱引用" class="headerlink" title="4. 弱引用"></a>4. 弱引用</h2><p>只要执行 gc 弱引用就会被回收，一般用于容器。比如 WeakHashMap、ThreadLocal。</p><p>比如，只要强引用消失，该对象就只有弱引用，就会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_WeakReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        WeakReference&lt;M&gt; m = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> M());</div><div class="line">        System.out.println(m.get());</div><div class="line">        <span class="comment">// 只要执行gc，弱引用就会被回收</span></div><div class="line">        System.gc();</div><div class="line">        System.out.println(m.get());</div><div class="line"></div><div class="line">        ThreadLocal&lt;M&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line">        <span class="comment">// 设置到了当前线程的map中，所以其他线程读不到。</span></div><div class="line">        tl.set(<span class="keyword">new</span> M());</div><div class="line">        <span class="comment">// 即使 ThreadLocal 中 Entry 是弱引用，还是会有内存泄漏的问题，用完务必记得 remove</span></div><div class="line">        tl.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Thread 中有一个成员变量，<code>ThreadLocal.ThreadLocalMap threadLocals = null;</code></p><p><code>tl.set(new M());</code>实际上是把 M 对象设置到了当前线程的 threadLocals map 中。所以一个线程读取不到另外一个线程设置的值。</p><p><img src="../../images/juc/ThreadLocal.png" alt=""></p><p>为什么 Entry 要使用弱引用？</p><p>若是强引用，即使 t1=null（t1 为局部变量，方法结束就消失），但 key 的引用依然指向 ThreadLocal 对象，因为很多线程是长期存在的（threadLocals 长期存在），所以会存在内存泄漏，即 ThreadLocal 对象长期存在得不到回收，而使用弱引用则不会。</p><p>即使使用了若引用，但还是会有内存泄漏存在，ThreadLocal 被回收，key 的值变为 null，则导致整个 value 再也无法被访问到，因此依然存在内存泄漏。所以 t1 用完后务必手动 remove 掉。</p><h2 id="5-虚引用"><a href="#5-虚引用" class="headerlink" title="5. 虚引用"></a>5. 虚引用</h2><p>无法访问到虚引用中的值，一般用于 JVM 中控制<strong>堆外内存</strong>的回收。对象被回收时，会往指定队列插入一个数据，可以通过监控该队列来手动回收堆外内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_PhantomReference</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Object&gt; LIST= <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;M&gt; QUEUE = <span class="keyword">new</span> ReferenceQueue();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        PhantomReference&lt;M&gt; r = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> M(), QUEUE);</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                LIST.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    Thread.currentThread().interrupt();</div><div class="line">                &#125;</div><div class="line">                System.out.println(r.get());</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                Reference&lt;? extends M&gt; poll = QUEUE.poll();</div><div class="line">                <span class="keyword">if</span>(poll != <span class="keyword">null</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"====虚引用对象被 JVM 回收了===="</span>+poll);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">5000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal 的使用和理解、强软若虚引用理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(三)</title>
    <link href="http://yoursite.com/2020-04-03-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(3).html"/>
    <id>http://yoursite.com/2020-04-03-多线程与高并发/多线程高并发学习(3).html</id>
    <published>2020-04-03T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:57.835Z</updated>
    
    <content type="html"><![CDATA[<p>两道面试题；AQS 源码阅读。</p><a id="more"></a><h2 id="1-面试题1-实现同步容器"><a href="#1-面试题1-实现同步容器" class="headerlink" title="1. 面试题1 - 实现同步容器"></a>1. 面试题1 - 实现同步容器</h2><p>实现一个容器，提供两个方法，add，size，写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束</p><h3 id="1-1-volatile、synchronizedList-实现（不可行）"><a href="#1-1-volatile、synchronizedList-实现（不可行）" class="headerlink" title="1.1 volatile、synchronizedList 实现（不可行）"></a>1.1 volatile、synchronizedList 实现（不可行）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview1</span> </span>&#123;</div><div class="line">    <span class="comment">// volatile 保证线程可见。其实这里有问题，volatile 修饰的是引用，应该是检测不到</span></div><div class="line">    <span class="comment">// synchronizedList 构建线程安全的 list</span></div><div class="line">    <span class="keyword">volatile</span> List&lt;Object&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        <span class="comment">// 当元素加进去之后，还没来得及 size++，其他线程来读取了。导致读取到的 size 和实际元素不一致</span></div><div class="line">        <span class="comment">// 所以 list 需要修改为线程安全的 list</span></div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_Interview1 t = <span class="keyword">new</span> T01_Interview1();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="comment">// 有时候不准，是因为没有抢占到cpu资源？</span></div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-2-synchronized、wait、notify-实现"><a href="#1-2-synchronized、wait、notify-实现" class="headerlink" title="1.2 synchronized、wait、notify 实现"></a>1.2 synchronized、wait、notify 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview2</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview2 t = <span class="keyword">new</span> T01_Interview2();</div><div class="line">        <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock)&#123;</div><div class="line">                System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                    t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                    <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                        <span class="comment">// notify 不会释放锁</span></div><div class="line">                        lock.notify();</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            <span class="comment">// 释放锁，让 t2 得以执行</span></div><div class="line">                            lock.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">                    lock.wait();</div><div class="line">                    System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                    lock.notify();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t2.start();</div><div class="line">        <span class="comment">// 必须保证 t2 先执行。因为必须先 wait 再 notify，否则 wait 将继续阻塞</span></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</div><div class="line">        t1.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-3-CountDownLatch-实现"><a href="#1-3-CountDownLatch-实现" class="headerlink" title="1.3 CountDownLatch 实现"></a>1.3 CountDownLatch 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview3</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview3 t = <span class="keyword">new</span> T01_Interview3();</div><div class="line">        CountDownLatch ct = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        CountDownLatch ct1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ct.countDown();</div><div class="line">                        ct1.await();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">                ct.await();</div><div class="line">                System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                ct1.countDown();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-4-LockSupport-join实现"><a href="#1-4-LockSupport-join实现" class="headerlink" title="1.4 LockSupport +join实现"></a>1.4 LockSupport +join实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview4</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview4 t = <span class="keyword">new</span> T01_Interview4();</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 可以先 unpark 再 park，但是必须 unpark 时 t2 已经启动</span></div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"start park"</span>);</div><div class="line">            LockSupport.park();</div><div class="line">            System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.unpark(t2);</div><div class="line">                    System.out.println(<span class="string">"unpark finish..."</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">// 这里也可以和 CountDownLunch 类似，用两套</span></div><div class="line">                        t2.join();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-5-双重-LockSupport"><a href="#1-5-双重-LockSupport" class="headerlink" title="1.5 双重 LockSupport"></a>1.5 双重 LockSupport</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview5</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">static</span> Thread t2 = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview5 t = <span class="keyword">new</span> T01_Interview5();</div><div class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.unpark(t2);</div><div class="line">                    LockSupport.park();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            LockSupport.park();</div><div class="line">            System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">            LockSupport.unpark(t1);</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        <span class="comment">// 有问题。LockSupport unpark 时必须要线程已经 start</span></div><div class="line">        <span class="comment">// TimeUnit.SECONDS.sleep(1);</span></div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-面试题2-实现同步容器2"><a href="#2-面试题2-实现同步容器2" class="headerlink" title="2. 面试题2 - 实现同步容器2"></a>2. 面试题2 - 实现同步容器2</h2><p>面试题：写一个固定容量同步容器，拥有put和get方法，以及getCount方法，能够支持2个生产者线程以及10个消费者线程的阻塞调用。</p><h3 id="2-1-synchronized、wait-和-notifyAll-实现"><a href="#2-1-synchronized、wait-和-notifyAll-实现" class="headerlink" title="2.1 synchronized、wait 和 notifyAll 实现"></a>2.1 synchronized、wait 和 notifyAll 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Interview1</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(getCount() == MAX)&#123;</div><div class="line">            System.out.println(<span class="string">"list is full....wait"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.wait();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        lists.add(t);</div><div class="line">        count++;</div><div class="line">        <span class="comment">// 通知消费者消费</span></div><div class="line">        <span class="keyword">this</span>.notifyAll();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 这里应该用 while 而不是 if。因为都是 notifyAll，只生产两个数据，但是唤醒了 10 个线程</span></div><div class="line">        <span class="comment">// 所以每个线程唤醒后，需要重新判断 count 是不是 0</span></div><div class="line">        <span class="keyword">while</span>(getCount() == <span class="number">0</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"list is empty....wait"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.wait();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        T t = lists.removeFirst();</div><div class="line">        count--;</div><div class="line">        <span class="comment">// 通知生产者生产</span></div><div class="line">        <span class="keyword">this</span>.notifyAll();</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T02_Interview1&lt;String&gt; t = <span class="keyword">new</span> T02_Interview1&lt;&gt;();</div><div class="line">        <span class="comment">// 消费</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" consumer： "</span> + t.get());</div><div class="line">            &#125;,<span class="string">"c"</span>+i).start();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 生产</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                t.put(Thread.currentThread().getName()+ <span class="string">" data"</span>);</div><div class="line">            &#125;, <span class="string">"p"</span>+i).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-ReentrantLock、Condition-实现"><a href="#2-2-ReentrantLock、Condition-实现" class="headerlink" title="2.2 ReentrantLock、Condition 实现"></a>2.2 ReentrantLock、Condition 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Interview2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> Condition producer = lock.newCondition();</div><div class="line">    <span class="keyword">private</span> Condition consumer = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">while</span>(getCount() == MAX)&#123;</div><div class="line">                producer.await();</div><div class="line">                System.out.println(<span class="string">"list is full....wait"</span>);</div><div class="line">            &#125;</div><div class="line">            lists.add(t);</div><div class="line">            count++;</div><div class="line">            consumer.signalAll();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        T t = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="comment">// 这里应该用 while 而不是 if。因为都是 notifyAll，只生产两个数据，但是唤醒了 10 个线程</span></div><div class="line">            <span class="comment">// 所以每个线程唤醒后，需要重新判断 count 是不是 0</span></div><div class="line">            <span class="keyword">while</span>(getCount() == <span class="number">0</span>)&#123;</div><div class="line">                consumer.await();</div><div class="line">                System.out.println(<span class="string">"list is empty....wait"</span>);</div><div class="line">            &#125;</div><div class="line">            t = lists.removeFirst();</div><div class="line">            count--;</div><div class="line">            producer.signalAll();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-AQS-源码阅读"><a href="#3-AQS-源码阅读" class="headerlink" title="3. AQS 源码阅读"></a>3. AQS 源码阅读</h2><h3 id="3-1-读源码原则"><a href="#3-1-读源码原则" class="headerlink" title="3.1 读源码原则"></a>3.1 读源码原则</h3><ul><li>跑不起来不读</li><li>解决问题就好-目的性</li><li>一条线索到底</li><li>无关细节略过</li><li>一般不读静态</li><li>一般动态读法</li><li>尽量理解别人的思路</li></ul><h3 id="3-2-AQS-源码阅读"><a href="#3-2-AQS-源码阅读" class="headerlink" title="3.2 AQS 源码阅读"></a>3.2 AQS 源码阅读</h3><h4 id="3-2-1-方法调用图"><a href="#3-2-1-方法调用图" class="headerlink" title="3.2.1 方法调用图"></a>3.2.1 方法调用图</h4><p><img src="../../images/juc/AQS源码阅读1.png" alt=""></p><h4 id="3-2-2-类关系图"><a href="#3-2-2-类关系图" class="headerlink" title="3.2.2 类关系图"></a>3.2.2 类关系图</h4><p><img src="../../images/juc/AQS源码阅读2.png" alt=""></p><h4 id="3-2-3-数据结构"><a href="#3-2-3-数据结构" class="headerlink" title="3.2.3 数据结构"></a>3.2.3 数据结构</h4><p><img src="../../images/juc/AQS源码阅读3.png" alt=""></p><h3 id="3-2-4-理解"><a href="#3-2-4-理解" class="headerlink" title="3.2.4 理解"></a>3.2.4 理解</h3><ol><li>AQS 核心就是用 CAS 操作代替 sync 锁定整条链表的操作。</li><li>入队时，需要查看该节点的前置节点是否是 head，如果是则尝试获取锁，否则 park，所以是双向链表。</li></ol><h3 id="3-3-VarHandle"><a href="#3-3-VarHandle" class="headerlink" title="3.3 VarHandle"></a>3.3 VarHandle</h3><p>指向某个变量的引用。<code>x=x+10;</code>不是原子性的，如果要做到线程安全，需要加锁，但是如果使用 VarHandle 可以不加锁来实现原子操作。所以，VarHandle 可以实现普通属性也可以进行原子操作。</p><p>VarHandle 使用 c、c++ 语言调用 cpu 原语实现。它比<strong>反射</strong>的效率更高，反射每次都需要检查；VarHandle 可以理解为直接操作二进制码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_VarHandle</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">8</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> VarHandle handle;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// x 可以操作 8，handle 也可以</span></div><div class="line">            handle = MethodHandles.lookup().findVarHandle(T03_VarHandle.class, <span class="string">"x"</span>, <span class="keyword">int</span>.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T03_VarHandle t = <span class="keyword">new</span> T03_VarHandle();</div><div class="line">        <span class="comment">// 获取和设置</span></div><div class="line">        System.out.println(handle.get(t));</div><div class="line">        handle.set(t,<span class="number">9</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">        <span class="comment">// cas操作</span></div><div class="line">        handle.compareAndSet(t, <span class="number">9</span>, <span class="number">10</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">        <span class="comment">// cas操作</span></div><div class="line">        handle.getAndAdd(t, <span class="number">10</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两道面试题；AQS 源码阅读。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(二)</title>
    <link href="http://yoursite.com/2020-04-02-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(2).html"/>
    <id>http://yoursite.com/2020-04-02-多线程与高并发/多线程高并发学习(2).html</id>
    <published>2020-04-02T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:49.299Z</updated>
    
    <content type="html"><![CDATA[<p>可重入锁；CountDownLatch；CyclicBarrier；Phaser；ReadWriteLock；Semaphore；Exchanger；LockSupport 的理解和基本使用。</p><a id="more"></a><h2 id="1-可重入锁（ReentrantLock）"><a href="#1-可重入锁（ReentrantLock）" class="headerlink" title="1. 可重入锁（ReentrantLock）"></a>1. 可重入锁（ReentrantLock）</h2><p>同一个线程去申请锁时，发现该锁本身就是自己所有，直接执行。synchronized 是可重入的。</p><h3 id="1-1-ReentrantLock-之-lock"><a href="#1-1-ReentrantLock-之-lock" class="headerlink" title="1.1 ReentrantLock 之 lock()"></a>1.1 ReentrantLock 之 lock()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * ReentrantLock 代替 synchronized</span></div><div class="line"><span class="comment"> * 由于m1锁定this,只有m1执行完毕的时候,m2才能执行</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock1</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(i);</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(<span class="string">"m2 ......"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock1 t = <span class="keyword">new</span> T01_ReentrantLock1();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m2).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-2-ReentrantLock-之-tryLock"><a href="#1-2-ReentrantLock-之-tryLock" class="headerlink" title="1.2 ReentrantLock 之 tryLock()"></a>1.2 ReentrantLock 之 tryLock()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用tryLock进行尝试锁定，不管锁定与否，方法都将继续执行</span></div><div class="line"><span class="comment">     * 可以根据tryLock的返回值来判定是否锁定</span></div><div class="line"><span class="comment">     * 也可以指定tryLock的时间，由于tryLock(time)抛出异常，所以要注意unclock的处理，必须放到finally中</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">boolean</span> hasLock = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 连续5秒，尝试去获取锁</span></div><div class="line">        hasLock = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS);</div><div class="line">        System.out.println(<span class="string">"m2 ......"</span> + hasLock);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span>(hasLock) lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-3-ReentrantLock-之-lockInterruptibly"><a href="#1-3-ReentrantLock-之-lockInterruptibly" class="headerlink" title="1.3 ReentrantLock 之  lockInterruptibly()"></a>1.3 ReentrantLock 之  lockInterruptibly()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  使用ReentrantLock还可以调用lockInterruptibly方法，可以对线程interrupt方法做出响应，</span></div><div class="line"><span class="comment"> *  在一个线程等待锁的过程中，可以被打断</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock3</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(<span class="string">"m1 start"</span>);</div><div class="line">            TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</div><div class="line">            System.out.println(<span class="string">"m1 end"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"m1 interrputed"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">             <span class="comment">// lock.lock();</span></div><div class="line">            lock.lockInterruptibly(); <span class="comment">// 在获取锁的过程中可以对interrupt()方法做出响应</span></div><div class="line">            System.out.println(<span class="string">"m2 start"</span>);</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</div><div class="line">            System.out.println(<span class="string">"m2 end"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"m2 interrputed"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock3 t = <span class="keyword">new</span> T01_ReentrantLock3();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(t::m1);</div><div class="line">        t1.start();</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(t::m2);</div><div class="line">        t2.start();</div><div class="line">        t2.interrupt();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-4-公平锁"><a href="#1-4-公平锁" class="headerlink" title="1.4 公平锁"></a>1.4 公平锁</h3><p>新线程来了，先检查队列是否有线程等待，如果有队列中线程先来，如果没有直接枪锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock4</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 获得锁"</span>);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock4 t = <span class="keyword">new</span> T01_ReentrantLock4();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1, <span class="string">"t1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1, <span class="string">"t2"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-CountDownLatch"><a href="#2-CountDownLatch" class="headerlink" title="2. CountDownLatch"></a>2. CountDownLatch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_CountDownLatch</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        usingCountDownLatch();</div><div class="line">        usingJoin();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingCountDownLatch</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</div><div class="line">        CountDownLatch ct = <span class="keyword">new</span> CountDownLatch(threads.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) tmp++;</div><div class="line">                ct.countDown(); <span class="comment">// 减一</span></div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ct.await();</div><div class="line">            System.out.println(<span class="string">"Latch finished..."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingJoin</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) tmp++;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" finished"</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                threads[i].start();</div><div class="line">                threads[i].join();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Join finished..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-CyclicBarrier"><a href="#3-CyclicBarrier" class="headerlink" title="3. CyclicBarrier"></a>3. CyclicBarrier</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_CyclicBarrier</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 集齐20个线程后，执行Runnable代码</span></div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">20</span>, ()-&gt;System.out.println(<span class="string">"满人，发车。"</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    cyclicBarrier.await();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-Phaser"><a href="#4-Phaser" class="headerlink" title="4. Phaser"></a>4. Phaser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Phaser</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">static</span> MarriagePhaser phaser = <span class="keyword">new</span> MarriagePhaser();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        phaser.bulkRegister(<span class="number">7</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"p"</span> + i)).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"新郎"</span>)).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"新娘"</span>)).start();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarriagePhaser</span> <span class="keyword">extends</span> <span class="title">Phaser</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (phase)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人到齐了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人吃完了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人离开了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    System.out.println(<span class="string">"婚礼结束！新郎新娘抱抱！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arrive</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 到达现场！\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 吃完!\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leave</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 离开！\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(name.equals(<span class="string">"新郎"</span>) || name.equals(<span class="string">"新娘"</span>)) &#123;</div><div class="line">                milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">                System.out.printf(<span class="string">"%s 洞房！\n"</span>, name);</div><div class="line">                phaser.arriveAndAwaitAdvance();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 注销</span></div><div class="line">                phaser.arriveAndDeregister();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            arrive();</div><div class="line">            eat();</div><div class="line">            leave();</div><div class="line">            hug();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">milliSleep</span><span class="params">(<span class="keyword">int</span> milli)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(milli);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-ReadWriteLock"><a href="#5-ReadWriteLock" class="headerlink" title="5. ReadWriteLock"></a>5. ReadWriteLock</h2><p>共享锁（读锁）、排他锁（写锁）。读写比大的时候可以大大提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">static</span> Lock readLock = readWriteLock.readLock(); <span class="comment">// 读锁可以立即进入</span></div><div class="line">    <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(Lock lock)</span></span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            System.out.println(<span class="string">"read over"</span>+value);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Lock lock, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            value = v;</div><div class="line">            System.out.println(<span class="string">"write over"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T05_ReadWriteLock t = <span class="keyword">new</span> T05_ReadWriteLock();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"><span class="comment">//            new Thread(()-&gt;&#123;t.read(lock);&#125;).start();</span></div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;t.read(readLock);&#125;).start();</div><div class="line">            <span class="keyword">if</span>(i&gt;<span class="number">7</span>)&#123;</div><div class="line">                <span class="keyword">int</span> finalI = i;</div><div class="line"><span class="comment">//                new Thread(()-&gt;&#123;t.write(lock, finalI);&#125;).start();</span></div><div class="line">                <span class="keyword">new</span> Thread(()-&gt;&#123;t.write(writeLock, finalI);&#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-Semaphore（限流）"><a href="#6-Semaphore（限流）" class="headerlink" title="6. Semaphore（限流）"></a>6. Semaphore（限流）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_Semaphore</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 最多允许2个线程同时执行</span></div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                semaphore.acquire();</div><div class="line">                System.out.println(<span class="string">"T1 running"</span>);</div><div class="line">                Thread.sleep(<span class="number">200</span>);</div><div class="line">                System.out.println(<span class="string">"T1 end"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                semaphore.release();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                semaphore.acquire();</div><div class="line">                System.out.println(<span class="string">"T2 running"</span>);</div><div class="line">                Thread.sleep(<span class="number">200</span>);</div><div class="line">                System.out.println(<span class="string">"T2 end"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                semaphore.release();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="7-Exchanger"><a href="#7-Exchanger" class="headerlink" title="7. Exchanger"></a>7. Exchanger</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T7_Exchanger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            String s = <span class="string">"T1"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s=exchanger.exchange(s);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"T1："</span>+s);</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            String s = <span class="string">"T2"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s=exchanger.exchange(s);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"T2："</span>+s);</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="8-LockSupport"><a href="#8-LockSupport" class="headerlink" title="8. LockSupport"></a>8. LockSupport</h2><p>unpark 可以先于 park 调用。wait、await 一定基于锁。 LockSupport 不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T08_LockSupport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(i);</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.park();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t.start();</div><div class="line"></div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</div><div class="line">        System.out.println(<span class="string">"After 4 seconds..."</span>);</div><div class="line">        LockSupport.unpark(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可重入锁；CountDownLatch；CyclicBarrier；Phaser；ReadWriteLock；Semaphore；Exchanger；LockSupport 的理解和基本使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(一)</title>
    <link href="http://yoursite.com/2020-04-01-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(1).html"/>
    <id>http://yoursite.com/2020-04-01-多线程与高并发/多线程高并发学习(1).html</id>
    <published>2020-04-01T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:43.156Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal 的使用和理解、强软若虚引用理解。</p><p>线程基础：启动线程的四种方式；Sleep、Yield、Join；线程状态（五种）；synchronized；synchronized 底层实现；volatile；CAS 理解。</p><a id="more"></a><h2 id="1-什么是线程？"><a href="#1-什么是线程？" class="headerlink" title="1. 什么是线程？"></a>1. 什么是线程？</h2><p>参考 Java 讲义</p><h2 id="2-如何启动线程？"><a href="#2-如何启动线程？" class="headerlink" title="2. 如何启动线程？"></a>2. 如何启动线程？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建线程的方式</span></div><div class="line"><span class="comment"> * 1. 继承 Thread</span></div><div class="line"><span class="comment"> * 2. 实现 Runnable</span></div><div class="line"><span class="comment"> * 3. lambda(其实就是 Runnable)</span></div><div class="line"><span class="comment"> * 4. FutureTask</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_CreateThread</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo01(), <span class="string">"ThreadDemo01"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo02(), <span class="string">"ThreadDemo02"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"ThreadDemo03"</span>).start();</div><div class="line"></div><div class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">new</span> Thread(task, <span class="string">"ThreadDemo04"</span>).start();</div><div class="line">        System.out.println(<span class="string">"===============&gt;"</span>+task.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-Sleep、Yield、Join"><a href="#3-Sleep、Yield、Join" class="headerlink" title="3. Sleep、Yield、Join"></a>3. Sleep、Yield、Join</h2><ul><li>Sleep：睡眠</li><li>Yield：让出 cpu，回到就绪状态，有可能又立即回到该线程</li><li>Join：T1.join(T2)，等 T2 执行完再执行 T1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Sleep_Join_Yield</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        testJoin();</div><div class="line">        testYield();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testYield</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread yieldThread01 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>)&#123;</div><div class="line">                    Thread.yield();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"yieldThread01 ======&gt;"</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="string">"yieldThread01"</span>);</div><div class="line"></div><div class="line">        Thread yieldThread02 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>)&#123;</div><div class="line">                    Thread.yield();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"yieldThread02 ======&gt;"</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="string">"yieldThread02"</span>);</div><div class="line">        <span class="comment">// 发现 yieldThread01、yieldThread02 交互执行</span></div><div class="line">        yieldThread02.start();</div><div class="line">        yieldThread01.start();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t.start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            t.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 因为 t join 了主线程，需要等 t 执行完</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"main"</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-ThreadState"><a href="#4-ThreadState" class="headerlink" title="4. ThreadState"></a>4. ThreadState</h2><p>NEW、RUNNABLE、Running、BLOCKED、WAITING、TIMED_WAITING、TERMINATED</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_Thread_State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread th = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">2000l</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 新建：NEW</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        th.start();</div><div class="line">        <span class="comment">// 就绪：RUNNABLE</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        Thread.sleep(<span class="number">200l</span>);</div><div class="line">        <span class="comment">// TIMED_WAITING</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        Thread.sleep(<span class="number">2000l</span>);</div><div class="line">        <span class="comment">// 死亡：TERMINATED</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-synchronized"><a href="#5-synchronized" class="headerlink" title="5. synchronized"></a>5. synchronized</h2><ol><li>为什么要加锁？两个程序对同一个数字加一，如果不加锁，可能最终结果是1。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</div><div class="line">    <span class="comment">// 如果不加 synchronized，可能两个线程同时拿到 1000，然后都减1后，count 值是999，应该是998才对</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            count--;</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"count:"</span> + count);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_02 T = <span class="keyword">new</span> T04_Synchronized_02();</div><div class="line">        <span class="comment">// 启动1000个线程去消费1000个数据。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(T).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>对某个对象加锁、对 this 加锁、对方法加锁、对静态方法加锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * synchronized 可以锁定的位置</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSyncObject</span><span class="params">()</span></span>&#123;</div><div class="line">        Object o = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">            System.out.println(<span class="string">"===testSyncObject==="</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testSyncThis</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"===testSyncThis==="</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testSyncMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"===testSyncMethod==="</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testSyncStaticMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"===testSyncStaticMethod==="</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>同步和非同步方法可以同时调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_03</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m1 start..."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"m1 end..."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 发现 m2 在 m1 sleep 期间执行了</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m2 start..."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">500l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"m2 end..."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_03 t = <span class="keyword">new</span> T04_Synchronized_03();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1,<span class="string">"m1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m2,<span class="string">"m2"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>对业务写方法加锁，对读业务方法不加锁（会有脏读问题）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_04</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Accout accout = <span class="keyword">new</span> Accout();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;accout.setBalance(<span class="number">100</span>);&#125;).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">500l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 脏读(因为此时还没有写完，但是读操作没有上锁，直接读取，导致脏读)</span></div><div class="line">        System.out.println(accout.getBalance());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(accout.getBalance());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accout</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> balance;</div><div class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.balance = balance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁，也就是说synchronized获得的锁是可重入的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_05</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> T04_Synchronized_05().m1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m1 start"</span>);</div><div class="line">        <span class="comment">// 调用该对象同步方法(重入)</span></div><div class="line">        m2();</div><div class="line">        System.out.println(<span class="string">"m1 end"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m2 start"</span>);</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>子类调用父类的同步方法，说明 synchronized 是可重入的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_06</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> T04_Synchronized_06().m2();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"child m2 start"</span>);</div><div class="line">        <span class="keyword">super</span>.m2();</div><div class="line">        System.out.println(<span class="string">"child m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"parent m2 start"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"parent m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>程序在执行过程中，如果出现异常，默认情况锁会被释放,所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_07</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_07 t1 = <span class="keyword">new</span> T04_Synchronized_07();</div><div class="line">        T04_Synchronized_07 t2 = <span class="keyword">new</span> T04_Synchronized_07();</div><div class="line">        <span class="keyword">new</span> Thread(t1::m,<span class="string">"t1"</span>).start();</div><div class="line">        <span class="comment">// t1 抛出异常，导致 t2 得到执行机会</span></div><div class="line">        <span class="keyword">new</span> Thread(t1::m,<span class="string">"t2"</span>).start();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"start"</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            count++;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"count:"</span> + count);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(count == <span class="number">5</span>) &#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>synchronized优化：同步代码块中的语句越少越好</p></li><li><p>不要以字符串常量作为锁定对象，因为可能和某些类库锁定冲突，导致诡异的死锁阻塞</p></li><li><p>应该避免将锁定对象的引用变成另外的对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_08</span> </span>&#123;</div><div class="line">    <span class="comment">/*final*/</span> Object o = <span class="keyword">new</span> Object();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：m start"</span>);</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_08 t = <span class="keyword">new</span> T04_Synchronized_08();</div><div class="line">        <span class="keyword">new</span> Thread(t::m,<span class="string">"t1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m,<span class="string">"t2"</span>).start();</div><div class="line">        <span class="comment">// 锁对象发生改变，所以t2线程得以执行，如果注释掉这句话，线程2将永远得不到执行机会</span></div><div class="line">        t.o = <span class="keyword">new</span> Object();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-synchronized-底层实现"><a href="#6-synchronized-底层实现" class="headerlink" title="6. synchronized 底层实现"></a>6. synchronized 底层实现</h2><p>JDK 早期使用的是重量级锁。后来提出了锁升级的概念。</p><p>锁升级</p><ul><li>偏向锁：线程来了之后，<strong>不加锁</strong>，只是记录线程 ID，认为这个对象是这个线程独有</li><li>自旋锁：线程来了之后，发现和记录的线程 ID 不相等，则进行锁升级。锁升级首先尝试进行自旋锁的升级。对象被其他线程锁定时，在旁边转圈，默认转 10 圈，如果还没有拿到就升级重量级锁。<strong>线程数量少，线程执行时间短</strong>则考虑自旋锁，否则消耗 CPU 太大，应该用重量级锁。</li><li>重量级锁：经过 OS，进入等待队列，不再占用 CPU 时间。</li></ul><h2 id="7-volatile"><a href="#7-volatile" class="headerlink" title="7. volatile"></a>7. volatile</h2><ul><li><p>保证线程可见性（MESI）：通过 CPU 的缓存一致性协议实现</p><ul><li>java 有堆内存（共享内存）和栈内存（线程工作内存），栈内存访问堆内存中值时，每个线程会copy 一个副本到自己的栈内存。那么如果该值被某个线程修改，什么时候写回到共享内存不好控制（<strong>应该是修改后立马写回，待确认</strong>），并且其他线程什么时候发现该值已经改变了也不好控制。所以一个线程对共享数据的更改，不能及时反应到其他线程，这就叫线程之间的不可见。volatile 可以解决该问题。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * volatile 关键字，使一个变量在多个线程间可见</span></div><div class="line"><span class="comment"> * A B线程都用到一个变量，java默认是A线程中保留一份copy，这样如果B线程修改了该变量，则A线程未必知道</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 在下面的代码中，running是存在于堆内存的t对象中</span></div><div class="line"><span class="comment"> * 当线程t1开始运行的时候，会把running值从内存中读到t1线程的工作区，在运行过程中直接使用这个copy值，并不会每次都去</span></div><div class="line"><span class="comment"> * 读取堆内存，这样，当主线程修改running的值之后，t1线程感知不到，所以不会停止运行</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 使用volatile，将会强制所有线程都去堆内存中读取running的值</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_01</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"m start"</span>);</div><div class="line">        <span class="keyword">while</span> (running)&#123;&#125;</div><div class="line">        System.out.println(<span class="string">"m end"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T05_Volatile_01 t = <span class="keyword">new</span> T05_Volatile_01();</div><div class="line">        <span class="keyword">new</span> Thread(t::m).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 主线程修改值，如果不用 volatile，其他线程不可见</span></div><div class="line">        t.running = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>禁止指令重排序（CPU 为了提高效率，可能一个指令没有执行完时就执行下一个指令，这时需要编译器可以对指令进行重新排序）</p><ul><li>DCL（Double Check Lock） 单例</li></ul></li><li>volatile 修饰的引用类型（包括数组）只能保证引用本身的可见性，不能保证内部字段的可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_02</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> T05_Volatile_02 t = <span class="keyword">new</span> T05_Volatile_02();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"m start"</span>);</div><div class="line">        <span class="keyword">while</span> (running)&#123;&#125;</div><div class="line">        System.out.println(<span class="string">"m end"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(t::m).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        t.running = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_03</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.a = a;</div><div class="line">            <span class="keyword">this</span>.b = b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> Data data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread writer = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                data = <span class="keyword">new</span> Data(i, i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Thread reader = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> x = data.a;</div><div class="line">            <span class="keyword">int</span> y = data.b;</div><div class="line">            <span class="keyword">if</span>(x != y) &#123;</div><div class="line">                System.out.printf(<span class="string">"a = %s, b=%s%n"</span>, x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        reader.start();</div><div class="line">        writer.start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            reader.join();</div><div class="line">            writer.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>volatile 并不能保证多个线程共同修改 running 变量时所带来的不一致问题，也就是说 volatile 不能替代 synchronized，synchronized 可以保证可见性和原子性，volatile 只能保证可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_04</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">            <span class="comment">/*synchronized (this)&#123;*/</span></div><div class="line">                count++;</div><div class="line">            <span class="comment">/*&#125;*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T05_Volatile_04 t = <span class="keyword">new</span> T05_Volatile_04();</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(t::m);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].join();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(t.count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="8-CAS-自旋锁、无锁优化、乐观锁"><a href="#8-CAS-自旋锁、无锁优化、乐观锁" class="headerlink" title="8. CAS(自旋锁、无锁优化、乐观锁)"></a>8. CAS(自旋锁、无锁优化、乐观锁)</h2><ul><li>Compare And Set</li><li>cas(V, Excected, NewValue)<ul><li>if V == E 设置新值</li><li>otherwise try again or fail</li><li>例如执行 m=0;m++。cas(0,1){for(;;) 如果当前m值==0，则执行 m=1}</li></ul></li><li><p>CPU 是指令级操作，只有一步原子操作，不可被打断</p></li><li><p>会有 ABA 问题。解决：1. 忽略，2. 加版本号</p></li></ul><h2 id="9-CAS-在-JDK-中的应用（AtomicInteger、Unsafe-类）"><a href="#9-CAS-在-JDK-中的应用（AtomicInteger、Unsafe-类）" class="headerlink" title="9. CAS 在 JDK 中的应用（AtomicInteger、Unsafe 类）"></a>9. CAS 在 JDK 中的应用（AtomicInteger、Unsafe 类）</h2><h3 id="9-1-AtomicInteger"><a href="#9-1-AtomicInteger" class="headerlink" title="9.1 AtomicInteger"></a>9.1 AtomicInteger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 解决同样的问题的更高效的方法，使用AtomXXX类</span></div><div class="line"><span class="comment"> * AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_AtomicInteger_01</span> </span>&#123;</div><div class="line">    AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            count.incrementAndGet();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T06_AtomicInteger_01 t = <span class="keyword">new</span> T06_AtomicInteger_01();</div><div class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            threads.add(<span class="keyword">new</span> Thread(t::m));</div><div class="line">        &#125;</div><div class="line">        threads.forEach(o -&gt;&#123;</div><div class="line">            o.start();</div><div class="line">        &#125;);</div><div class="line">        threads.forEach(o -&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                o.join();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.println(t.count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="9-2-LongAdder"><a href="#9-2-LongAdder" class="headerlink" title="9.2 LongAdder"></a>9.2 LongAdder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_LongAdder_01</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> AtomicLong count2 = <span class="keyword">new</span> AtomicLong();</div><div class="line">    <span class="keyword">static</span> LongAdder count3 = <span class="keyword">new</span> LongAdder();</div><div class="line">    <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">1000</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">                        count1++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count1:"</span>+count1+<span class="string">";sync time:"</span> + (System.currentTimeMillis() - start));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) count2.incrementAndGet();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count2:"</span>+count2+<span class="string">";atomic time:"</span> + (System.currentTimeMillis() - start));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) count3.increment();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count3:"</span>+count3+<span class="string">";atomic time:"</span> + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>synchronized 知识回顾</li><li>CAS 学习</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal 的使用和理解、强软若虚引用理解。&lt;/p&gt;
&lt;p&gt;线程基础：启动线程的四种方式；Sleep、Yield、Join；线程状态（五种）；synchronized；synchronized 底层实现；volatile；CAS 理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 - Observer</title>
    <link href="http://yoursite.com/2020-03-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Observer.html"/>
    <id>http://yoursite.com/2020-03-20-设计模式/设计模式-Observer.html</id>
    <published>2020-03-20T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:42.510Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之 Observer 模式。定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖它的对象都得到通知并自动更新。</p><a id="more"></a><h2 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h2><p><img src="../../images/dp/Obsever01.png" alt=""></p><p>Subject：提供增加观察者、删除观察者和通知所有观察者的方法。注意具体主题中会维护一个私有的观察者列表。</p><p>Observer：提供接收主题消息的方法。具体观察者中会维护一个 Subject 成员变量，用于注册和反注册。</p><p>注意：</p><ul><li>如果主题把数据直接通过 update 方法推送给观察者，则是推数据方式。</li><li>如果主题只是通过 update 方法通知观察者数据有变化，观察者根据自己需求拉取主题数据则是拉数据方式。</li></ul><h2 id="2-求职中心和求职者"><a href="#2-求职中心和求职者" class="headerlink" title="2. 求职中心和求职者"></a>2. 求职中心和求职者</h2><p>求职中心有新的职位信息时，打电话把职位信息推送给每个求职者。推数据方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  主题</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察者 求职中心。有新的求职信息则通知所有求职者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hearTelephone</span><span class="params">(String msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体主题</span></div><div class="line"><span class="comment"> * 求职中心。有新的求职信息则通知所有求职者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeekJobCenter</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    String msg;</div><div class="line">    <span class="keyword">boolean</span> changed;</div><div class="line">    Set&lt;Observer&gt; observers; <span class="comment">// 观察者列表。</span></div><div class="line">    SeekJobCenter()&#123;</div><div class="line">        msg = <span class="string">""</span>;</div><div class="line">        changed = <span class="keyword">false</span>;</div><div class="line">        observers = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 如果有改变则通知观察者</span></div><div class="line">        <span class="keyword">if</span>(changed)&#123;</div><div class="line">            observers.stream().forEach(o -&gt; &#123;</div><div class="line">                <span class="comment">// 直接把数据推送到观察者</span></div><div class="line">                o.hearTelephone(msg);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 求职中心接收新职位方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveNewMessage</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(str.equals(msg))&#123;</div><div class="line">            changed = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            msg = str;</div><div class="line">            changed = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students01</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Subject subject;</div><div class="line">    File myFile;</div><div class="line"></div><div class="line">    Students01(Subject subject, String fileName)&#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">        myFile = <span class="keyword">new</span> File(fileName);</div><div class="line">        subject.addObserver(<span class="keyword">this</span>); <span class="comment">// 向求职中心注册</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hearTelephone</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            RandomAccessFile out = <span class="keyword">new</span> RandomAccessFile(myFile, <span class="string">"rw"</span>);</div><div class="line">            out.seek(out.length());</div><div class="line">            out.write(msg.getBytes()); <span class="comment">// 把求职信息记入自己的小本本</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-商店和顾客"><a href="#3-商店和顾客" class="headerlink" title="3. 商店和顾客"></a>3. 商店和顾客</h2><p>商店有时会有商品打折。每次打折，商店会通知所有在该商店注册了的顾客有商品打折了，但是只是通知，并不会打具体的折扣信息发送出去，因为商店不知道顾客是否需要这些数据，所以如果顾客需要，自己拉取需要的折扣信息即可。拉数据方式。</p><p>代码和推数据方式类似，只是 update 方法不再提送主题数据。</p><h2 id="4-观察者与多主题"><a href="#4-观察者与多主题" class="headerlink" title="4. 观察者与多主题"></a>4. 观察者与多主题</h2><p>李先生希望及时知道气象站所维护的每日的天气数据，同时也希望及时知道旅行社每日的旅游信息。</p><p>代码也类似。只是具体观察者维护多个 Subject，同时 update 方法传递一个 Subject 参数，从而知道这是哪个主题发出的数据。</p><h2 id="5-Java-API-中的-Observable-和-Observer"><a href="#5-Java-API-中的-Observable-和-Observer" class="headerlink" title="5. Java API 中的 Observable 和 Observer"></a>5. Java API 中的 Observable 和 Observer</h2><p>就是主题和抽象观察者。</p><h2 id="6-加入事件"><a href="#6-加入事件" class="headerlink" title="6. 加入事件"></a>6. 加入事件</h2><p><img src="../../images/dp/Observer.png" alt=""></p><p>主题（事件源对象）：小孩</p><p>观察者：爸爸、妈妈</p><p>事件：时间、地点、什么事（醒了、尿床了…）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 小孩：主题、事件源对象</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</div><div class="line">    <span class="comment">// 观察者列表</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</div><div class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通知观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(WeakupEvent event)</span></span>&#123;</div><div class="line">        observers.stream().forEach(o -&gt;&#123;</div><div class="line">            o.action(event);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 小孩醒了，通知所有观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weekup</span><span class="params">()</span></span>&#123;</div><div class="line">        WeakupEvent event = <span class="keyword">new</span> WeakupEvent(<span class="keyword">this</span>, <span class="string">"bed"</span>, <span class="keyword">new</span> Date());</div><div class="line">        <span class="comment">// 传递事件（包含了事件源对象）</span></div><div class="line">        notifyObservers(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象事件</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">     <span class="function">T <span class="title">getSource</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakupEvent</span> <span class="keyword">implements</span> <span class="title">Event</span>&lt;<span class="title">Child</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line">    String location;</div><div class="line">    Date weakupTime;</div><div class="line"></div><div class="line">    WeakupEvent(Child child, String location, Date weakupTime)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="keyword">this</span>.location = location;</div><div class="line">        <span class="keyword">this</span>.weakupTime = weakupTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Child <span class="title">getSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getWeakupTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weakupTime;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">// 观察者对主题消息的处理</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dad</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line"></div><div class="line">    Dad(Child child)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="comment">// 观察者注入主题中</span></div><div class="line">        <span class="keyword">this</span>.child.addObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">feed</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Dad is feeding。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dad:"</span>+event.getLocation() + <span class="string">" "</span> + event.getWeakupTime());</div><div class="line"></div><div class="line">        feed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mom</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line"></div><div class="line">    Mom(Child child)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="comment">// 观察者注入主题中</span></div><div class="line">        <span class="keyword">this</span>.child.addObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Mon is hug。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        hug();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之 Observer 模式。定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖它的对象都得到通知并自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Observer" scheme="http://yoursite.com/tags/Observer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 - Singleton</title>
    <link href="http://yoursite.com/2020-03-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-singleton.html"/>
    <id>http://yoursite.com/2020-03-20-设计模式/设计模式-singleton.html</id>
    <published>2020-03-20T14:13:12.000Z</published>
    <updated>2020-04-06T14:48:03.067Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之 Singleton 模式。</p><p>模式引入：有时候系统的某些类确实不需要多个对象。</p><a id="more"></a><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h2><p>类加载到内存后，就实例化一个单例，JVM保证线程安全。唯一缺点：不管用到与否，类装载时就完成实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饿汉式：在 JVM 加载单价类时创建它的唯一实例。</span></div><div class="line"><span class="comment"> * 缺点：还没有使用该实例，实例就已经创建了</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h2><p>虽然达到了按需初始化的目的，但却带来线程不安全的问题。可以通过synchronized解决，但也带来效率下降。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饿汉式：减小锁粒度，以提高效率</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletion</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singletion uniqueInstance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singletion</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singletion.class)&#123;</div><div class="line">                Thread.sleep(<span class="number">10</span>);</div><div class="line">                <span class="comment">// 这里必须判断，只让第一个进来的线程创建实例，否则还是存在同步问题</span></div><div class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</div><div class="line">                    uniqueInstance = <span class="keyword">new</span> Singletion();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> uniqueInstance;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> 这里可能有比较耗时的初始化动作，不需要加锁</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-需不需要加-volatile"><a href="#3-需不需要加-volatile" class="headerlink" title="3. 需不需要加 volatile?"></a>3. 需不需要加 volatile?</h2><p>答案：需要。JVM 创建一个对象时，分为三步</p><ol><li>申请内存空间</li><li>设置成员变量的值</li><li>对象地址赋值给变量</li></ol><p>但是如果发生指令重排序，可能2、3步位置可能会互换。这时可能刚刚执行完1、3两个步骤，就是说成员变量还没来得及赋值，还是初始值的时候，第二个线程来了，而且那个单例变量的值不为空，那么就拿去直接使用了，并且可能修改、使用那些还没来得及初始化的成员变量，导致一些问题。但是加了 volatile 之后，这个对象的指令重排序就不存在了。</p><h2 id="4-静态内部类模式"><a href="#4-静态内部类模式" class="headerlink" title="4. 静态内部类模式"></a>4. 静态内部类模式</h2><p>JVM保证单例。加载外部类时不会加载内部类，这样可以实现懒加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 静态内部类方法：JVM 保证单例。但是加载外部类时不会内部类，这样可以实现懒加载</span></div><div class="line"><span class="comment"> * 缺点：看似完美，但是存在反射和反序列攻击</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton UNIQUEINSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.UNIQUEINSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        Singleton singleton = Singleton.getInstance();</div><div class="line"></div><div class="line">        <span class="comment">// 反射攻击</span></div><div class="line">        Constructor&lt;Singleton&gt; constructor = Singleton.class.getDeclaredConstructor();</div><div class="line">        constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Singleton newSingleton = constructor.newInstance();</div><div class="line">        <span class="comment">// false</span></div><div class="line">        System.out.println(singleton == newSingleton);</div><div class="line"></div><div class="line">        <span class="comment">// 反序列攻击</span></div><div class="line">        <span class="keyword">byte</span>[] serialize = SerializationUtils.serialize(singleton);</div><div class="line">        Singleton newInstance = SerializationUtils.deserialize(serialize);</div><div class="line">        <span class="comment">// false</span></div><div class="line">        System.out.println(singleton == newInstance);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-枚举模式"><a href="#5-枚举模式" class="headerlink" title="5. 枚举模式"></a>5. 枚举模式</h2><p>不仅可以解决线程同步，还可以防止反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 枚举方式：可以防止序列化和反序列化</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line"></div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        age = <span class="number">10</span>;</div><div class="line">        System.out.println(<span class="string">"do something. age:"</span>+age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Singleton.INSTANCE.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之 Singleton 模式。&lt;/p&gt;
&lt;p&gt;模式引入：有时候系统的某些类确实不需要多个对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Singleton" scheme="http://yoursite.com/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>第一课 音阶</title>
    <link href="http://yoursite.com/2020-03-06-%E5%90%89%E4%BB%96/%E7%AC%AC%E4%B8%80%E8%AF%BE%20%E9%9F%B3%E9%98%B6.html"/>
    <id>http://yoursite.com/2020-03-06-吉他/第一课 音阶.html</id>
    <published>2020-03-06T14:13:12.000Z</published>
    <updated>2020-04-06T14:06:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>第一课 音阶</p><a id="more"></a><h2 id="1-音阶"><a href="#1-音阶" class="headerlink" title="1. 音阶"></a>1. 音阶</h2><h3 id="1-1-什么是音阶"><a href="#1-1-什么是音阶" class="headerlink" title="1.1 什么是音阶"></a>1.1 什么是音阶</h3><p>音阶：构建音乐的四大要素之一。</p><h3 id="1-2-什么是音阶图"><a href="#1-2-什么是音阶图" class="headerlink" title="1.2 什么是音阶图"></a>1.2 什么是音阶图</h3><p>C 大调音阶图：</p><p><img src="../../images/吉他/C大调音阶图.jpg" alt=""></p><h3 id="1-3-音阶图用处"><a href="#1-3-音阶图用处" class="headerlink" title="1.3 音阶图用处"></a>1.3 音阶图用处</h3><p>音阶图用处：每个曲子都有自己的调性，一般标注在曲谱的左上角。1=C 就表示 C 调，就应该按照上面 C 大调音阶图来演奏，不然就跑调了。</p><h2 id="2-十二平均律"><a href="#2-十二平均律" class="headerlink" title="2. 十二平均律"></a>2. 十二平均律</h2><h3 id="2-1-什么是十二平均律"><a href="#2-1-什么是十二平均律" class="headerlink" title="2.1 什么是十二平均律"></a>2.1 什么是十二平均律</h3><p>一个完整的八度，由十二个半音组成，所以叫做十二平均律？嗯，后边讲了，大概就是这个意思。</p><p>3、4和7、1之间是半音，其他都是全音。</p><p><img src="../../images/吉他/十二平均律.jpg" alt=""></p><h3 id="2-2-有何用处？"><a href="#2-2-有何用处？" class="headerlink" title="2.2 有何用处？"></a>2.2 有何用处？</h3><p>吉他中，相邻两品是半个音。所以，根据十二平均律，只要知道了一根弦上的某一品的音，就可以推算出该弦每一品的音。</p><h3 id="2-3-升音、降音"><a href="#2-3-升音、降音" class="headerlink" title="2.3 升音、降音"></a>2.3 升音、降音</h3><p>升号：#</p><p>降号：b</p><p>不存在 #3、b4 和 #7、b1。因为本身就只差半个音。</p><h2 id="3-音程"><a href="#3-音程" class="headerlink" title="3. 音程"></a>3. 音程</h2><h3 id="3-1-什么是音程？"><a href="#3-1-什么是音程？" class="headerlink" title="3.1 什么是音程？"></a>3.1 什么是音程？</h3><p>音与音之间的距离。</p><p>几个音符就表示间隔几度。比如2-7，间隔6度。</p><h3 id="3-2-大-小三度、纯-增四度"><a href="#3-2-大-小三度、纯-增四度" class="headerlink" title="3.2 大/小三度、纯/增四度"></a>3.2 大/小三度、纯/增四度</h3><p>大三度：全音+全音。比如 1-3</p><p>小三度：全音+半音。比如2-4</p><p>纯四度：有半音。比如1-4</p><p>增四度：没有半音。4-7</p><h3 id="3-3-有何用处？"><a href="#3-3-有何用处？" class="headerlink" title="3.3 有何用处？"></a>3.3 有何用处？</h3><p>研究同一个品丝，弦与弦之间的关系（大三度/纯四度）。</p><h3 id="3-4-应用题"><a href="#3-4-应用题" class="headerlink" title="3.4 应用题"></a>3.4 应用题</h3><p>已知</p><ol><li>吉他同一个品丝，1-6弦，音程为：纯四、大三、纯四、纯四、纯四</li><li>五弦三品的音为 1</li></ol><p>求：各个品丝、各个弦分别表示什么音？</p><p>参考上面 C 大调音阶图验证，发现确实没错。</p><h2 id="4-音阶调性"><a href="#4-音阶调性" class="headerlink" title="4. 音阶调性"></a>4. 音阶调性</h2><p>规律：</p><ol><li>同一个品丝：一弦和六弦相差两个八度</li><li>隔一个品丝：对角线相差一个八度</li></ol><p>音名与唱名：</p><table><thead><tr><th>音名</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>简谱</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>1</td></tr><tr><td>唱名</td><td>Do</td><td>Re</td><td>mi</td><td>fa</td><td>sol</td><td>la</td><td>si</td><td>Do</td></tr></tbody></table><p>变调夹：</p><p>如果选择调性是 1=C。那么，不夹变调夹就是 C 调，夹在二品就是 D 调，夹在 4 品就是 E 调，夹在 5 品就是 F 调。和十二平均律相对应。</p><p>标准调音：A=440Hz。在标准调音下，音名的位置永远不会变化。</p><p><strong>Do 在哪个位子，推算的就是哪个调的音阶。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一课 音阶&lt;/p&gt;
    
    </summary>
    
    
      <category term="吉他" scheme="http://yoursite.com/categories/%E5%90%89%E4%BB%96/"/>
    
    
      <category term="吉他" scheme="http://yoursite.com/tags/%E5%90%89%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 每日一题</title>
    <link href="http://yoursite.com/2020-03-06-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98.html"/>
    <id>http://yoursite.com/2020-03-06-算法与数据结构/leetcode每日一题.html</id>
    <published>2020-03-06T14:13:12.000Z</published>
    <updated>2020-04-06T14:07:31.574Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode 每日一题</p><a id="more"></a><h2 id="20200310-二叉树直径"><a href="#20200310-二叉树直径" class="headerlink" title="20200310-二叉树直径"></a>20200310-二叉树直径</h2><p>题目：给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。<strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p><p>思路：</p><ol><li>路径不一定穿过跟节点</li><li>任意节点的<strong>最长路径节点数量</strong>等于左右子节点的最大<strong>深度</strong>之和再加一</li><li><strong>最长路径长度</strong>等于最长路径节点数量减一</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a binary tree node.</span></div><div class="line"><span class="comment"> * public class TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode left;</span></div><div class="line"><span class="comment"> *     TreeNode right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// 最长路径节点数</span></div><div class="line">    <span class="keyword">int</span> maxLength;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="comment">// 默认一个节点 </span></div><div class="line">        maxLengthNodeNumers = <span class="number">1</span>;</div><div class="line">        deep(root);</div><div class="line">        <span class="keyword">return</span> maxLengthNodeNumers - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取任意节点的最大深度</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">        <span class="comment">// 空节点深度为 0</span></div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 左子节点，最大深度</span></div><div class="line">        <span class="keyword">int</span> L = deep(node.left);</div><div class="line">        <span class="comment">// 右子节点，最大深度</span></div><div class="line">        <span class="keyword">int</span> R = deep(node.right);</div><div class="line">        <span class="comment">// 更新最大路径节点数</span></div><div class="line">        maxLengthNodeNumers = Math.max(L+R+<span class="number">1</span>, maxLengthNodeNumers);</div><div class="line">        <span class="comment">// 返回该节点最大深度(要么左边深度大，要么右边深度大)</span></div><div class="line">        <span class="keyword">return</span> Math.max(L,R)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="20200311-数组分成和相等的三个部分"><a href="#20200311-数组分成和相等的三个部分" class="headerlink" title="20200311-数组分成和相等的三个部分"></a>20200311-数组分成和相等的三个部分</h2><p>题目：数组 A，只有可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。</p><p>形式上，如果可以找出索引 i+1 &lt; j 且满足 (A[0] + A[1] + … + A[i] == A[i+1] + A[i+2] + … + A[j-1] == A[j] + A[j-1] + … + A[A.length - 1]) 就可以将数组三等分。</p><p>思路：</p><ol><li>数组之和必须可以被三整除</li><li>数组可以分为三段，每一段之和为数组和的三分之一</li><li>数组双向索引遍历</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canThreePartsEqualSum</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sums = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length; i++) sums += A[i];</div><div class="line">    <span class="keyword">if</span>(sums%<span class="number">3</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> tmp = sums/<span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = A.length -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> leftSums = A[left];</div><div class="line">    <span class="keyword">int</span> rightSums = A[right];</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(left&lt;right-<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(leftSums == tmp &amp;&amp; rightSums == tmp) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(leftSums != tmp)&#123;</div><div class="line">            left++;</div><div class="line">            leftSums += A[left];</div><div class="line">            <span class="comment">//System.out.println(leftSums +"====" + left);</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rightSums != tmp)&#123;</div><div class="line">            right--;</div><div class="line">            rightSums += A[right];</div><div class="line">            <span class="comment">// System.out.println(rightSums +"====" + right);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="20200312-字符串的最大公因子"><a href="#20200312-字符串的最大公因子" class="headerlink" title="20200312-字符串的最大公因子"></a>20200312-字符串的最大公因子</h2><p>题目：对于字符串 S 和 T，只有在 S = T + … + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。</p><p>返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。</p><p>思路：</p><ol><li>X 肯定是 str1、str2中较小的字符串的子串</li><li>str1、str2 肯定都是 X 长度的整数倍</li><li>str1、str2 均由多个 X 组成</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gcdOfStrings</span><span class="params">(String str1, String str2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(str1 == <span class="keyword">null</span> || str1 == <span class="string">""</span> || str2 == <span class="keyword">null</span> || str2 == <span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        String strX = (str1.length() &gt; str2.length()) ? str2 : str1;</div><div class="line">        <span class="keyword">int</span> length1 = str1.length();</div><div class="line">        <span class="keyword">int</span> length2 = str2.length();</div><div class="line">        <span class="keyword">int</span> lengthX = strX.length();</div><div class="line">        String tmpStr=<span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 从较小字符串开始遍历</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=strX.length(); i&gt;<span class="number">0</span>; i--)&#123;</div><div class="line">            strX = strX.substring(<span class="number">0</span>, i);</div><div class="line">            lengthX = strX.length();</div><div class="line">            <span class="comment">// 验证长度</span></div><div class="line">            <span class="keyword">if</span>(length1 % lengthX != <span class="number">0</span> || length2 % lengthX != <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">// 验证 str1</span></div><div class="line">            tmpStr=<span class="string">""</span>;</div><div class="line">            <span class="keyword">int</span> tmp1 = length1/lengthX;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tmp1; j++)&#123;</div><div class="line">                tmpStr = tmpStr + strX;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!tmpStr.equals(str1)) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">// 验证 str2</span></div><div class="line">            <span class="keyword">int</span> tmp2 = length2/lengthX;</div><div class="line">            tmpStr=<span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tmp2; j++)&#123;</div><div class="line">                tmpStr = tmpStr + strX;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!tmpStr.equals(str2)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">return</span> strX;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode 每日一题&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper学习(三)</title>
    <link href="http://yoursite.com/2020-03-05-%E7%BD%91%E7%BB%9C%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F/zookeeper%E5%AD%A6%E4%B9%A0(%E4%B8%89).html"/>
    <id>http://yoursite.com/2020-03-05-网络到分布式/zookeeper学习(三).html</id>
    <published>2020-03-05T14:13:12.000Z</published>
    <updated>2020-03-05T13:01:04.586Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper 典型应用场景：分布式配置、分布式锁。<br><a id="more"></a></p><h2 id="1-分布式配置"><a href="#1-分布式配置" class="headerlink" title="1. 分布式配置"></a>1. 分布式配置</h2><h3 id="1-1-分布式配置分析"><a href="#1-1-分布式配置分析" class="headerlink" title="1.1 分布式配置分析"></a>1.1 分布式配置分析</h3><p>传统的配置一般放在本地，但是当服务集群大了，修改一个配置需要登录多台主机，所以如果有一个固定的位置存放一份统一的配置，只需要改一个配置，所有服务都能生效那是非常好的。这个位置可以是本地文件系统、数据库、Redis 等等，但是如果使用数据库或者 Redis 都需要轮询去取或者手动调用触发，因为不知道配置是否有改动，如果使用 ZooKeeper 的 watch 机制，就可以完美的解决该问题。</p><h3 id="1-2-具体实现"><a href="#1-2-具体实现" class="headerlink" title="1.2 具体实现"></a>1.2 具体实现</h3><ol><li>验证配置节点是否存在</li><li>配置节点存在则获取配置信息</li><li>成功获取配置信息则将信息设置到配置对象，然后放心</li><li>配置节点新增、修改，重新获取配置</li><li>配置节点删除，设置配置对象为空，重新监听配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfigTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZooKeeper zk;</div><div class="line">    <span class="keyword">private</span> MyConfig myConfig;</div><div class="line">    ZKConfigCompont zkConfigCompont;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</div><div class="line">        String connectString = <span class="string">"192.168.238.66:2181,192.168.238.68:2181,192.168.238.70:2181,192.168.238.72:2181/testNode"</span>;</div><div class="line">        <span class="keyword">int</span> sessionTimeOut = <span class="number">10000</span>;</div><div class="line">        ZKConfig zkConfig = ZKUtile.initZKConfig(connectString, sessionTimeOut);</div><div class="line"></div><div class="line">        zk = ZKUtile.getInstance(zkConfig);</div><div class="line">        myConfig = <span class="keyword">new</span> MyConfig();</div><div class="line"></div><div class="line">         zkConfigCompont = <span class="keyword">new</span> ZKConfigCompont(<span class="string">"/configTest"</span>, zk, myConfig);</div><div class="line">        <span class="comment">// 阻塞，zk 服务端处理获取配置请求</span></div><div class="line">        zkConfigCompont.watchConfig();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zk.close();</div><div class="line">            System.out.println(<span class="string">"closed ...."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 获取配置（如果有更新或者删除响应式实时更新）</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(myConfig.getConfig() == <span class="keyword">null</span> || <span class="string">""</span>.equals(myConfig.getConfig()))&#123;</div><div class="line">                <span class="comment">// 配置被删除，重新阻塞</span></div><div class="line">                zkConfigCompont.watchConfig();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"当前配置："</span> + myConfig.getConfig());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000l</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKConfigCompont</span> <span class="keyword">implements</span> <span class="title">Watcher</span>, <span class="title">AsyncCallback</span>.<span class="title">StatCallback</span>, <span class="title">AsyncCallback</span>.<span class="title">DataCallback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String configPath;</div><div class="line">    <span class="keyword">private</span> ZooKeeper zk;</div><div class="line">    <span class="keyword">private</span> MyConfig myConfig;</div><div class="line">    <span class="keyword">private</span> CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZKConfigCompont</span><span class="params">(String configPath, ZooKeeper zk, MyConfig myConfig)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.configPath = configPath;</div><div class="line">        <span class="keyword">this</span>.zk = zk;</div><div class="line">        <span class="keyword">this</span>.myConfig = myConfig;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 验证配置节点是否存在</span></div><div class="line">        zk.exists(configPath, <span class="keyword">this</span>, <span class="keyword">this</span>, <span class="string">"exists"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 阻塞，等待获取到配置信息放行</span></div><div class="line">            cd.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// exists callback</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, Stat stat)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"exists callback："</span> + rc);</div><div class="line">        <span class="keyword">if</span> (KeeperException.Code.OK.intValue() == rc)&#123;</div><div class="line">            <span class="comment">// 配置节点存在则获取配置信息</span></div><div class="line">            zk.getData(configPath, <span class="keyword">this</span>, <span class="keyword">this</span>, <span class="string">"get data"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// get data callback</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, <span class="keyword">byte</span>[] data, Stat stat)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (KeeperException.Code.OK.intValue() == rc)&#123;</div><div class="line">            <span class="comment">// 设置配置，放行</span></div><div class="line">            myConfig.setConfig(<span class="keyword">new</span> String(data));</div><div class="line">            cd.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// exists/getData watch</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">        Event.EventType type = event.getType();</div><div class="line">        <span class="comment">// 配置节点新增，重新获取配置</span></div><div class="line">        <span class="comment">// 配置节点修改，重新获取配置</span></div><div class="line">        <span class="comment">// 配置节点删除，设置配置为空,重新监听配置</span></div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> NodeCreated:</div><div class="line">            <span class="keyword">case</span> NodeDataChanged:</div><div class="line">                System.out.println(<span class="string">"config node create/changed...."</span>);</div><div class="line">                zk.getData(configPath, <span class="keyword">this</span>, <span class="keyword">this</span>, <span class="string">"get data"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> NodeDeleted:</div><div class="line">                System.out.println(<span class="string">"config node deleted...."</span>);</div><div class="line">                cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">                myConfig.setConfig(<span class="string">""</span>);</div><div class="line">                <span class="comment">// watchConfig(); // 这里不知为何不能这么处理，待研究</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKUtile</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeper <span class="title">getInstance</span><span class="params">(ZKConfig zkConfig)</span></span>&#123;</div><div class="line">        CountDownLatch cd = zkConfig.getCd();</div><div class="line">        ZooKeeper zk = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zk = <span class="keyword">new</span> ZooKeeper(zkConfig.getConnectString(), zkConfig.getSessionTimeout(), zkConfig.getWatcher());</div><div class="line">            cd.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"get zk instance failed..."</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> zk;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZKConfig <span class="title">initZKConfig</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout)</span></span>&#123;</div><div class="line">        ZKConfig zkConfig = <span class="keyword">new</span> ZKConfig();</div><div class="line">        CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        zkConfig.setConnectString(connectString);</div><div class="line">        zkConfig.setSessionTimeout(sessionTimeout);</div><div class="line">        zkConfig.setCd(cd);</div><div class="line">        zkConfig.setWatcher(<span class="keyword">new</span> Watcher() &#123;</div><div class="line">            <span class="comment">// 父节点 watch 事件</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">                Event.EventType type = event.getType();</div><div class="line"></div><div class="line">                Event.KeeperState state = event.getState();</div><div class="line">                <span class="keyword">switch</span> (state) &#123;</div><div class="line">                    <span class="keyword">case</span> Disconnected:</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> SyncConnected:</div><div class="line">                        <span class="comment">// 节点创建，放行</span></div><div class="line">                        System.out.println(event.getPath()+<span class="string">"  connected...."</span>);</div><div class="line">                        cd.countDown();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> AuthFailed:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> ConnectedReadOnly:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> SaslAuthenticated:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> Expired:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> zkConfig;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-分布式锁"><a href="#2-分布式锁" class="headerlink" title="2. 分布式锁"></a>2. 分布式锁</h2><h3 id="2-1-分布式锁分析"><a href="#2-1-分布式锁分析" class="headerlink" title="2.1 分布式锁分析"></a>2.1 分布式锁分析</h3><ol><li>多个客户端争抢锁，只能有一个人获得锁</li><li>如果获得锁的人出问题了，利用临时节点和 session 机制，防止死锁</li><li>如果获得锁的人成功了，释放锁</li><li>其他客户端如何知道锁被释放了？<ol><li>客户端主动轮询，心跳，查看锁节点是否存在。问题：存在延迟；zk 服务端压力大，多个客户端不停仿佛服务端。</li><li>watch：解决延迟问题。问题：多个客户端 watch 同一个锁节点，当锁释放时，zk 服务端需要同时给大量 watch 了该节点的客户端回调，zk 服务端压力大</li><li>sequence+watch：sequence 形式创建节点，每个客户端 watch 前一个客户端的锁节点。一旦最小的释放了锁，zk 只给第二个客户端发事件回调。</li></ol></li></ol><h3 id="2-2-具体实现"><a href="#2-2-具体实现" class="headerlink" title="2.2 具体实现"></a>2.2 具体实现</h3><ol><li>创建分布式锁工作根目录：/testLock</li><li>想要获取锁的线程先在根目录下创建 EPHEMERAL_SEQUENTIAL 节点</li><li>创建完成后获取根目录下所有节点</li><li>根目录下所有子节点排序后判断自己是不是第一个</li><li>如果是第一个获得锁，放行</li><li>如果不是第一个，watch 排序后该节点的前一个节点的 NodeDeleted 事件，线程阻塞</li><li>当前获得锁的节点工作完成释放锁，触发 NodeDeleted  事件，watch 它的节点开始枪锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKLockComponent</span> <span class="keyword">implements</span> <span class="title">AsyncCallback</span>.<span class="title">StringCallback</span>, <span class="title">AsyncCallback</span>.<span class="title">Children2Callback</span>, <span class="title">Watcher</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZooKeeper zk;</div><div class="line">    <span class="keyword">private</span> String lockNamePrex; <span class="comment">// 锁名称前缀（/lock）</span></div><div class="line">    <span class="keyword">private</span> String lockName;     <span class="comment">// 锁节点名称（/lock0000000080 /lock0000000081 ...）</span></div><div class="line">    <span class="keyword">private</span> String threadName;   <span class="comment">// 工作线程名称 （Thread-0 Thread-1 ...）</span></div><div class="line">    <span class="keyword">private</span> CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZKLockComponent</span><span class="params">(ZooKeeper zk, String lockNamePrex, String threadName)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.zk = zk;</div><div class="line">        <span class="keyword">this</span>.lockNamePrex = lockNamePrex;</div><div class="line">        <span class="keyword">this</span>.threadName = threadName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryLock</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 新增锁节点</span></div><div class="line">        zk.create(lockNamePrex, threadName.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,</div><div class="line">                CreateMode.EPHEMERAL_SEQUENTIAL, <span class="keyword">this</span>, <span class="string">"aaa"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cd.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// create callback</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"path:"</span> + path + <span class="string">"，threadName:"</span> + threadName + <span class="string">"，name："</span> + name);</div><div class="line">        lockName = name;</div><div class="line">        <span class="keyword">if</span>(KeeperException.Code.OK.intValue() == rc)&#123;</div><div class="line">            <span class="comment">// 根节点无需 watch</span></div><div class="line">            zk.getChildren(<span class="string">"/"</span>,<span class="keyword">null</span>, <span class="keyword">this</span>, <span class="string">"aaa"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// getChildren callback</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, List&lt;String&gt; children, Stat stat)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(children != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Collections.sort(children);</div><div class="line">                <span class="keyword">int</span> i = children.indexOf(lockName.substring(<span class="number">1</span>));</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">                    <span class="comment">// 判断自己是不是最小的，是最小的就放行获得锁</span></div><div class="line">                    System.out.println(threadName+<span class="string">" i am first..."</span>);</div><div class="line">                    <span class="comment">// 设置锁根节点的值为当前获得锁的线程名称</span></div><div class="line">                    zk.setData(<span class="string">"/"</span>,threadName.getBytes(),-<span class="number">1</span>);</div><div class="line">                    cd.countDown();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 不是最小的，watch 前面的一个</span></div><div class="line">                    System.out.println(threadName+<span class="string">" watch "</span>+children.get(i-<span class="number">1</span>));</div><div class="line">                    zk.exists(<span class="string">"/"</span>+children.get(i-<span class="number">1</span>),<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// exists watch</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// 前面节点删除，立即抢锁</span></div><div class="line">        Event.EventType type = event.getType();</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> NodeCreated:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> NodeDeleted:</div><div class="line">                zk.getChildren(<span class="string">"/"</span>,<span class="keyword">null</span>, <span class="keyword">this</span>, <span class="string">""</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zk.delete(lockName,-<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRootData</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] data = zk.getData(<span class="string">"/"</span>, <span class="keyword">false</span>, <span class="keyword">new</span> Stat());</div><div class="line">        System.out.println(<span class="string">"RootData："</span>+<span class="keyword">new</span> String(data));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ZooKeeper zk;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</div><div class="line">        String connectString = <span class="string">"192.168.238.66:2181,192.168.238.68:2181,192.168.238.70:2181,192.168.238.72:2181/testLock"</span>;</div><div class="line">        <span class="keyword">int</span> sessionTimeOut = <span class="number">10000</span>;</div><div class="line">        ZKConfig zkConfig = ZKUtile.initZKConfig(connectString, sessionTimeOut);</div><div class="line">        zk = ZKUtile.getInstance(zkConfig);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            zk.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zkLockTest</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                String name = Thread.currentThread().getName();</div><div class="line">                ZKLockComponent lockComponent = <span class="keyword">new</span> ZKLockComponent(zk,<span class="string">"/lock"</span>,name);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lockComponent.tryLock();</div><div class="line"></div><div class="line">                    System.out.println(name + <span class="string">"  is working...."</span>);</div><div class="line">                    lockComponent.getRootData();</div><div class="line"></div><div class="line">                    lockComponent.unLock();</div><div class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZooKeeper 典型应用场景：分布式配置、分布式锁。&lt;br&gt;
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper学习(二)</title>
    <link href="http://yoursite.com/2020-03-02-%E7%BD%91%E7%BB%9C%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F/zookeeper%E5%AD%A6%E4%B9%A0(%E4%BA%8C).html"/>
    <id>http://yoursite.com/2020-03-02-网络到分布式/zookeeper学习(二).html</id>
    <published>2020-03-02T14:13:12.000Z</published>
    <updated>2020-03-05T15:29:32.533Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper paxos、ZAB、watch、API、callback（reactive）。<br><a id="more"></a></p><p>ZooKeeper 作为一个分布式协调服务，具有扩展性、可靠性、时序性、快速的特征。</p><h2 id="1-扩展性"><a href="#1-扩展性" class="headerlink" title="1. 扩展性"></a>1. 扩展性</h2><p>ZooKeeper 框架架构有 Leader、Follower、Observer 三类角色。ZooKeeper 提供读写分离，只有 Leader 才能写，只有 Follower 才能选举。可以在配置文件指定 Observer， Observer 只能读取，不能参与选举。 <code>server.4=node04:2888:3888:observer</code>。Observer 是为了放大查询能力，以便更加充分的发挥 ZooKeeper 的优势。</p><h2 id="2-可靠性"><a href="#2-可靠性" class="headerlink" title="2. 可靠性"></a>2. 可靠性</h2><ol><li>快速恢复的 Leader</li><li>paxos</li><li>zab</li></ol><h2 id="3-ZAB-协议"><a href="#3-ZAB-协议" class="headerlink" title="3. ZAB 协议"></a>3. ZAB 协议</h2><p><strong>Zookeeper 是通过 Zab 协议（原子广播协议）来保证分布式事务的最终一致性</strong>。ZAB 协议作用在 ZooKeeper 的状态为可用状态时，即 Leader 正常时。</p><p>原子：要么成功要么失败，没有中间状态。（队列+两步操作）</p><p>广播：分布式多节点，过半通过。</p><p>比如客户端发起一个写操作的流程：</p><ol><li>客户端向 Follower 发起 create 操作</li><li>Follower 将请求转至 Leader</li><li>Leader 向所有 Follower 广播，让 Follower 写 log</li><li>当有超过一半 Follower 同意，Leader 立即向所有 Follower 发送 write 指令</li><li>Leader 通知被请求的 Follower create 完成</li><li>Follower 回复客户端操作完成</li></ol><p>zk 的 Leader 会和每个 Follower 维护一个队列，从而保证数据的最终一致性和操作的原子性。</p><h2 id="4-选举流程"><a href="#4-选举流程" class="headerlink" title="4. 选举流程"></a>4. 选举流程</h2><p>当 ZooKeeper 集群中 Leader 故障时，ZooKeeper 能快速推举出新 Leader，是如何实现的呢？</p><ol><li>每个节点会有一个 myid 和最大的事务id（Zxid）</li><li>3888 端口就是选举端口，该集群中任何节点可以通过该端口和集群中其他节点两两通讯</li><li>所以只要集群中有任何节点发起投票，都会触发准 Leader 发起自己的投票</li><li>推选制度：先比较 Zxid，如果 Zxid 相同，再比较 myid</li></ol><p>jps 是什么命令？</p><h2 id="5-Watch"><a href="#5-Watch" class="headerlink" title="5. Watch"></a>5. Watch</h2><p>ZooKeeper 提供的是分布式协调服务，协调是指协调客户端之间的行为。比客户端 A 和客户端 B 要进行通讯，需要知道互相之间服务是否正常，传统的方法可以通过心跳来实现，但是心跳总会有一个间隔，肯定或多或少会有时效性的问题。那么此时可以考虑用 ZooKeeper 来实现。</p><ol><li>ZooKeeper 和每个客户端连接都会有一个 session，并且 ZooKeeper 可以建立临时节点，如果客户端连接断了，呢么 session 到了超时时间后将随之消失，该客户端创建的临时节点也消失</li><li>所以 A 可以 create 一个临时节点，比如 /ooxx/a</li><li>B get /ooxx/a</li><li>B watch /ooxx/a</li><li>ZooKeeper 有事件机制，如 create、delete、change、children 等</li><li>所以当 A 挂了的时候，B 立马会收到事件的 callback，就知道 A 出问题了</li></ol><p>总的来说，时效性更高，方向性是主动通知</p><h2 id="6-API-操作"><a href="#6-API-操作" class="headerlink" title="6. API 操作"></a>6. API 操作</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> CountDownLatch cd = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// zk 是 session 概念的，没有连接池的概念，即一个连接一个 session</span></div><div class="line">        <span class="comment">// zk 的 Watch 有两类。第一类：new zk 时传入的 watch，这个 watch session 级别的和 node、path 没有关系</span></div><div class="line">        <span class="keyword">final</span> ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.238.66:2181,192.168.238.68:2181,192.168.238.70:2181,192.168.238.72:2181"</span>,</div><div class="line">                <span class="comment">// session 超时时间</span></div><div class="line">                <span class="number">80000</span>, <span class="keyword">new</span> Watcher() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">                Event.KeeperState state = event.getState();</div><div class="line">                Event.EventType type = event.getType();</div><div class="line">                System.out.println(<span class="string">"event: "</span> + event.toString());</div><div class="line"></div><div class="line">                <span class="keyword">switch</span> (state) &#123;</div><div class="line">                    <span class="keyword">case</span> Unknown:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> Disconnected:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NoSyncConnected:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> SyncConnected:</div><div class="line">                        cd.countDown();</div><div class="line">                        System.out.println(<span class="string">"SyncConnected......"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> AuthFailed:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> ConnectedReadOnly:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> SaslAuthenticated:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> Expired:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">switch</span> (type) &#123;</div><div class="line">                    <span class="keyword">case</span> None:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NodeCreated:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NodeDeleted:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NodeDataChanged:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> NodeChildrenChanged:</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        cd.await();</div><div class="line">        ZooKeeper.States state = zooKeeper.getState();</div><div class="line">        <span class="keyword">switch</span> (state) &#123;</div><div class="line">            <span class="keyword">case</span> CONNECTING:</div><div class="line">                System.out.println(<span class="string">"ing......"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ASSOCIATING:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CONNECTED:</div><div class="line">                System.out.println(<span class="string">"ed........"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CONNECTEDREADONLY:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> CLOSED:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> AUTH_FAILED:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> NOT_CONNECTED:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 新增节点</span></div><div class="line">        <span class="comment">// watch 的注册只发生在读类型调用，比如 get、exists；写是产生事件</span></div><div class="line">        String pathName = zooKeeper.create(<span class="string">"/111"</span>, <span class="string">"old data"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</div><div class="line"></div><div class="line">        <span class="comment">// 查询节点</span></div><div class="line">        <span class="keyword">final</span> Stat stat = <span class="keyword">new</span> Stat(); <span class="comment">// 元数据信息</span></div><div class="line">        <span class="keyword">byte</span>[] data = zooKeeper.getData(<span class="string">"/111"</span>, <span class="keyword">new</span> Watcher() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"getDate event:"</span> + event.toString());</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 处理完成继续注册 watch，下次就该就会再进来</span></div><div class="line">                    <span class="comment">// true：注册 default watch，就是创建 zk 时的 watch</span></div><div class="line">                    zooKeeper.getData(<span class="string">"/111"</span>, <span class="keyword">this</span>, stat);</div><div class="line">                &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, stat);</div><div class="line">        System.out.println(<span class="string">"节点 /111 数据："</span> + <span class="keyword">new</span> String(data));</div><div class="line"></div><div class="line">        <span class="comment">// 修改节点</span></div><div class="line">        <span class="comment">// 会触发回调</span></div><div class="line">        Stat stat1 = zooKeeper.setData(<span class="string">"/111"</span>, <span class="string">"new data"</span>.getBytes(), <span class="number">0</span>);</div><div class="line">        <span class="comment">// 再次修改不会触发回调，watch 是一次性的</span></div><div class="line">        Stat stat2 = zooKeeper.setData(<span class="string">"/111"</span>, <span class="string">"new data01"</span>.getBytes(), stat1.getVersion());</div><div class="line"></div><div class="line">        <span class="comment">// 异步操作</span></div><div class="line">        System.out.println(<span class="string">"============sync start====================="</span>);</div><div class="line">        zooKeeper.getData(<span class="string">"/111"</span>, <span class="keyword">false</span>, <span class="keyword">new</span> AsyncCallback.DataCallback() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, <span class="keyword">byte</span>[] data, Stat stat)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"============sync callback====================="</span>);</div><div class="line">                System.out.println(<span class="keyword">new</span> String(data));</div><div class="line">                System.out.println(ctx.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"abc"</span>);</div><div class="line">        System.out.println(<span class="string">"============sync end====================="</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 当连接到的 zk 节点挂了时，会自动切换，并且 sessionId 不会变</span></div><div class="line">        Thread.sleep(<span class="number">22222222</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li>PAXOS：<a href="https://www.douban.com/note/208430424/" target="_blank" rel="external">https://www.douban.com/note/208430424/</a></li><li>PAXOS：<a href="https://www.cnblogs.com/linbingdong/p/6253479.html" target="_blank" rel="external">https://www.cnblogs.com/linbingdong/p/6253479.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZooKeeper paxos、ZAB、watch、API、callback（reactive）。&lt;br&gt;
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper学习(一)</title>
    <link href="http://yoursite.com/2020-03-02-%E7%BD%91%E7%BB%9C%E5%88%B0%E5%88%86%E5%B8%83%E5%BC%8F/zookeeper%E5%AD%A6%E4%B9%A0(%E4%B8%80).html"/>
    <id>http://yoursite.com/2020-03-02-网络到分布式/zookeeper学习(一).html</id>
    <published>2020-03-02T14:13:12.000Z</published>
    <updated>2020-03-05T13:30:20.118Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper 概述、安装和客户端的基本使用。<br><a id="more"></a></p><h2 id="1-ZooKeeper-概述"><a href="#1-ZooKeeper-概述" class="headerlink" title="1. ZooKeeper 概述"></a>1. ZooKeeper 概述</h2><p>ZooKeeper 是一个分布式应用程序的分布式协调服务。</p><p>ZooKeeper 使用<strong>主从复制集群（主备模型）</strong>，这种集群方式都有一个问题，那就是主节点是单点的，需要想办法让主节点实现高可用，比如 Redis 是使用 sentinel 实现 HA。</p><p>ZooKeeper 比较特殊，它的主节点有<strong>自我修复能力</strong>，并且修复的时间贼快，官方压测 200ms 就可以恢复。就是说 ZooKeeper 有两种运行状态，一种是可用状态（主节点正常），一种是不可用状态（主节点异常）但是从异常状态恢复到正常状态非常快。</p><p>ZooKeeper 节点也可以存数据，每个节点可以存 1MB，但是千万不要把 ZooKeeper 当作数据库来使用，因为 ZooKeeper 主要特性是提供高效率的服务，快速响应请求，速度快也就意味着节点的体量变小，同时当成数据库时，想写比也很难达到官方理想的读写比（10:1），也就难以发挥 ZooKeeper 的优势了。</p><p>每个客户端连接到 ZooKeeper 时都会产生一个 session 代表这个客户端。</p><p>ZooKeeper 是一个目录树结构，节点可以存数据（1MB）。他有两类节点，持久节点和临时节点。之前我们说 Redis 分布式锁很复杂，客户端需要引入线程的概念，但是如果使用 ZooKeeper，直接利用 session 即可实现，session 在表示锁还在，session 不在锁也就不在，节点自身挂了，session 也会随之消失。</p><p>ZooKeeper 特征：</p><ul><li>顺序一致性 - 客户端的更新将按发送顺序应用（因为只有一个主节点）。</li><li>原子性 - 更新成功或失败。没有部分结果。</li><li>统一视图 - 无论服务器连接到哪个服务器，客户端都将看到相同的服务视图（<strong>主从复制集群</strong>）。</li><li>可靠性 - 一旦应用了更新，它将从那时起持续到客户端覆盖更新。</li><li>及时性 - 系统的客户视图保证在特定时间范围内是最新的（<strong>最终一致性</strong>），客户端如果在读取前先同步则肯定是最新的数据。</li></ul><h2 id="2-ZooKeeper-安装"><a href="#2-ZooKeeper-安装" class="headerlink" title="2. ZooKeeper 安装"></a>2. ZooKeeper 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 安装 JDK</div><div class="line">// 安装 ZooKeeper</div><div class="line">-- 下载</div><div class="line"><span class="built_in">cd</span> ~/soft</div><div class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.7/apache-zookeeper-3.5.7.tar.gz</div><div class="line">tar -xf apache-zookeeper-3.5.7.tar.gz</div><div class="line"></div><div class="line">-- 修改配置</div><div class="line"><span class="built_in">cd</span> apache-zookeeper-3.5.7/conf/</div><div class="line">cp zoo_sample.cfg zoo.cfg</div><div class="line"></div><div class="line">dataDir=/var/alvin/zookeeper</div><div class="line">server.1=192.168.238.66:2888:3888</div><div class="line">server.2=192.168.238.68:2888:3888</div><div class="line">server.3=192.168.238.70:2888:3888</div><div class="line">server.4=192.168.238.72:2888:3888</div><div class="line"></div><div class="line">-- 设置环境变量</div><div class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">"/opt/jdk-11.0.5"</span></div><div class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=<span class="string">"/opt/apache-zookeeper-3.5.7"</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$PATH</span>"</span></div><div class="line"><span class="built_in">source</span> /etc/profile</div><div class="line"></div><div class="line">-- 在持久化目录新建 myid 文件（必须和配置对应）</div><div class="line">mkdir -p /var/alvin/zookeeper</div><div class="line"><span class="built_in">echo</span> 1 &gt; /var/alvin/zookeeper/myid</div><div class="line"><span class="built_in">echo</span> 2 &gt; /var/alvin/zookeeper/myid</div><div class="line"><span class="built_in">echo</span> 3 &gt; /var/alvin/zookeeper/myid</div><div class="line"><span class="built_in">echo</span> 4 &gt; /var/alvin/zookeeper/myid</div><div class="line"></div><div class="line">-- 启动 ZooKeeper</div><div class="line">zkServer.sh start-foreground</div><div class="line"></div><div class="line">-- 启动到第三台时就已经可以选出 leader 了，也就可以提供服务了</div><div class="line">zkServer.sh status</div></pre></td></tr></table></figure><h2 id="3-ZooKeeper-客户端"><a href="#3-ZooKeeper-客户端" class="headerlink" title="3. ZooKeeper 客户端"></a>3. ZooKeeper 客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">zkCli.sh</div><div class="line">ls /</div><div class="line">create /ooxx</div><div class="line">create /ooxx/xxoo</div><div class="line">ls /ooxx/xxoo</div><div class="line"><span class="built_in">set</span> /ooxx <span class="string">"hello"</span></div><div class="line">get /ooxx</div><div class="line">-- 节点值，最大 1MB</div><div class="line">    hello</div><div class="line">    -- leader 单机递增器，一个数字表示四位，一共8个字节。</div><div class="line">    -- 前 32 位表示 leader 纪元；后 32 位表示操作序号</div><div class="line">    -- 创建事务 ID</div><div class="line">    cZxid = 0x100000004</div><div class="line">    -- 节点创建时间</div><div class="line">    ctime = Tue Mar 03 01:02:49 CST 2020</div><div class="line">    -- 修改事务 ID</div><div class="line">    mZxid = 0x100000006</div><div class="line">    -- 修改时间</div><div class="line">    mtime = Tue Mar 03 01:03:40 CST 2020</div><div class="line">    -- 该节点下，最后创建的节点的 ID 号</div><div class="line">    pZxid = 0x100000005</div><div class="line">    -- 版本号</div><div class="line">    cversion = 1</div><div class="line">    dataVersion = 1</div><div class="line">    aclVersion = 0</div><div class="line">    -- 临时归属，0x0 表示是持久节点</div><div class="line">    ephemeralOwner = 0x0</div><div class="line">    dataLength = 5</div><div class="line">    numChildren = 1</div><div class="line"></div><div class="line">create -e /xoxo <span class="string">"lalala"</span></div><div class="line">get /xoxo</div><div class="line">-- 临时节点（伴随 session 的会话期），就是客户端 session id</div><div class="line">ephemeralOwner = 0x3000bbd5d920002</div><div class="line"></div><div class="line">-- session id 也是共享的，如果服务端挂了，客户端可以平滑的转移到其他的客户端，并 session 还在</div><div class="line"></div><div class="line">-- 防止重复（不同的客户端都想创建 /xxxx 节点，但是又不想覆盖其他客户端创建的该节点）</div><div class="line">create -s /xxxx <span class="string">"aaa"</span></div><div class="line"></div><div class="line">-- 2888：选主投票用 3888：leader 接收 write 请求</div><div class="line">netstat -natp   |   egrep  <span class="string">'(2888|3888)'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZooKeeper 概述、安装和客户端的基本使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/categories/ZooKeeper/"/>
    
    
      <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
  </entry>
  
  <entry>
    <title>服务治理：Spring Cloud Eureka</title>
    <link href="http://yoursite.com/2020-03-02-Spring%20Cloud/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86-Eureka.html"/>
    <id>http://yoursite.com/2020-03-02-Spring Cloud/服务治理-Eureka.html</id>
    <published>2020-03-02T14:13:12.000Z</published>
    <updated>2020-03-03T11:40:32.144Z</updated>
    
    <content type="html"><![CDATA[<p>Eureka 入门<br><a id="more"></a></p><h2 id="1-搭建服务注册中心"><a href="#1-搭建服务注册中心" class="headerlink" title="1. 搭建服务注册中心"></a>1. 搭建服务注册中心</h2><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-2-基本配置"><a href="#1-2-基本配置" class="headerlink" title="1.2 基本配置"></a>1.2 基本配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7900</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line">    <span class="comment"># 本服务是否注册到注册中心</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 本服务是否从注册中心获取服务列表</span></div><div class="line">    <span class="comment"># 注册中心的职责是维护服务实例，不需要检索服务</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure><h3 id="1-3-增加注解"><a href="#1-3-增加注解" class="headerlink" title="1.3 增加注解"></a>1.3 增加注解</h3><p>通过<code>@EnableEurekaServer</code>启动注册中心。</p><h2 id="2-注册服务提供者"><a href="#2-注册服务提供者" class="headerlink" title="2. 注册服务提供者"></a>2. 注册服务提供者</h2><h3 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-2-基本配置"><a href="#2-2-基本配置" class="headerlink" title="2.2 基本配置"></a>2.2 基本配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">1111</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">hello-service</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7900/eureka/</span></div></pre></td></tr></table></figure><h3 id="2-3-增加注解"><a href="#2-3-增加注解" class="headerlink" title="2.3 增加注解"></a>2.3 增加注解</h3><p>通过<code>@EnableDiscoveryClient</code>注解，向注册中心注册。</p><h3 id="2-4-验证"><a href="#2-4-验证" class="headerlink" title="2.4 验证"></a>2.4 验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DiscoveryClient client;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;String&gt; services = client.getServices();</div><div class="line">        services.stream().forEach(s -&gt; &#123;</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;);</div><div class="line">        List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">"hello-service"</span>);</div><div class="line">        instances.stream().forEach(i-&gt;&#123;</div><div class="line">            System.out.println(<span class="string">"host:"</span>+i.getHost()+<span class="string">";instanceId:"</span>+i.getInstanceId()</div><div class="line">                    +<span class="string">";serviceId:"</span>+i.getServiceId()+<span class="string">";port:"</span>+i.getPort());</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-高可用注册中心"><a href="#3-高可用注册中心" class="headerlink" title="3. 高可用注册中心"></a>3. 高可用注册中心</h2><h3 id="3-1-基本配置"><a href="#3-1-基本配置" class="headerlink" title="3.1 基本配置"></a>3.1 基本配置</h3><p>application-peer1.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">1111</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:1112/eureka/</span></div></pre></td></tr></table></figure><p>application-peer2.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">1112</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:1111/eureka/</span></div></pre></td></tr></table></figure><h3 id="3-2-修改-DNS"><a href="#3-2-修改-DNS" class="headerlink" title="3.2 修改 DNS"></a>3.2 修改 DNS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 peer1</div><div class="line">127.0.0.1 peer2</div></pre></td></tr></table></figure><h3 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3 启动"></a>3.3 启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--spring.profiles.active=peer1</div><div class="line">--spring.profiles.active=peer2</div></pre></td></tr></table></figure><h3 id="3-4-问题"><a href="#3-4-问题" class="headerlink" title="3.4 问题"></a>3.4 问题</h3><ol><li><p>手动停止 peer2 后，peer1 显示 peer2 还是可用的？</p><p>Eureka 保护机制。</p></li><li><h4 id="EMERGENCY-EUREKA-MAY-BE-INCORRECTLY-CLAIMING-INSTANCES-ARE-UP-WHEN-THEY’RE-NOT-RENEWALS-ARE-LESSER-THAN-THRESHOLD-AND-HENCE-THE-INSTANCES-ARE-NOT-BEING-EXPIRED-JUST-TO-BE-SAFE"><a href="#EMERGENCY-EUREKA-MAY-BE-INCORRECTLY-CLAIMING-INSTANCES-ARE-UP-WHEN-THEY’RE-NOT-RENEWALS-ARE-LESSER-THAN-THRESHOLD-AND-HENCE-THE-INSTANCES-ARE-NOT-BEING-EXPIRED-JUST-TO-BE-SAFE" class="headerlink" title="EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE."></a>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</h4><p>同样是 Eureka 保护机制。开发环境关闭就行。</p></li></ol><h2 id="4-服务发现与消费"><a href="#4-服务发现与消费" class="headerlink" title="4. 服务发现与消费"></a>4. 服务发现与消费</h2><h3 id="4-1-启动注册中心和服务提供者"><a href="#4-1-启动注册中心和服务提供者" class="headerlink" title="4.1 启动注册中心和服务提供者"></a>4.1 启动注册中心和服务提供者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 启动注册中心高可用集群</div><div class="line">--spring.profiles.active=peer1</div><div class="line">--spring.profiles.active=peer2</div><div class="line"></div><div class="line"># 启动两份 hello-service</div><div class="line">--server.port=8001</div><div class="line">--server.port=8002</div></pre></td></tr></table></figure><h3 id="4-2-创建消费者服务"><a href="#4-2-创建消费者服务" class="headerlink" title="4.2 创建消费者服务"></a>4.2 创建消费者服务</h3><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="开启客户端负载均衡"><a href="#开启客户端负载均衡" class="headerlink" title="开启客户端负载均衡"></a>开启客户端负载均衡</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 开启客户端负载均衡</span></div><div class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="配置注册中心"><a href="#配置注册中心" class="headerlink" title="配置注册中心"></a>配置注册中心</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9001</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">ribbon-consumer</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:1111/eureka/</span></div></pre></td></tr></table></figure><h4 id="通过服务名称直接访问"><a href="#通过服务名称直接访问" class="headerlink" title="通过服务名称直接访问"></a>通过服务名称直接访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/ribbon-consumer"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloConsumer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/hello"</span>,</div><div class="line">                String.class).getBody();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9001/ribbon-consumer" target="_blank" rel="external">http://localhost:9001/ribbon-consumer</a></p><h2 id="5-Eureka-详解"><a href="#5-Eureka-详解" class="headerlink" title="5. Eureka 详解"></a>5. Eureka 详解</h2><h3 id="5-1-基础架构"><a href="#5-1-基础架构" class="headerlink" title="5.1 基础架构"></a>5.1 基础架构</h3><ul><li>服务注册中心</li><li>服务提供者</li><li>服务消费者</li></ul><h3 id="5-2-服务治理机制"><a href="#5-2-服务治理机制" class="headerlink" title="5.2 服务治理机制"></a>5.2 服务治理机制</h3><p><img src="../../images/eureka/服务治理机制.png" alt=""></p><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><ol><li><p>服务注册</p><p>服务提供者启动时会发送 REST 请求，将自己注册到 Eureka Server 上，同时带上了自己服务的一些元数据信息。</p></li><li><p>服务同步</p><p>由于注册中心之间互相注册，当服务提供者发送注册信息到一个注册中心时，他会将该请求转发给集群中其他注册中心，从而实现服务同步。</p></li><li><p>服务续约</p><p>服务提供者会维护一个心跳来持续告诉注册中心【我还活着】，防止注册中心的“剔除任务”将该服务实例剔除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 服务续约任务的调用间隔时间</div><div class="line">eureka.instance.lease-renewal-interval-in-seconds=30</div><div class="line"># 服务失效时间</div><div class="line">eureka.instalce.lease-expiration-duration-in-seconds=90</div></pre></td></tr></table></figure></li></ol><h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><ol><li><p>获取服务</p><p>启动服务消费者时，它会发送一个 REST 请求给注册中心来获取服务清单。为了性能考虑，注册中心会维护一份只读清单返回给客户端，该缓存清单每 30 秒更新一次。</p><p><code>eureka.client.registry-fetch-interval-second=30</code></p></li><li><p>服务调用</p><p>获取服务后，通过服务名可以获得具体提供服务的实例名和该实例的元数据信息，然后就可以决定调用哪个实例了。</p><p>对于访问实例的选择，Eureka 中有 Region 和 Zone 的概念，在进行服务调用时，优先访问处于同一个 Zone 中的服务提供方。</p></li><li><p>服务下线</p><p>在客户端程序中，当服务实例进行正常关闭操作时，它会触发一个服务下线的 Rest 请求给 Eureka Server，告诉注册中心下线了。</p></li></ol><h4 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h4><ol><li><p>失效剔除</p><p>有时服务不一定正常下线，可能由于内存溢出、网络故障等原因使得服务不能正常工作，而注册中心并未收到下线请求。所以注册中心会创建一个定时任务，默认每隔一段时间（60秒）将当前清单中超时（90秒）没有续约的服务剔除出去。</p></li><li><p>自我保护</p><p>注册中心会统计心跳失败的比例在 15 分钟之内是否低于 85%，如果出现低于的情况，注册中心会将当前的实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。</p><p>这样客户端很容易拿到已经不存在的实例，所以客户端必须要有容错机制，比如可以使用请求重试、断路器等机制。</p><p><code>euraka.server.enable-self-preservation=false</code></p></li></ol><h2 id="6-源码分析"><a href="#6-源码分析" class="headerlink" title="6. 源码分析"></a>6. 源码分析</h2><h2 id="7-配置详解"><a href="#7-配置详解" class="headerlink" title="7. 配置详解"></a>7. 配置详解</h2><h3 id="7-1-服务注册类配置"><a href="#7-1-服务注册类配置" class="headerlink" title="7.1 服务注册类配置"></a>7.1 服务注册类配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置类</span></div><div class="line">org.springframework.cloud.netflix.eureka.EurekaClientConfigBean</div><div class="line"><span class="comment">// 前缀</span></div><div class="line">eureka.client</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eureka.client.serviceUrl.defaultZone=http://&lt;username&gt;:&lt;password&gt;@localhost:1111/eureka</div><div class="line">eureka.client.enabled=ture</div></pre></td></tr></table></figure><p><img src="../../images/eureka/服务注册类配置.png" alt=""></p><h3 id="7-2-服务实例类配置"><a href="#7-2-服务实例类配置" class="headerlink" title="7.2 服务实例类配置"></a>7.2 服务实例类配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置类</span></div><div class="line">org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean</div><div class="line"><span class="comment">// 前缀</span></div><div class="line">eureka.instance</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 元数据配置</div><div class="line">eureka.instance.metadataMap.zone=shanghai</div><div class="line"># 实例名配置</div><div class="line">eureka.instance.instanceId=$&#123;spring.application.name&#125;:&#123;random.int&#125;</div><div class="line"># 端点配置</div><div class="line">eureka.instance.statusPageUrlPath=/appInfo</div><div class="line">eureka.instance.healthCheckUrlPath=/checkHealth</div></pre></td></tr></table></figure><p><img src="../../images/eureka/服务实例类配置.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Eureka 入门&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/categories/Spring-Cloud/"/>
    
    
      <category term="Eureka" scheme="http://yoursite.com/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Redis 学习(五)-面试常见问题</title>
    <link href="http://yoursite.com/2020-03-01-202002/Redis%20%E5%AD%A6%E4%B9%A0(%E4%BA%94)-%E9%9D%A2%E8%A7%86%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"/>
    <id>http://yoursite.com/2020-03-01-202002/Redis 学习(五)-面视常见问题.html</id>
    <published>2020-03-01T14:13:12.000Z</published>
    <updated>2020-03-01T14:23:39.785Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 面试常见问题（击穿、穿透、雪崩、分布式锁），Redis API 基本使用<br><a id="more"></a></p><h2 id="1-缓存击穿"><a href="#1-缓存击穿" class="headerlink" title="1. 缓存击穿"></a>1. 缓存击穿</h2><h3 id="1-1-什么是缓存击穿"><a href="#1-1-什么是缓存击穿" class="headerlink" title="1.1. 什么是缓存击穿"></a>1.1. 什么是缓存击穿</h3><p>当系统发生高并发访问某个 key，某个 key 刚好过期，导致并发访问数据库。</p><h3 id="1-2-如何解决"><a href="#1-2-如何解决" class="headerlink" title="1.2 如何解决"></a>1.2 如何解决</h3><p>客户端去值时，如果没有取到在访问数据库之前，必须先获取锁才能访问数据库。</p><p>假设有 1000 个获取 key1 的请求，Redis 中现在没有这个 key。由于 Redis 是单进程单实例的，所以这 1000 个请求肯定是排队请求的。那么我么可以指定请求流程如下：</p><ol><li>get key1 // 第一个人这里肯定取到的是 null</li><li>setnx lockkey // 获取锁</li><li>如果取到了锁，访问 DB；如果没有取到 sleep 一段时间，然后重新执行第一步</li></ol><p>问题：凡是涉及到锁，都有一个死锁问题。如果第一个人获取锁后挂了，导致后边的请求一直在等待。</p><p>答案：给锁设置一个过期时间</p><p>问题：第一个人没有挂，但是去 DB 取数据时阻塞了，导致锁超时了，从而导致后边越来越多的请求访问数据库</p><p>答案：去 DB 取数据时可以用多线程，一个线程取 DB，一个线程监控是否取回来了，如果没有更新锁的过期时间</p><h2 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2. 缓存穿透"></a>2. 缓存穿透</h2><h3 id="2-1-什么是缓存穿透"><a href="#2-1-什么是缓存穿透" class="headerlink" title="2.1 什么是缓存穿透"></a>2.1 什么是缓存穿透</h3><p>客户端查询的是你系统根本不存在的数据，所以 Redis 中也肯定没有这些数据，导致压力全部穿透到DB.</p><h3 id="2-2-如何解决"><a href="#2-2-如何解决" class="headerlink" title="2.2 如何解决"></a>2.2 如何解决</h3><p>布隆过滤器或者布谷鸟过滤器</p><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h2><h3 id="3-1-什么是缓存雪崩"><a href="#3-1-什么是缓存雪崩" class="headerlink" title="3.1 什么是缓存雪崩"></a>3.1 什么是缓存雪崩</h3><p>大量的 key 同时失效，造成大量的访问到达 DB。</p><h3 id="3-2-如何解决"><a href="#3-2-如何解决" class="headerlink" title="3.2 如何解决"></a>3.2 如何解决</h3><ol><li>如果数据和时点性无关：设置随机过期时间</li><li>如果数据和时点性有关：业务层做适当的延迟；<strong>强依赖缓存击穿方案？</strong></li></ol><h2 id="4-分布式锁"><a href="#4-分布式锁" class="headerlink" title="4. 分布式锁"></a>4. 分布式锁</h2><ol><li>setnx</li><li>设置过期时间</li><li>多线程（守护线程）延长过期时间</li></ol><p>但是用 zookeeper 做分布式锁才是最好的，虽然 zookeeper 肯定没有 redis 快，但是既然用到分布式锁了，一般效率的要求没有那么高，主要关注的是准确性。</p><h2 id="5-Redis-API"><a href="#5-Redis-API" class="headerlink" title="5. Redis API"></a>5. Redis API</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 获取所有配置</div><div class="line">config get *</div><div class="line">-- 设置临时配置</div><div class="line">config <span class="built_in">set</span> protected-mode no</div><div class="line">-- 需要修改配置</div><div class="line"><span class="built_in">bind</span> 0.0.0.0</div></pre></td></tr></table></figure><p>Jedis 不是线程安全的。目前 Spring 默认 lettuce。</p><h3 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 自定义模板</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTemplate</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">ooxx</span><span class="params">(RedisConnectionFactory fc)</span> </span>&#123;</div><div class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate(fc);</div><div class="line">        stringRedisTemplate.setHashValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class));</div><div class="line">        <span class="keyword">return</span>  stringRedisTemplate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="API-基本使用"><a href="#API-基本使用" class="headerlink" title="API 基本使用"></a>API 基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.MessageListener;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.HashOperations;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.hash.Jackson2HashMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRedis</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RedisTemplate redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="comment">//@Qualifier("ooxx")</span></div><div class="line">    StringRedisTemplate stringRedisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ObjectMapper objectMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 高阶 API</span></div><div class="line">        redisTemplate.opsForValue().set(<span class="string">"key1"</span>,<span class="string">"aaaaaa"</span>);</div><div class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">"key1"</span>));</div><div class="line"></div><div class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"key2"</span>,<span class="string">"bbbbb"</span>);</div><div class="line">        System.out.println(stringRedisTemplate.opsForValue().get(<span class="string">"key2"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// 低阶 API</span></div><div class="line">        RedisConnection conn = redisTemplate.getConnectionFactory().getConnection();</div><div class="line">        conn.set(<span class="string">"key3"</span>.getBytes(),<span class="string">"cccc"</span>.getBytes());</div><div class="line">        System.out.println(<span class="keyword">new</span> String(conn.get(<span class="string">"key3"</span>.getBytes())));</div><div class="line"></div><div class="line">        <span class="comment">// Hash 类型</span></div><div class="line">        HashOperations&lt;String, Object, Object&gt; hash = stringRedisTemplate.opsForHash();</div><div class="line">        hash.put(<span class="string">"key4"</span>,<span class="string">"name"</span>,<span class="string">"lixianfu"</span>);</div><div class="line">        hash.put(<span class="string">"key4"</span>,<span class="string">"age"</span>,<span class="string">"22"</span>);</div><div class="line">        System.out.println(hash.entries(<span class="string">"key4"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// 直接处理对象</span></div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        p.setName(<span class="string">"lixianfu"</span>);</div><div class="line">        p.setAge(<span class="number">23</span>);</div><div class="line"></div><div class="line">        Jackson2HashMapper jm = <span class="keyword">new</span> Jackson2HashMapper(objectMapper, <span class="keyword">false</span>);</div><div class="line">        stringRedisTemplate.opsForHash().putAll(<span class="string">"key5"</span>,jm.toHash(p));</div><div class="line"></div><div class="line">        Map map = stringRedisTemplate.opsForHash().entries(<span class="string">"key5"</span>);</div><div class="line">        Person person = objectMapper.convertValue(map, Person.class);</div><div class="line">        System.out.println(person.getName());</div><div class="line"></div><div class="line">        <span class="comment">// 发布消息</span></div><div class="line">        stringRedisTemplate.convertAndSend(<span class="string">"ooxx"</span>,<span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 订阅消息</span></div><div class="line">        RedisConnection connection = stringRedisTemplate.getConnectionFactory().getConnection();</div><div class="line">        connection.subscribe(<span class="keyword">new</span> MessageListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="keyword">new</span> String(message.getBody()));</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"ooxx"</span>.getBytes());</div><div class="line"></div><div class="line">        <span class="comment">// 防止主线程退出</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p><a href="https://blog.csdn.net/crisis_hiding/article/details/81490158" target="_blank" rel="external">https://blog.csdn.net/crisis_hiding/article/details/81490158</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 面试常见问题（击穿、穿透、雪崩、分布式锁），Redis API 基本使用&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020-03-01-202002/Redis%E5%AD%A6%E4%B9%A0(%E5%85%AD)-%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://yoursite.com/2020-03-01-202002/Redis学习(六)-配置详解.html</id>
    <published>2020-03-01T13:50:32.884Z</published>
    <updated>2020-03-01T13:50:32.884Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>高并发负载均衡</title>
    <link href="http://yoursite.com/2020-02-28-202002/%E9%AB%98%E5%B9%B6%E5%8F%91%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html"/>
    <id>http://yoursite.com/2020-02-28-202002/高并发负载均衡.html</id>
    <published>2020-02-28T14:13:12.000Z</published>
    <updated>2020-02-29T06:32:11.784Z</updated>
    
    <content type="html"><![CDATA[<p>简要分析网络协议原理；LVS 三种模型原理；LVS-DR 模型搭建。</p><a id="more"></a><h2 id="1-网络分层模型-OSI"><a href="#1-网络分层模型-OSI" class="headerlink" title="1. 网络分层模型-OSI"></a>1. 网络分层模型-OSI</h2><h3 id="1-1-为什么要分层？"><a href="#1-1-为什么要分层？" class="headerlink" title="1.1 为什么要分层？"></a>1.1 为什么要分层？</h3><ol><li>计算机是软件工程学，软件工程学强调<strong>分层解耦</strong>，以后可以针对不同的层进行修改和优化。</li><li>有利于网络设备厂商生产出标准的网络设备。</li></ol><h3 id="1-2-OSI-7-层参考模型"><a href="#1-2-OSI-7-层参考模型" class="headerlink" title="1.2 OSI 7 层参考模型"></a>1.2 OSI 7 层参考模型</h3><p><img src="../../images/hclb/OSI七层模型.png" alt=""></p><h2 id="2-TCP-IP-协议"><a href="#2-TCP-IP-协议" class="headerlink" title="2. TCP/IP 协议"></a>2. TCP/IP 协议</h2><p>TCP/IP 协议，相对于参考模型是一个具体的方案。一共四层：应用层、传输控制层、网络层、链路层。</p><p><img src="../../images/hclb/TCPIP协议.png" alt=""></p><h3 id="2-1-应用层："><a href="#2-1-应用层：" class="headerlink" title="2.1 应用层："></a>2.1 应用层：</h3><p>包含的协议有：http 协议、ssh 协议、smtp 协议（发邮件）</p><p>什么协议？协议就是指规范和标准</p><p>通过访问百度主页演示应用层协议：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 0:输入 1:输出 2:报错</div><div class="line"><span class="built_in">cd</span> /proc/$$/fd</div><div class="line"><span class="built_in">exec</span> 8&lt;&gt; /dev/tcp/www.baidu.com/80</div><div class="line">// 发现了一个 socket，socket 就代表通讯</div><div class="line">// 表示已经和百度建立了链接</div><div class="line">ll</div><div class="line">// 根据应用层协议进行通讯</div><div class="line">// 命令重定向，&gt; 表示命令重定向输出</div><div class="line">// 重定向后面加 &amp; 表示后面不是文件，而是文件描述符</div><div class="line">// -e 选项使得 \n 变为换行符</div><div class="line">// GET / HTTP/1.0\n 就是 http 协议规定的 request 请求格式</div><div class="line"><span class="built_in">echo</span> -e <span class="string">'GET / HTTP/1.0\n'</span> &gt;&amp; 8</div><div class="line">// cat 读文件。从 8 重定向到 0，0 是标准输出</div><div class="line">cat 0&lt;&amp; 8</div><div class="line">// 关掉 8</div><div class="line"><span class="built_in">exec</span> 8&lt;&amp; -</div></pre></td></tr></table></figure><p>上面过程其实就是模拟了浏览器帮我们做的事情。在浏览器我们只需要输入地址回车，他会自动帮我门封装协议。具体可从开发者工具 NetWork 查看。</p><p>应用层之下的层次，都有计算机内核实现，内核提供了一套完整的通讯方法，浏览器或者 Tomcat 容器直接调用即可。</p><h3 id="2-2-传输控制层"><a href="#2-2-传输控制层" class="headerlink" title="2.2 传输控制层"></a>2.2 传输控制层</h3><p>包含的协议有：TCP 协议（面向连接的可靠的协议），UDP 协议（和 TCP 协议相反）。</p><h4 id="2-2-1-三次握手"><a href="#2-2-1-三次握手" class="headerlink" title="2.2.1 三次握手"></a>2.2.1 三次握手</h4><p><img src="../../images/hclb/TCP连接三次握手.png" alt=""></p><p>第一次握手：客户端发送 SYN 包到服务器，并进入 SYN_SENT 状态，等待服务器确认。</p><p>第二次握手：服务器收到 SYN 包，必须确认客户的 SYN，同时自己也发送一个 SYN 包，即SYN+ACK包，此时服务器进入 SYN_RECV 状态；</p><p>第三次握手：客户端收到 SYN+ACK 包，向服务器发送确认包 ACK，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，双方开辟相关资源，完成三次握手。</p><p>三次数据包走完之后，双方才会在内存开辟线程建立对象和文件描述符等资源。三次握手只是在建立连接，没有应用层数据的事情。</p><h4 id="2-2-2-四次分手"><a href="#2-2-2-四次分手" class="headerlink" title="2.2.2 四次分手"></a>2.2.2 四次分手</h4><p><img src="../../images/hclb/TCP连接四次分手.png" alt=""></p><p>1）客户端进程发出连接释放报文（FIN），并且停止发送数据，此时，客户端进入 FIN-WAIT-1状态。<br>2）服务器收到连接释放报文，发出确认（ACK）报文，服务端就进入了 CLOSE-WAIT 状态。TCP服务器通知高层的应用进程，客户端向服务器方向的连接就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。<br>3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2 状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。<br>4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文（FIN），由于在半关闭状态，服务器很可能又发送了一些数据，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。<br>5）客户端收到服务器的连接释放报文后，必须发出确认（ACK），此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。<br>6）服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。</p><p><strong>三次握手 -&gt; 传输数据 -&gt; 四次分手</strong>，这个一个传输的最小粒度。比如服务端负载均衡有多台服务器在处理客户端请求，在三次握手的过程中，客户端不能向服务端 A 发送连接请求，然后给服务 B 回复收到了。</p><p>传输的过程和握手的过程是可以连连的。即第三次握手时，客户端把数据一起发过去，减少包数量以提高效率。</p><h4 id="2-2-3-验证三次握手和四次分手"><a href="#2-2-3-验证三次握手和四次分手" class="headerlink" title="2.2.3 验证三次握手和四次分手"></a>2.2.3 验证三次握手和四次分手</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 查看端口监听情况</div><div class="line">// a：显示所有</div><div class="line">// n：ip 形式显示</div><div class="line">// u：udp t：tcp</div><div class="line">// p：pid</div><div class="line">netstat -anutp | grep 80</div><div class="line">// 安装抓包程序</div><div class="line">yum install tcpdump</div><div class="line">// 抓取 eth0 网卡，主机不包含（100.100.30.25）并且端口为80 的信息</div><div class="line">tcpdump -nn -i eth0 host ! 100.100.30.25 and port 80</div><div class="line">// 对百度建立三次握手连接，发送协议，返回数据，然后关闭连接</div><div class="line">curl www.baidu.com</div></pre></td></tr></table></figure><p>抓包结果：</p><p><img src="../../images/hclb/传输过程抓包.png" alt=""></p><p>[P.] 中的 P 表示数据已经传输完成，不用缓冲 了，拿到数据赶紧去处理。可以理解为传输完成，立即处理的意思。</p><p>从三次握手到传输数据到四次分手应该是一个粒度，不应被以后的技术给分开，比如负载均衡，你不能三次握手在 A 主机，然后去 B 主机传输数据。</p><h4 id="2-2-4-追踪-TCP-通讯的详细过程"><a href="#2-2-4-追踪-TCP-通讯的详细过程" class="headerlink" title="2.2.4 追踪 TCP 通讯的详细过程"></a>2.2.4 追踪 TCP 通讯的详细过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 一个模拟客户端服务端程序 netcat</div><div class="line">yum install nc</div><div class="line">// 模拟服务端，占用 8080 端口</div><div class="line">nc -l 8080</div><div class="line">// 发现这时候 fd 目录下已经有一个 socket 了。这是服务端监听的 socket</div><div class="line">ps -ef|grep nc</div><div class="line">// 0：标准输入 1：标准输出 2：报错输出</div><div class="line"><span class="built_in">cd</span> /proc/pid/fd</div><div class="line">// 连接服务端</div><div class="line">nc localhost 8080</div><div class="line">// 客户端连接后，服务端进程下会增加一个 socket 连接，表示和客户端的连接</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 追踪程序的系统调用</div><div class="line">yum install strace</div><div class="line">mkdir ooxx</div><div class="line"><span class="built_in">cd</span> ooxx</div><div class="line">// 追踪 nc -l 8080 对系统的调用</div><div class="line">strace -ff -o out nc -l 8080</div><div class="line">// 发现目录下有一个 out.15824 文件，这个就是追踪的输出文件</div><div class="line">// 如何学习系统调用</div><div class="line">yum install man man-pages</div><div class="line">man 2 socket</div><div class="line">// 实时监控文件</div><div class="line">tail -f out.15824</div><div class="line">// 然后客户端连接，查看 out.15824 的变化</div></pre></td></tr></table></figure><p>传输控制层以下，每层都有协议，每层都有表格，怎么看？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// n:IP地址不显示逻辑名称</div><div class="line">// a:显示所有</div><div class="line">// t:TCP</div><div class="line">// p:显示 pid</div><div class="line">netstat -natp</div></pre></td></tr></table></figure><h3 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h3><p>包含的协议：IP 协议，ARP 协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 查看网络信息</div><div class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0</div><div class="line">// 路由表</div><div class="line">route -n</div><div class="line">ping www.baidu.com</div></pre></td></tr></table></figure><p><strong>下一跳机制</strong>，每个互联网设备不需要存全网的数据，只需要存他下一个节点的数据。</p><p>ping 命令是怎么把数据包发到百度的？或者说怎么找到百度的？</p><p>将百度的 ip 和路由表 Genmask <strong>按位与</strong>之后，看结果是否和 Destination 是否匹配，匹配到的条目的 Gateway 就是下一跳的地址。</p><p><strong>Gateway</strong> 0.0.0.0 表示目标设备和请求的路由已经在一个局域网中了，不需要下一跳了，直接通过<strong>交换机</strong>转发数据包，直接通讯即可。只要网与网之间才需要路由器，才需要下一跳。</p><h3 id="2-4-链路层"><a href="#2-4-链路层" class="headerlink" title="2.4 链路层"></a>2.4 链路层</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 查看网关和 MAC 地址的映射</div><div class="line">arp -a</div></pre></td></tr></table></figure><p>DNS 会解析域名和 IP 地址的映射，ARP 会解释 IP 地址和网卡硬件地址的映射。</p><p>DNS 是全网的逻辑名称到 IP 地址，ARP 是同一局域网内的。</p><p>链路层会包装三个地址，最外层是目标路由的 mac 地址，里边是目标地址，再里边是端口号。</p><p>结论：TCP/IP 协议基于下一跳机制，IP 是端点间，MAC 地址是节点间。</p><h2 id="3-高并发"><a href="#3-高并发" class="headerlink" title="3. 高并发"></a>3. 高并发</h2><h3 id="3-1-高并发的引入"><a href="#3-1-高并发的引入" class="headerlink" title="3.1 高并发的引入"></a>3.1 高并发的引入</h3><p>中国入网用户 2.4 亿，除了一些做定向人群服务的公司，绝大多数公司的产品都是希望用户越多越好，赚钱的多少和用户数有极大的关系，所以公司会花费大量的精力和金钱来做<strong>营销</strong>，所以绝大多数公司的产品都会或多或少的面临高并发的问题。</p><h3 id="3-2-如何解决高并发？"><a href="#3-2-如何解决高并发？" class="headerlink" title="3.2 如何解决高并发？"></a>3.2 如何解决高并发？</h3><p>问题：Tomcat 为什么慢？</p><p>答案：1. 通讯层面，Tomcat 是七层的；2. Tomcat 是 Java 开发，基于 JVM，用户态内存态切换消耗性能。</p><p>提供一个<strong>四层的负载均衡服务器</strong>，因为到四层才知道端口号，数据包级别转发，不会和客户端握手，所以速度更快。后端服务是镜像的。</p><p>问题：后端服务是镜像的如何处理？</p><h2 id="4-LVS"><a href="#4-LVS" class="headerlink" title="4. LVS"></a>4. LVS</h2><h3 id="4-1-NAT-路由器"><a href="#4-1-NAT-路由器" class="headerlink" title="4.1 NAT-路由器"></a>4.1 NAT-路由器</h3><p>路由器中使用了 NAT 模式，路由器会有两个 IP，一个私有 IP，一个公网 IP，公网 IP 就是运营商分的那个 IP，私网 IP 是不会出现在互联网上的。通过路由器上网时，公网 IP、私网 IP 会互相转换。</p><p><img src="../../images/hclb/NAT-路由器.png" alt=""></p><h3 id="4-2-LVS-NAT-模式"><a href="#4-2-LVS-NAT-模式" class="headerlink" title="4.2 LVS-NAT 模式"></a>4.2 LVS-NAT 模式</h3><p><img src="../../images/hclb/LVS-NAT.png" alt=""></p><p>流程：</p><ol><li>客户端请求负载均衡器（CIP-&gt;VIP）</li><li>负载均衡器通过 D-NAT 替换请求目标地址（CIP-&gt;RIP）</li><li>服务端请求负载均衡器（RIP-&gt;CIP）。为什么不是 RIP-&gt;VIP？因为 RS 实际上还是和 Client 建立的连接，源 IP 地址还是 CIP，负载均衡服务器相当于路由器。</li><li>负载均衡器通过 D-NAT 替换请求源地址（VIP-&gt;CIP）</li></ol><p>缺点：</p><ol><li>请求是非对称的，请求的数据可能较小，但是返回的数据量较大，全部都要经过 LVS，LVS 的带宽成为瓶颈。</li><li>消耗算力</li></ol><h3 id="4-3-LVS-DR-模式"><a href="#4-3-LVS-DR-模式" class="headerlink" title="4.3 LVS-DR 模式"></a>4.3 LVS-DR 模式</h3><p><img src="../../images/hclb/LVS-DR.png" alt=""></p><p>流程：</p><ol><li>客户端请求负载均衡器（CIP-&gt;VIP）</li><li>负载均衡器修改 MAC 地址，让数据包可以跳转到下一跳，这里注意 RS 服务器需要做特殊的修改，让该 RS 服务器隐藏 VIP，对外隐藏对内可见，所以负载均衡器修改 MAC 地址后，跳转到该 RS，RS 发现 MAC 是自己的，目标 IP 也对的上（都是 VIP），所以数据包就合法接收了。</li><li>服务端直接返回响应数据到客户端（VIP-&gt;CIP）</li></ol><p>缺点：</p><ol><li>要求负载均衡器和 RS 需要在同一局域网内，因为是基于 2 层的 MAC 修改，如果没在同一局域网内，即只用一跳跳不过去，那这个修改后的数据包肯定发不出去 了，因为下一条中根本没有该 MAC 服务器。</li></ol><p>优点：速度快、成本低</p><h3 id="4-4-LVS-TUN-模式"><a href="#4-4-LVS-TUN-模式" class="headerlink" title="4.4 LVS-TUN 模式"></a>4.4 LVS-TUN 模式</h3><p><img src="../../images/hclb/LVS-TUN.png" alt=""></p><p>流程：</p><ol><li>客户端请求负载均衡器（CIP-&gt;VIP）</li><li>负载均衡器请求 RIP（DIP-&gt;RIP），但是数据包中数据是包裹的 CIP-&gt;VIP</li><li>服务端直接返回响应数据到客户端（VIP-&gt;CIP）</li></ol><p>优点：负载均衡服务器和 RealServer 没有位置约束。</p><h3 id="4-5-隐藏-VIP"><a href="#4-5-隐藏-VIP" class="headerlink" title="4.5 隐藏 VIP"></a>4.5 隐藏 VIP</h3><p>LVS 的 DR 模式和 TUN 模式都需要隐藏 VIP，让 VIP 在 RS 中对内可见对外不可见。</p><ol><li>修改 arp_ignore：定义接收到 ARP 请求时的响应级别<ol><li>0：只要本地配置的有相应地址，就给予响应</li><li>1：仅在请求目标（MAC）地址时才给予响应</li></ol></li><li>arp_announce：定义将自己地址向外通告时的通告级别<ol><li>0：将本地任何接口上的任何地址向外通告</li><li>1：试图仅向目标网络通告与其网络匹配的地址</li><li>2：仅向与本地接口上地址匹配的网络进行通告</li></ol></li></ol><p>一个网卡可以配置多个 IP，所以可以把 VIP 配置在内部虚拟网卡 lo 上。</p><h2 id="5-LVS-DR-模型搭建"><a href="#5-LVS-DR-模型搭建" class="headerlink" title="5. LVS-DR 模型搭建"></a>5. LVS-DR 模型搭建</h2><p>问题：负载均衡服务器如何知道每个 RS 有多少连接？</p><p>答案：偷窥握手和分手的数据包</p><p><img src="../../images/hclb/LVS-实践.png" alt=""></p><h3 id="5-1-配置-VIP"><a href="#5-1-配置-VIP" class="headerlink" title="5.1 配置 VIP"></a>5.1 配置 VIP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// node01</div><div class="line">ifconfig eth0:2 192.168.238.100/24</div><div class="line">-- 撤销</div><div class="line">ifconfig eth0:2 down</div><div class="line"></div><div class="line">// node02/node03</div><div class="line">-- 修改内核配置 arp</div><div class="line"><span class="built_in">cd</span> /proc/sys/net/ipv4/conf/</div><div class="line"><span class="built_in">cd</span> eth0</div><div class="line">-- 重定向赋值</div><div class="line"><span class="built_in">echo</span> 1 &gt; arp_ignore</div><div class="line"><span class="built_in">echo</span> 2 &gt; arp_announce</div><div class="line"><span class="built_in">cd</span> ../all</div><div class="line"><span class="built_in">echo</span> 1 &gt; arp_ignore</div><div class="line"><span class="built_in">echo</span> 2 &gt; arp_announce</div><div class="line">-- 配置隐藏的 VIP</div><div class="line">ifconfig lo:2 192.168.238.100 netmask 255.255.255.255</div></pre></td></tr></table></figure><h3 id="5-2-安装-RS-中服务"><a href="#5-2-安装-RS-中服务" class="headerlink" title="5.2 安装 RS 中服务"></a>5.2 安装 RS 中服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// node02/node03</div><div class="line">yum install httpd -y</div><div class="line">service httpd start</div><div class="line">-- 创建主页</div><div class="line">vi /var/www/html/index.html</div><div class="line">from 192.168.238.68/70</div><div class="line">-- 关闭防火墙</div><div class="line">service iptables status</div><div class="line">service iptables stop</div><div class="line">-- 浏览器访问验证服务是否正常</div><div class="line">http://192.168.238.68/</div><div class="line">http://192.168.238.70/</div></pre></td></tr></table></figure><h3 id="5-3-安装配置-LVS-工具"><a href="#5-3-安装配置-LVS-工具" class="headerlink" title="5.3 安装配置 LVS 工具"></a>5.3 安装配置 LVS 工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">-- node01</div><div class="line">yum install ipvsadm -y</div><div class="line">-- 进包规则(轮询调度)</div><div class="line">ipvsadm -A -t 192.168.238.100:80 -s rr</div><div class="line">-- 查看规则</div><div class="line">ipvsadm -ln </div><div class="line">-- 负载规则</div><div class="line">ipvsadm -a -t 192.168.238.100:80 -r 192.168.238.68 -g -w 1</div><div class="line">ipvsadm -a -t 192.168.238.100:80 -r 192.168.238.70 -g -w 1</div><div class="line">-- 浏览器访问验证</div><div class="line">http://192.168.238.100</div><div class="line">-- 看不到 80 端口的 socket 连接。说明 LVS 服务器不会和客户端握手</div><div class="line">netstat -natp </div><div class="line">-- 查看偷窥记录表</div><div class="line">ipvsadm -lnc</div><div class="line">FIN_WAIT：连接过，偷窥了所有包，正常</div><div class="line">SYN_RECE：基本上 lvs 都记录了，证明 lvs 没事，是后边网络层出问题了</div><div class="line"></div><div class="line">-- node02，删除 VIP，则在握手时就卡住了</div><div class="line">ifconfig lo:2 down</div><div class="line">-- 记录的是 SYN_RECE</div><div class="line">ipvsadm -lnc </div><div class="line">-- 重新加上，正常了</div><div class="line">ifconfig lo:2 192.168.238.100 netmask 255.255.255.255</div><div class="line"></div><div class="line">-- node02/03；可以看到很多 socket 连接</div><div class="line">netstat -natp</div></pre></td></tr></table></figure><h2 id="6-LVS-DR-keepalived-模型搭建"><a href="#6-LVS-DR-keepalived-模型搭建" class="headerlink" title="6. LVS-DR-keepalived 模型搭建"></a>6. LVS-DR-keepalived 模型搭建</h2><h3 id="6-1-问题引入和解决思路"><a href="#6-1-问题引入和解决思路" class="headerlink" title="6.1 问题引入和解决思路"></a>6.1 问题引入和解决思路</h3><p>前边搭建的服务的问题：</p><ol><li>如果 LVS 服务器挂了，虽然后边的 RS 都正常，整个系统也访问不了，业务下线，<strong>单点故障</strong>。</li><li>如果一台 RS 挂了，会导致负载到该台 RS 的用户访问失败，其他用户访问成功。</li></ol><p>解决：</p><ol><li>LVS <strong>单点故障</strong>问题：一变多（主备形式、主主形式），由于 VIP 原因，这里用主备形式来解决。<ol><li>备机如何知道主机挂了？（<strong>方向性</strong>）<ol><li>备机轮询访问主机，这样主机压力较大</li><li>主机定时广播自己状态</li></ol></li><li>主机挂了后，哪个备机升级为主机？（<strong>效率性</strong>）<ol><li>每个备机设置权重值，权重高的升级</li></ol></li></ol></li><li>RS 挂了的问题<ol><li>如何确定 RS 挂了？<ol><li>ping 是不对的，ping 是作用于网络层，只能确定网络是否正常，TCP 握手是否正常都无法确定。</li><li>验证应用层 http 协议，即发请求，判断返回是否是 200</li></ol></li></ol></li></ol><p>keepalived：一个通用的应用层程序，代替人自动运维，解决单点故障，实现HA。</p><ol><li>监控自己的 LVS 服务</li><li>Master 通告自己还活着，Backup 监听 Master 状态，Master 挂了，一堆备机推选出一个新的 Master。</li><li>配置 VIP，添加 ipvs 模块配置，写入 keepalived 配置文件，启动自动配置</li><li>对 RS 做健康检查</li></ol><p>nginx 可以作为公司的负载均衡来用，nginx 本身成为了单点故障，也可以用 keepalived 来解决。</p><h3 id="6-2-模型搭建"><a href="#6-2-模型搭建" class="headerlink" title="6.2 模型搭建"></a>6.2 模型搭建</h3><p><img src="../../images/hclb/LVS-HA实践.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">-- 清除 node01 lvs 配置</div><div class="line">ipvsadm -C</div><div class="line">ipvsadm -ln</div><div class="line">-- 卸载 vip</div><div class="line">ifconfig eth0:2 down</div><div class="line">-- node01 node4</div><div class="line">-- 安装 keepalived</div><div class="line">yum install keepalived ipvsadm -y</div><div class="line">-- 配置 keeplived</div><div class="line"><span class="built_in">cd</span> /etc/keepalived</div><div class="line">cp keepalived.conf keepalived.conf.bak</div><div class="line">vi keepalived.conf</div><div class="line">-- 配置 node04</div><div class="line">scp ./keepalived.conf  root@192.168.238.72:`<span class="built_in">pwd</span>`</div><div class="line">-- 启动 node01 keepalived</div><div class="line">service keepalived start</div><div class="line">ifconfig/ipvsadm -ln 查看发现配置均自动完成</div><div class="line"></div><div class="line">-- 启动 node04 keepalived</div><div class="line">service keepalived start</div><div class="line">ifconfig/ipvsadm -ln 查看发现 IP 没有配置，但是 lvs 已经配置</div><div class="line"></div><div class="line">-- 验证 LVS HA</div><div class="line">-- 将 node01 物理网卡 down 掉</div><div class="line">ifconfig eth0 down</div><div class="line">-- node04 发现 ip 配置好了</div><div class="line">ifconfig</div><div class="line">-- 将 node01 物理网卡修复</div><div class="line">ifconfig eth0 up</div><div class="line">-- node04 发现 ip 卸载了</div><div class="line">ifconfig</div><div class="line"></div><div class="line">-- 验证 RS HA</div><div class="line">-- 关闭 node02 服务</div><div class="line">service httpd stop</div><div class="line">-- 只有 node03 的负载</div><div class="line">ipvsadm -ln </div><div class="line"></div><div class="line">-- 安装帮助文档</div><div class="line">yum install man</div><div class="line">man 5 keepalived.conf</div></pre></td></tr></table></figure><p>keepliaved 配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">! Configuration File <span class="keyword">for</span> keepalived</div><div class="line"><span class="comment"># 全局配置</span></div><div class="line">global_defs &#123;</div><div class="line">   <span class="comment"># 邮件提醒</span></div><div class="line">   notification_email &#123;</div><div class="line">     acassen@firewall.loc</div><div class="line">     failover@firewall.loc</div><div class="line">     sysadmin@firewall.loc</div><div class="line">   &#125;</div><div class="line">   notification_email_from Alexandre.Cassen@firewall.loc</div><div class="line">   smtp_server 192.168.200.1</div><div class="line">   smtp_connect_timeout 30</div><div class="line">   router_id LVS_DEVEL</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vrrp：虚拟路由冗余协议</span></div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line"><span class="comment"># 主</span></div><div class="line">    state MASTER <span class="comment"># 备机修改为 BADKUP</span></div><div class="line">    <span class="comment"># 网卡，因为一台服务器可能有多个网卡，用于不同的网络服务</span></div><div class="line">    interface eth0</div><div class="line">    virtual_router_id 51</div><div class="line">    <span class="comment"># 权重</span></div><div class="line">    priority 100 <span class="comment"># 备机权重改小</span></div><div class="line">    advert_int 1</div><div class="line">    authentication &#123;</div><div class="line">        auth_type PASS</div><div class="line">        auth_pass 1111</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 相当于配置 VIP</span></div><div class="line">    virtual_ipaddress &#123;</div><div class="line">        192.168.238.100/24 dev eth0 label eth0:2</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 相当于配置 A</span></div><div class="line">virtual_server 192.168.238.100 80 &#123;</div><div class="line">    delay_loop 6</div><div class="line">    lb_algo rr</div><div class="line">    lb_kind DR</div><div class="line">    nat_mask 255.255.255.0</div><div class="line">    <span class="comment"># 持久化超时时间，在超时时间内，同一用户访问相同资源，负载到同一台 RS，提升效率</span></div><div class="line">    persistence_timeout 0</div><div class="line">    protocol TCP</div><div class="line"></div><div class="line"><span class="comment"># 相当于配置 a</span></div><div class="line">    real_server 192.168.238.68 80 &#123;</div><div class="line">        weight 1</div><div class="line">        <span class="comment"># 配置 RS 健康检查</span></div><div class="line">        HTTP_GET &#123;</div><div class="line">            url &#123;</div><div class="line">              path /</div><div class="line">              status_code 200</div><div class="line">            &#125;</div><div class="line">            connect_timeout 3</div><div class="line">            nb_get_retry 3</div><div class="line">            delay_before_retry 3</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    real_server 192.168.238.70 80 &#123;</div><div class="line">        weight 1</div><div class="line">        HTTP_GET &#123;</div><div class="line">            url &#123;</div><div class="line">              path /</div><div class="line">              status_code 200</div><div class="line">            &#125;</div><div class="line">            connect_timeout 3</div><div class="line">            nb_get_retry 3</div><div class="line">            delay_before_retry 3</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-3-keepalived-本身挂了如何处理？"><a href="#6-3-keepalived-本身挂了如何处理？" class="headerlink" title="6.3 keepalived 本身挂了如何处理？"></a>6.3 keepalived 本身挂了如何处理？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep keep</div><div class="line">-- 强制杀死 keepalived 的三个进程，还没来得及回收资源</div><div class="line"><span class="built_in">kill</span> -9 xxxx/xxxx/xxxx</div><div class="line">ifconfig/ipvsadm 配置都没有删除</div><div class="line">-- node04：收不到 node01 的健康广播，认为 node01 挂了，自己变为 Master</div></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/onepixel/p/7092302.html" target="_blank" rel="external">TCP/IP 协议</a></li><li><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="external">三次握手四次分手</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简要分析网络协议原理；LVS 三种模型原理；LVS-DR 模型搭建。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LVS" scheme="http://yoursite.com/categories/LVS/"/>
    
    
      <category term="LVS" scheme="http://yoursite.com/tags/LVS/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Typecho+Tengine 搭建个人主页</title>
    <link href="http://yoursite.com/2020-02-28-202002/Typecho+Tengine%E5%BB%BA%E7%AB%99.html"/>
    <id>http://yoursite.com/2020-02-28-202002/Typecho+Tengine建站.html</id>
    <published>2020-02-28T14:13:12.000Z</published>
    <updated>2020-02-28T14:22:00.002Z</updated>
    
    <content type="html"><![CDATA[<p>使用阿里云 ECS、Typecho、Tengine 从零开始搭建个人主页。</p><a id="more"></a><ol><li><p>安装 Mysql</p></li><li><p>安装 PHP</p><ul><li>如果启动 php-fpm，如何设置自动启动</li><li>配置 nginx 支持 php</li></ul></li><li><p>安装 Tengine </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">listen       80;</div><div class="line">server_name  127.0.0.1;</div><div class="line">location / &#123;</div><div class="line">root   html;</div><div class="line">index  index.php index.html index.htm index.php;</div><div class="line">&#125;</div><div class="line">location ~ .*\.php(\/.*)*$ &#123;</div><div class="line">root /home/typecho; <span class="comment">#指定php的根目录</span></div><div class="line">fastcgi_pass 127.0.0.1:9000;<span class="comment">#php-fpm的默认端口是9000</span></div><div class="line">fastcgi_index index.php;</div><div class="line">fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">include /usr/<span class="built_in">local</span>/webserver/tengine/conf/fastcgi_params;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="http://39.108.78.254/index.php" target="_blank" rel="external">http://39.108.78.254/index.php</a></p></li></ol><p>安装php：<a href="https://www.jianshu.com/p/b05daf59b6c6" target="_blank" rel="external">https://www.jianshu.com/p/b05daf59b6c6</a><br>配置php和nginx：<a href="https://www.cnblogs.com/a609251438/p/12088717.html" target="_blank" rel="external">https://www.cnblogs.com/a609251438/p/12088717.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用阿里云 ECS、Typecho、Tengine 从零开始搭建个人主页。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统安装简要步骤</title>
    <link href="http://yoursite.com/2020-02-28-202002/Linux%20%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E7%AE%80%E8%A6%81%E6%AD%A5%E9%AA%A4.html"/>
    <id>http://yoursite.com/2020-02-28-202002/Linux 系统安装简要步骤.html</id>
    <published>2020-02-28T14:13:12.000Z</published>
    <updated>2020-02-28T14:24:50.413Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用 VMWare 安装 Linux 系统、配置网络，然后克隆多台主机的简要步骤，防止忘记。</p><a id="more"></a><h2 id="1-系统安装"><a href="#1-系统安装" class="headerlink" title="1. 系统安装"></a>1. 系统安装</h2><ol><li>安装 VMWare</li><li>新建空的虚拟机</li><li>配置 CD/DVD，执行 iso 文件</li><li>开启虚拟机安装系统</li><li>分三个区：boot 分区、swap 分区（内存的两倍）、用户分区</li></ol><h2 id="2-配置网络"><a href="#2-配置网络" class="headerlink" title="2. 配置网络"></a>2. 配置网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/sysconfig/network-script/</div><div class="line">vi ifcfg-eth0</div><div class="line">删除 HWADDR UUID 行</div><div class="line">ONBOOT 修改位 yes，启用网卡</div><div class="line">BOOTPROTO 修改为 static，手动填写 IP 地址</div><div class="line">// 配置 IP</div><div class="line">// 获取 IP，vmware 编辑-&gt;虚拟网络编辑器-&gt;子网 IP，子网掩码-&gt;可配置的范围：192.168.238.3-254（1被网卡用了，2被网关用了，255是广播地址，0是网络号）</div><div class="line">IPADDR=192.168.238.66</div><div class="line">// 设置掩码</div><div class="line">NETMASK=255.255.255.0</div><div class="line">// 设置网关</div><div class="line">GATEWAY=192.168.238.2</div><div class="line">// 设置 DNS 服务器</div><div class="line">DNS1=114.114.114.114</div><div class="line">DNS2=192.168.238.2</div><div class="line"></div><div class="line">// 重启网络</div><div class="line">service network restart</div></pre></td></tr></table></figure><h2 id="3-克隆虚拟机"><a href="#3-克隆虚拟机" class="headerlink" title="3. 克隆虚拟机"></a>3. 克隆虚拟机</h2><ol><li><p>先给 node01 打个快照，然后克隆</p></li><li><p>进入系统，修改 ip 地址</p></li><li><p>修改 hostname: cd /etc/sysconfig vi network</p></li><li><p>删除文件：rm -f /etc/udev/rules.d/70-presistent-net.rules</p></li><li><p>重启：reboot</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录使用 VMWare 安装 Linux 系统、配置网络，然后克隆多台主机的简要步骤，防止忘记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
