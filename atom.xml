<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟空</title>
  
  <subtitle>悟空的技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-23T14:01:17.591Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>monkey-kong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uni-app</title>
    <link href="http://yoursite.com/2020-04-10-%E5%89%8D%E7%AB%AF/uniapp.html"/>
    <id>http://yoursite.com/2020-04-10-前端/uniapp.html</id>
    <published>2020-04-10T14:13:13.000Z</published>
    <updated>2020-04-23T14:01:17.591Z</updated>
    
    <content type="html"><![CDATA[<p>uni-app 学习笔记</p><a id="more"></a><p>技术栈：vue、微信小程序 api</p><ul><li><p>支持通过 npm 安装第三方包</p></li><li><p>支持微信小程序自定义组件以及 SDK</p></li><li><p>兼容 mpvue 组件及项目</p></li><li>App 端支持和原生混合编码</li><li>DCloud 将发布插件市场</li></ul><p>HTML5Plus</p><p>nvue：支持 weex 原生渲染</p><p>native.js：直接使用JS调用 Android API</p><p><a href="http://ask.dcloud.net.cn/article/114" target="_blank" rel="external">http://ask.dcloud.net.cn/article/114</a></p><p>flex 布局</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;uni-app 学习笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 学习(一)</title>
    <link href="http://yoursite.com/2020-04-10-%E5%89%8D%E7%AB%AF/vue%E5%AD%A6%E4%B9%A0(1).html"/>
    <id>http://yoursite.com/2020-04-10-前端/vue学习(1).html</id>
    <published>2020-04-10T14:13:12.000Z</published>
    <updated>2020-04-23T14:01:06.775Z</updated>
    
    <content type="html"><![CDATA[<p>vue 基本指令。</p><a id="more"></a><h2 id="1-Vue-指令"><a href="#1-Vue-指令" class="headerlink" title="1. Vue 指令"></a>1. Vue 指令</h2><h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入 vue 源码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是 Alvin，我今年&#123;&#123;age&#125;&#125;岁了<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// vue 框架对外暴露了一个 vue 构造函数</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// el:挂载点设置，将 vue 实例和结构层标签进行挂载</span></span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="javascript">        <span class="comment">// 实例数据来源</span></span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            age: 100</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    <span class="comment">// 修改实例 age 属性值，页面会直接对应修改</span></span></div><div class="line"><span class="undefined">    vm.age = 999;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-2-v-text-更新标签文本内容"><a href="#1-2-v-text-更新标签文本内容" class="headerlink" title="1.2 v-text 更新标签文本内容"></a>1.2 v-text 更新标签文本内容</h3><p>简写：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">v-html：和 v-text 类似。如果渲染数据为标签形式字符串，会真的渲染为标签。</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;./js/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;h1&gt;下面是指令操作文本&lt;/h1&gt;</div><div class="line">        &lt;p v-text=&quot;msg&quot;&gt;&lt;/p&gt;</div><div class="line">        &lt;hr&gt;</div><div class="line">        &lt;!-- v-text 的简写 --&gt;</div><div class="line">        &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;!-- 如果是标签形式，直接渲染 --&gt;</div><div class="line">        &lt;p v-html=&quot;msg&quot;&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var vue = new Vue(&#123;</div><div class="line">        el: &quot;#app&quot;,</div><div class="line">        data: &#123;</div><div class="line">            msg: &quot;&lt;a href=&apos;http://www/baidu.com&apos;&gt;百度&lt;/a&gt;&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><h3 id="1-3-v-show-控制标签显示隐藏"><a href="#1-3-v-show-控制标签显示隐藏" class="headerlink" title="1.3 v-show 控制标签显示隐藏"></a>1.3 v-show 控制标签显示隐藏</h3><p>底层原理其实是通过 CSS 中的 display 属性进行控制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-show</span>=<span class="string">"3 &gt; 8"</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        date: &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>通过 v-show 指令实现选项卡功能:</p><p>包含 vue 中函数和按钮点击事件的实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- @click 绑定事件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add('军事')"</span>&gt;</span>军事<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add('新闻')"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add('直播')"</span>&gt;</span>直播<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-show</span>=<span class="string">"'军事'==info"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>军事军事<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>军事军事<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>军事军事<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-show</span>=<span class="string">"'新闻'==info"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻新闻<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻新闻<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>新闻新闻<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-show</span>=<span class="string">"'直播'==info"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>直播直播<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>直播直播<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>直播直播<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            info: <span class="string">"军事"</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        <span class="comment">// 函数</span></span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="undefined">            add(a) &#123;</span></div><div class="line"><span class="javascript">                <span class="comment">// 修改 vue 实例的属性值</span></span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.info = a;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-4-v-if-根据属性值真假渲染标签"><a href="#1-4-v-if-根据属性值真假渲染标签" class="headerlink" title="1.4 v-if 根据属性值真假渲染标签"></a>1.4 v-if 根据属性值真假渲染标签</h3><p>v-show：显示与隐藏标签，标签在节点数上始终有</p><p>v-if：控制标签在节点数上的上树和下树操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你的性别是什么呀？<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"'男'==sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"'女'==sex"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-else</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            sex: <span class="string">"aaa"</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-5-v-for-循环"><a href="#1-5-v-for-循环" class="headerlink" title="1.5 v-for 循环"></a>1.5 v-for 循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>非常常用的指令 v-for<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>循环遍历数字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">"item in 2"</span>&gt;</span>我是二级标题&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>循环遍历数组<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;=====&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"row in 9"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"col in 9"</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            arr: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>v-for 小练习：</p><p>同时学习 vue 中 v-model 用法。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            &lt;!-- v-model --&gt;</div><div class="line">            &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"hobby"</span>&gt;</div><div class="line">            &lt;button @click="add"&gt;单击我添加爱好&lt;/button&gt;</div><div class="line">        &lt;/p&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li v-for="item in arr"&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    var vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el: <span class="string">"#app"</span>,</div><div class="line">        data: &#123;</div><div class="line">            arr: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'打豆豆'</span>],</div><div class="line">            hobby: <span class="string">''</span></div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            add() &#123;</div><div class="line">                <span class="comment">// 向数组尾部添加元素</span></div><div class="line">                vm.arr.push(<span class="keyword">this</span>.hobby);</div><div class="line">                <span class="comment">// 清空输入框</span></div><div class="line">                vm.hobby = <span class="string">''</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h3 id="1-6-v-on-绑定事件"><a href="#1-6-v-on-绑定事件" class="headerlink" title="1.6 v-on 绑定事件"></a>1.6 v-on 绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是计数器小案例&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>单击我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"minus"</span>&gt;</span>单击我-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">mouseenter</span>=<span class="string">"haha"</span>&gt;</span>我绑定鼠标移上事件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            count: 1</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="undefined">            add() &#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.count++;</span></div><div class="line"><span class="javascript">                <span class="comment">// 设置上限</span></span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.count = <span class="keyword">this</span>.count &gt;=<span class="number">10</span> ? <span class="number">10</span> : <span class="keyword">this</span>.count;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            minus() &#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.count--;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.count = <span class="keyword">this</span>.count &lt;= <span class="number">-6</span> ? <span class="number">-1000000</span> : <span class="keyword">this</span>.count;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            haha() &#123;</span></div><div class="line"><span class="javascript">                alert(<span class="string">"鼠标在我上面"</span>);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-7-v-model-数据双向绑定"><a href="#1-7-v-model-数据双向绑定" class="headerlink" title="1.7 v-model 数据双向绑定"></a>1.7 v-model 数据双向绑定</h3><p>只能给表单元素使用。给非表单元素使用后没有任何效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是实例属性值&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            msg: <span class="string">"我是实例数据"</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="2-Vue-小案例"><a href="#2-Vue-小案例" class="headerlink" title="2. Vue 小案例"></a>2. Vue 小案例</h2><h3 id="2-1-H5-新增元素"><a href="#2-1-H5-新增元素" class="headerlink" title="2.1 H5 新增元素"></a>2.1 H5 新增元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            单选按钮：</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>吃饭</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>睡觉</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>打豆豆</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            复选按钮</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>飞机</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>大炮</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>坦克</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            范围条：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"255"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            颜色表单元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            日历表单元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            第几周日历：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            搜索的表单元素：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            地址格式表单元素：必须输入符合 URL 格式的文本</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            邮箱格式：必须输入邮箱格式的文本</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-2-调色板"><a href="#2-2-调色板" class="headerlink" title="2.2 调色板"></a>2.2 调色板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 颜色变化元素 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;width:'400px',height:'100px',</span></span></div><div class="line"><span class="tag"><span class="string">            background:`rgb($&#123;R&#125;,$&#123;G&#125;,$&#123;B&#125;)`&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 三个范围条 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            R：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"255"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">v-model</span>=<span class="string">"R"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;R&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            G：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"255"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">v-model</span>=<span class="string">"G"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;G&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            B：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"255"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">v-model</span>=<span class="string">"B"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;B&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">SCript</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            R: 0,</span></div><div class="line"><span class="undefined">            G: 0,</span></div><div class="line"><span class="undefined">            B: 0</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">SCript</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-3-微博发布框效果"><a href="#2-3-微博发布框效果" class="headerlink" title="2.3 微博发布框效果"></a>2.3 微博发布框效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 多行文本框 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">v-model</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;info.length&#125;&#125;/140字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"info.length==0||info.length&gt;140"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clear"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            info: <span class="string">''</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="undefined">            clear() &#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.info = <span class="string">''</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>动画(待学习)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">        margin: 0;</span></div><div class="line"><span class="undefined">        padding: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    .cur &#123;</span></div><div class="line"><span class="undefined">        animation: donghua 2s linear 0s infinite;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    @-webkit-keyframes donghua &#123;</span></div><div class="line"><span class="undefined">        form &#123;</span></div><div class="line"><span class="undefined">            transform: rotate(0deg);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        to &#123;</span></div><div class="line"><span class="undefined">            transform: rotate(360deg);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-4-animation"><a href="#2-4-animation" class="headerlink" title="2.4 animation"></a>2.4 animation</h3><p>概述:animation是CSS3中新增的动画样式，它的使用类似于函数，分为两步：声明和调用。</p><p>Animation这个属性可以让程序员在样式当中完成动画效果。</p><p>注意：以前让元素运动一般都是需要通过JS【比如：JQ】</p><p>浏览器私有前缀：</p><table><thead><tr><th>谷歌</th><th>微软</th><th>火狐</th><th>欧鹏</th></tr></thead><tbody><tr><td>webkit</td><td>ms</td><td>Moz</td><td>o</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        * &#123;</span></div><div class="line"><span class="undefined">            margin: 0;</span></div><div class="line"><span class="undefined">            padding: 0;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        div &#123;</span></div><div class="line"><span class="undefined">            position: relative;</span></div><div class="line"><span class="undefined">            width: 300px;</span></div><div class="line"><span class="undefined">            height: 150px;</span></div><div class="line"><span class="undefined">            background-color: cyan;</span></div><div class="line"><span class="undefined">            /* 调用动画 */</span></div><div class="line"><span class="undefined">            /* </span></div><div class="line"><span class="undefined">              第一个参数：动画名称</span></div><div class="line"><span class="undefined">              第二个参数：每一次动画执行时间</span></div><div class="line"><span class="undefined">              第三个参数：动画执行速率</span></div><div class="line"><span class="undefined">              第四个参数：第一次动画延迟时间</span></div><div class="line"><span class="undefined">              第五个参数：动画执行次数（infinite：无数次）</span></div><div class="line"><span class="undefined">            */</span></div><div class="line"><span class="undefined">            animation: erha 3s linear 0s infinite;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        /* animation 动画声明 */</span></div><div class="line"><span class="undefined">        /* webkit 代表谷歌浏览器私有前缀：这个动画只能在谷歌浏览器中使用 */</span></div><div class="line"><span class="undefined">        @-webkit-keyframes erha &#123;</span></div><div class="line"><span class="undefined">            form &#123;</span></div><div class="line"><span class="undefined">                left: 0px;</span></div><div class="line"><span class="undefined">                background-color: cyan;</span></div><div class="line"><span class="undefined">                border-radius: 0px 0px 0px 0px;</span></div><div class="line"><span class="undefined">                font-size: 16px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            to &#123;</span></div><div class="line"><span class="undefined">                left: 600px;</span></div><div class="line"><span class="undefined">                background-color: red;</span></div><div class="line"><span class="undefined">                border-radius: 0px 0px 100px 0px;</span></div><div class="line"><span class="undefined">                font-size: 30px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-5-watch-监听实例属性"><a href="#2-5-watch-监听实例属性" class="headerlink" title="2.5 watch 监听实例属性"></a>2.5 watch 监听实例属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            msg: <span class="string">""</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        <span class="comment">// 监听实例属性值变化地方</span></span></div><div class="line"><span class="undefined">        watch: &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// watch 可以监听实例属性值变化</span></span></div><div class="line"><span class="javascript">            <span class="comment">// 这里书写函数名字务必和监听属性的名字相同</span></span></div><div class="line"><span class="undefined">            msg(a) &#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(a);</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"你发生变化了"</span>);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-6-百度预搜索框效果"><a href="#2-6-百度预搜索框效果" class="headerlink" title="2.6 百度预搜索框效果"></a>2.6 百度预搜索框效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &#123;&#123;url&#125;&#125; --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请你输入想搜索的内容：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            url: <span class="string">""</span>,</span></div><div class="line"><span class="undefined">            arr: []</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        watch: &#123;</span></div><div class="line"><span class="undefined">            url(a) &#123;</span></div><div class="line"><span class="javascript">                <span class="comment">// 将最新的数值作为参数注入</span></span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> path = <span class="string">"https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd="</span> + a + <span class="string">"&amp;cb=a"</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">                <span class="comment">// JSONP 跨域拉取数据</span></span></div><div class="line"><span class="javascript">                <span class="comment">// 实现原理：</span></span></div><div class="line"><span class="javascript">                <span class="comment">// 利用 script 标签 src 属性</span></span></div><div class="line"><span class="javascript">                <span class="comment">// 利用函数声明+调用放在两个不同的服务器上面</span></span></div><div class="line"><span class="javascript">                <span class="comment">// 动态创建 script</span></span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span></div><div class="line"><span class="javascript">                <span class="comment">// 设置 script src 属性</span></span></div><div class="line"><span class="undefined">                script.src = path;</span></div><div class="line"><span class="javascript">                <span class="comment">// 标签上树将请求发出去</span></span></div><div class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(script);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    <span class="comment">// 声明一个同名函数</span></span></div><div class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">obj</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(obj);</span></div><div class="line"><span class="javascript">        <span class="comment">// 修改 vue 实例 arr 属性值</span></span></div><div class="line"><span class="undefined">        vm.arr = obj.s;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="3-vue-声明周期函数"><a href="#3-vue-声明周期函数" class="headerlink" title="3. vue 声明周期函数"></a>3. vue 声明周期函数</h2><p>概述：在Vue实例和模板DOM标签进行关联的时候，其实这个阶段经历很多种状态，</p><p>可以通过Vue框架提供生命周期函数，可以在不同的状态下，书写自己业务代码即可。</p><p>注意：在特定的条件下执行函数而已。（面试常问道：八个）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>生命周期函数-------&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>单击我我加上1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            msg: 1</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="undefined">            add() &#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.msg++;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        watch: &#123;&#125;,</span></div><div class="line"><span class="javascript">        <span class="comment">// 生命周期函数</span></span></div><div class="line"><span class="undefined">        beforeCreate() &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 在创建实例之前执行一次，这里访问不到实例的 data 数据</span></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeCreate 在创建 vm 之前执行一次"</span> + <span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        created() &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 在实例创建完毕后立即执行一次</span></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"created 在创建 vm 后立即执行一次"</span> + <span class="keyword">this</span>.msg)</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        beforeMount() &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 在实例创建完毕且和模板进行关联之前执行一次</span></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeMount 我是 vm 即将和模板进行关联"</span> + <span class="keyword">this</span>.msg)</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        mounted() &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 在实际工作中经常从这个生命周期函数拉取服务器数据</span></span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"mounted 我是 vm 我已经和模板关联完毕"</span> + <span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        beforeUpdate() &#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"beforeUpdate 当数据发生变化时立即执行一次"</span> + <span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        updated() &#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"updated 当数据发生变化后立即执行一次"</span> + <span class="keyword">this</span>.msg)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="4-vue-中-Ajax-技术实现"><a href="#4-vue-中-Ajax-技术实现" class="headerlink" title="4. vue 中 Ajax 技术实现"></a>4. vue 中 Ajax 技术实现</h2><p>axios:它是Vue当中经常使用第三方JavaScript函数库，它主要作用是可以向服务器端发起请求。</p><p>下载axios源码方式：</p><p>CDN：百度静态资源库（百度公司给提供网站：各种常用前端源码文件都有）</p><p><a href="https://www.bootcdn.cn/" target="_blank" rel="external">https://www.bootcdn.cn/</a></p><h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"fetchData"</span>&gt;</span>单击我发起 GET<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"postData"</span>&gt;</span>单击我发起 POST<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            msg: <span class="string">"默认文本"</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="undefined">            </span></div><div class="line"><span class="undefined">            fetchData() &#123;</span></div><div class="line"><span class="javascript">                <span class="comment">// 发起 GET 请求，拉取服务器新闻数据</span></span></div><div class="line"><span class="javascript">                axios.get(<span class="string">"./data.txt"</span>).then(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = obj.data;</span></div><div class="line"><span class="undefined">                &#125;);</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            postData() &#123;</span></div><div class="line"><span class="javascript">                axios.post(<span class="string">"./data.txt"</span>).then(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = obj.data;</span></div><div class="line"><span class="undefined">                &#125;);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>报跨域问题了。</p><h3 id="4-2-结合生命周期函数一起使用"><a href="#4-2-结合生命周期函数一起使用" class="headerlink" title="4.2 结合生命周期函数一起使用"></a>4.2 结合生命周期函数一起使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in postList"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            postList: []</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        <span class="comment">// 生命周期函数：实例已经和模板挂载完毕</span></span></div><div class="line"><span class="undefined">        mounted() &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 向服务器拉取数据</span></span></div><div class="line"><span class="javascript">            axios.get(<span class="string">"./jieyong.txt"</span>).then(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.postList = obj.data.postList;</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="5-组件开发"><a href="#5-组件开发" class="headerlink" title="5. 组件开发"></a>5. 组件开发</h2><h3 id="5-1-组件的基本使用"><a href="#5-1-组件的基本使用" class="headerlink" title="5.1 组件的基本使用"></a>5.1 组件的基本使用</h3><p>Vue当中组件分为两种：</p><p>局部组件务必需要在compoents里面进行注册，使用的时候当中一个自定义标签即可。注意组件名字不能瞎写：不能是已有标签名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 用标签形式使用组件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jch</span>&gt;</span><span class="tag">&lt;/<span class="name">jch</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gen</span>&gt;</span><span class="tag">&lt;/<span class="name">gen</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">say-call</span>&gt;</span><span class="tag">&lt;/<span class="name">say-call</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">go</span>&gt;</span><span class="tag">&lt;/<span class="name">go</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 下面这里是组件模板 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"erha"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"gen"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">go</span>&gt;</span><span class="tag">&lt;/<span class="name">go</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"memeda"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">go</span>&gt;</span><span class="tag">&lt;/<span class="name">go</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是么么哒<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"go"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 全局组件</span></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">"go"</span>, &#123;</span></div><div class="line"><span class="javascript">        template: <span class="string">"#go"</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;&#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;&#125;,</span></div><div class="line"><span class="undefined">        watch: &#123;&#125;,</span></div><div class="line"><span class="javascript">        <span class="comment">// 局部组件需要注册</span></span></div><div class="line"><span class="undefined">        components: &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 组件名字</span></span></div><div class="line"><span class="undefined">            jch: &#123;</span></div><div class="line"><span class="javascript">                <span class="comment">// jch 组件模板</span></span></div><div class="line"><span class="javascript">                template: <span class="string">"#erha"</span>,</span></div><div class="line"><span class="javascript">                <span class="comment">// jch 组件数据</span></span></div><div class="line"><span class="undefined">                data() &#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="number">123</span>);</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="undefined">                        msg: 1</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="javascript">                <span class="comment">// 事件处理函数</span></span></div><div class="line"><span class="undefined">                methods: &#123;</span></div><div class="line"><span class="undefined">                    add() &#123;</span></div><div class="line"><span class="javascript">                        <span class="keyword">this</span>.msg++;</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            gen: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#gen"</span>,</span></div><div class="line"><span class="undefined">                data() &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="undefined">                        arr: [1,2,3,4,5]</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            <span class="comment">// 组件名字不能是以后标签名字</span></span></div><div class="line"><span class="undefined">            div: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#gen"</span></span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            sayCall: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#memeda"</span></span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="5-2-父组件给子组件传值"><a href="#5-2-父组件给子组件传值" class="headerlink" title="5.2 父组件给子组件传值"></a>5.2 父组件给子组件传值</h3><p>父组件中使用动态参数形式（v-bind）：:msg=”msg”  :car=”car”</p><p>子组件中使用 props 接收：props:[“msg”,”car”]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        #app &#123;</span></div><div class="line"><span class="undefined">            width: 80%;</span></div><div class="line"><span class="undefined">            height: 300px;</span></div><div class="line"><span class="undefined">            background-color: red;</span></div><div class="line"><span class="undefined">            border: 2px;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .cur &#123;</span></div><div class="line"><span class="undefined">            width: 400px;</span></div><div class="line"><span class="undefined">            height: 200px;</span></div><div class="line"><span class="undefined">            background-color: chartreuse;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是最大的根组件。。。&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">class</span>=<span class="string">"cur"</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>  <span class="attr">:car</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件...&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            &#123;&#123;car&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            msg: <span class="string">"lalallaa"</span>,</span></div><div class="line"><span class="javascript">            car: <span class="string">"奔驰"</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        components: &#123;</span></div><div class="line"><span class="undefined">            son: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#son"</span>,</span></div><div class="line"><span class="javascript">                props:[<span class="string">"msg"</span>,<span class="string">"car"</span>]</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="5-3-子组件给父组件传值"><a href="#5-3-子组件给父组件传值" class="headerlink" title="5.3 子组件给父组件传值"></a>5.3 子组件给父组件传值</h3><ol><li>儿子组件需要通过 $emit 方法触发自定义事件发送数据：第一个参数为自定义事件名字，第二个参数为传递的数据</li><li>父组件接收数据：@gift=”show($event)”</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        * &#123;</span></div><div class="line"><span class="undefined">            margin: 0;</span></div><div class="line"><span class="undefined">            padding: 0;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        #app &#123;</span></div><div class="line"><span class="undefined">            width: 80%;</span></div><div class="line"><span class="undefined">            height: 400px;</span></div><div class="line"><span class="undefined">            background-color: skyblue;</span></div><div class="line"><span class="undefined">            margin: 10px auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .cur &#123;</span></div><div class="line"><span class="undefined">            width: 400px;</span></div><div class="line"><span class="undefined">            height: 200px;</span></div><div class="line"><span class="undefined">            background-color: pink;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是王健林-----&#123;&#123;liwu&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 通过自定义事件 gift 接收子组件数据 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">wsc</span> <span class="attr">class</span>=<span class="string">"cur"</span> @<span class="attr">gift</span>=<span class="string">"show($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">wsc</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"wsc"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是王思聪<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span>把熊猫TV送给父亲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            liwu: <span class="string">''</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 展示儿子礼物</span></span></div><div class="line"><span class="undefined">            show(liwu)&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.liwu = liwu;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        components: &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// 组件 wsc</span></span></div><div class="line"><span class="undefined">            wsc: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#wsc"</span>,</span></div><div class="line"><span class="undefined">                data() &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span>&#123;</span></div><div class="line"><span class="javascript">                        msg: <span class="string">"熊猫TV"</span></span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                methods: &#123;</span></div><div class="line"><span class="javascript">                    <span class="comment">// 给父亲传递数据的方法</span></span></div><div class="line"><span class="undefined">                    send() &#123;</span></div><div class="line"><span class="javascript">                        <span class="comment">// 触发自定义事件，通过组件的 $emit 方法</span></span></div><div class="line"><span class="javascript">                        <span class="keyword">this</span>.$emit(<span class="string">"gift"</span>, <span class="keyword">this</span>.msg);</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="5-4-兄弟组件传值"><a href="#5-4-兄弟组件传值" class="headerlink" title="5.4 兄弟组件传值"></a>5.4 兄弟组件传值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        #app &#123;</span></div><div class="line"><span class="undefined">            width: 80%;</span></div><div class="line"><span class="undefined">            height: 300px;</span></div><div class="line"><span class="undefined">            background-color: red;</span></div><div class="line"><span class="undefined">            border: 2px;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        .son &#123;</span></div><div class="line"><span class="undefined">            width: 200px;</span></div><div class="line"><span class="undefined">            height: 100px;</span></div><div class="line"><span class="undefined">            background-color: pink;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">son</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">son</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">son1</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">son1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大儿子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>二儿子组件----&#123;&#123;car&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendCar"</span>&gt;</span>给哥哥送礼物<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 中央管道：原型</span></span></div><div class="line"><span class="javascript">    Vue.prototype.$bus = <span class="keyword">new</span> Vue;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">        dada: &#123;&#125;,</span></div><div class="line"><span class="undefined">        components: &#123;</span></div><div class="line"><span class="undefined">            son: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#son"</span>,</span></div><div class="line"><span class="undefined">                data()&#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">                        info:<span class="string">''</span></span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                mounted() &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">this</span>.$bus.$on(<span class="string">"sendCar"</span>, ($event)=&gt;&#123;</span></div><div class="line"><span class="javascript">                        <span class="keyword">this</span>.info = $event;</span></div><div class="line"><span class="undefined">                    &#125;)</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            son1: &#123;</span></div><div class="line"><span class="javascript">                template: <span class="string">"#son1"</span>,</span></div><div class="line"><span class="undefined">                data() &#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="javascript">                        car: <span class="string">"奔驰"</span></span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                methods: &#123;</span></div><div class="line"><span class="undefined">                    sendCar() &#123;</span></div><div class="line"><span class="javascript">                        <span class="keyword">this</span>.$bus.$emit(<span class="string">"sendCar"</span>, <span class="keyword">this</span>.car);</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="6-vue-cli-使用"><a href="#6-vue-cli-使用" class="headerlink" title="6. vue-cli 使用"></a>6. vue-cli 使用</h2><p>在公司创建 vue 项目的时候一般都使用脚手架，它是 vue 框架提供的一个工具，可以快速生成 vue 项目，很多常用的 vue 项目依赖会自动安装。</p><p>安装：<code>npm install -g vue-cli</code></p><p>检查是否成功：vue -V</p><p>创建一个项目：vue init webpack myproject</p><p>运行程序：npm run dev</p><p>如果启动失败，删除 nodemodules 文件夹：cnpm install</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue 基本指令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习(五)</title>
    <link href="http://yoursite.com/2020-04-09-SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0(5).html"/>
    <id>http://yoursite.com/2020-04-09-SpringBoot/SpringBoot学习(5).html</id>
    <published>2020-04-09T14:13:16.000Z</published>
    <updated>2020-04-23T14:00:45.806Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 自动装配原理。<br><a id="more"></a></p><h2 id="1-SpringBootApplication-注解"><a href="#1-SpringBootApplication-注解" class="headerlink" title="1. SpringBootApplication 注解"></a>1. SpringBootApplication 注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SpringBootApplication 注解</span></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@SpringBootConfiguration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</div><div class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line">    </div><div class="line"><span class="comment">// EnableAutoConfiguration 注解</span></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</div></pre></td></tr></table></figure><p>可以看到，使用 <code>@Import(AutoConfigurationImportSelector.class)</code>导入了 </p><p><code>AutoConfigurationImportSelector</code>。</p><p>也就是 SpringBoot 程序主类有<code>@Import(AutoConfigurationImportSelector.class)</code>。</p><h2 id="2-启动过程中会解析-Import注解"><a href="#2-启动过程中会解析-Import注解" class="headerlink" title="2. 启动过程中会解析@Import注解"></a>2. 启动过程中会解析<code>@Import</code>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">refreshContext(context);</div><div class="line"></div><div class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></div><div class="line">invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line"><span class="comment">// Parse each @Configuration class</span></div><div class="line">ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</div><div class="line">    <span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</div><div class="line">    <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</div><div class="line">parser.parse(candidates);</div><div class="line"></div><div class="line"><span class="comment">// 处理主类的 @Import 注解</span></div><div class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.process();</div><div class="line"></div><div class="line"><span class="comment">// 获取需要注入的组件的自动装配类，并依次解析注入</span></div><div class="line">grouping.getImports().forEach(entry -&gt; &#123;</div><div class="line">    ConfigurationClass configurationClass = <span class="keyword">this</span>.configurationClasses.get(entry.getMetadata());</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter),</div><div class="line">                       Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)),</div><div class="line">                       exclusionFilter, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">            <span class="string">"Failed to process import candidates for configuration class ["</span> +</div><div class="line">            configurationClass.getMetadata().getClassName() + <span class="string">"]"</span>, ex);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 获取需要装配的组件的自动装配类</span></div><div class="line">AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</div><div class="line">    .getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</div><div class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</div><div class="line">    &#125;</div><div class="line">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</div><div class="line">    <span class="comment">// 从 spring.factories 中加载所有自动装配类</span></div><div class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</div><div class="line">    <span class="comment">// 去重</span></div><div class="line">    configurations = removeDuplicates(configurations);</div><div class="line">    <span class="comment">// 配置排除</span></div><div class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</div><div class="line">    checkExcludedClasses(configurations, exclusions);</div><div class="line">    configurations.removeAll(exclusions);</div><div class="line">    <span class="comment">// 过滤</span></div><div class="line">    configurations = filter(configurations, autoConfigurationMetadata);</div><div class="line">    <span class="comment">// 发布自动装配事件</span></div><div class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 从 spring.factories 中加载所有自动装配类</span></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</div><div class="line">                                                                         getBeanClassLoader());</div><div class="line">    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></div><div class="line">                    + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</div><div class="line">    <span class="keyword">return</span> configurations;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>父子递归解析配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Recursively process the configuration class and its superclass hierarchy.</span></div><div class="line">SourceClass sourceClass = asSourceClass(configClass, filter);</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    sourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (sourceClass != <span class="keyword">null</span>);</div></pre></td></tr></table></figure><p>递归解析 processImports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="keyword">false</span>);</div></pre></td></tr></table></figure><h2 id="3-HttpEncodingAutoConfiguration-例子"><a href="#3-HttpEncodingAutoConfiguration-例子" class="headerlink" title="3. HttpEncodingAutoConfiguration 例子"></a>3. HttpEncodingAutoConfiguration 例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">表明这是一个配置类，</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">启动指定类的ConfigurationProperties功能,进入HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来，并把HttpProperties加入到ioc容器中</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties.class)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">spring底层@Confitional注解，根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效</span></div><div class="line"><span class="comment">此时表示判断当前应用是否是web应用，如果是，那么配置类生效</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">判断当前项目由没有这个类CharacterEncodingFilter，springmvc中进行乱码解决的过滤器</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">判断配置文件中是否存在某个配置：spring.http.encoding.enabled</span></div><div class="line"><span class="comment">如果不存在，判断也是成立的，</span></div><div class="line"><span class="comment">即使我们配置文件中不配置spring.http.encoding.enabled=true，也是默认生效的</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//和springboot的配置文件映射</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</div><div class="line"></div><div class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.properties = properties.getEncoding();</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@ConditionalOnMissingBean</span><span class="comment">//判断容器中是否有此组件</span></div><div class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</div><div class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</div><div class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</div><div class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</div><div class="line"><span class="keyword">return</span> filter;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span></span></div><div class="line"><span class="class"><span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</div><div class="line"></div><div class="line">LocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) &#123;</div><div class="line"><span class="keyword">this</span>.properties = properties;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</div><div class="line">factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-Conditional-控制组件装配"><a href="#4-Conditional-控制组件装配" class="headerlink" title="4. @Conditional 控制组件装配"></a>4. @Conditional 控制组件装配</h2><table><thead><tr><th>@Conditional扩展注解</th><th>作用</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 自动装配原理。&lt;br&gt;
    
    </summary>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/categories/Srping-Boot/"/>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/tags/Srping-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习(四)</title>
    <link href="http://yoursite.com/2020-04-09-SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0(4).html"/>
    <id>http://yoursite.com/2020-04-09-SpringBoot/SpringBoot学习(4).html</id>
    <published>2020-04-09T14:13:15.000Z</published>
    <updated>2020-04-23T13:58:47.542Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 启动源码分析。<br><a id="more"></a></p><h2 id="1-启动大体流程"><a href="#1-启动大体流程" class="headerlink" title="1. 启动大体流程"></a>1. 启动大体流程</h2><ol><li>SpringApplication 构造器初始化<ul><li>应用程序类型。NONE、SERVLET、REACTIVE</li><li>加载所有 ApplicationContextInitializer</li><li>加载所有  ApplicationListener</li><li>找到程序运行主类</li></ul></li><li>开启计时器</li><li>设置 java.awt.headless 系统属性</li><li>获取 EventPublishingRunListeners</li><li>listeners.starting();</li><li>配置应用程序环境</li><li>listeners.environmentPrepared(environment);</li><li>设置系统属性 spring.beaninfo.ignore</li><li>打印 banner</li><li>创建应用程序上下文：context = createApplicationContext();</li><li>创建异常报告器</li><li>准备应用程序上下文<ul><li>listeners.contextPrepared(context);</li><li>listeners.contextLoaded(context);</li></ul></li><li>刷新应用程序上下文</li><li>计时结束</li><li>listeners.started(context);</li><li>listeners.running(context);</li></ol><h2 id="2-启动流程图片"><a href="#2-启动流程图片" class="headerlink" title="2. 启动流程图片"></a>2. 启动流程图片</h2><p><img src="../../images/springboot/springboot2.2.2启动过程流程.png" alt=""></p><h2 id="3-spring-factories"><a href="#3-spring-factories" class="headerlink" title="3. spring.factories"></a>3. spring.factories</h2><h3 id="3-1-spring-boot-2-2-6-RELEASE-jar"><a href="#3-1-spring-boot-2-2-6-RELEASE-jar" class="headerlink" title="3.1 spring-boot-2.2.6.RELEASE.jar"></a>3.1 spring-boot-2.2.6.RELEASE.jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"># PropertySource Loaders</div><div class="line">org.springframework.boot.env.PropertySourceLoader=\</div><div class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</div><div class="line">org.springframework.boot.env.YamlPropertySourceLoader</div><div class="line"></div><div class="line"># Run Listeners</div><div class="line">org.springframework.boot.SpringApplicationRunListener=\</div><div class="line">org.springframework.boot.context.event.EventPublishingRunListener</div><div class="line"></div><div class="line"># Error Reporters</div><div class="line">org.springframework.boot.SpringBootExceptionReporter=\</div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzers</div><div class="line"></div><div class="line"># Application Context Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\</div><div class="line">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</div><div class="line"></div><div class="line"># Application Listeners</div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.ClearCachesApplicationListener,\</div><div class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</div><div class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</div><div class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</div><div class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</div><div class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</div><div class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</div><div class="line"></div><div class="line"># Environment Post Processors</div><div class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</div><div class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor,\</div><div class="line">org.springframework.boot.reactor.DebugAgentEnvironmentPostProcessor</div><div class="line"></div><div class="line"># Failure Analyzers</div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\</div><div class="line">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</div><div class="line"></div><div class="line"># FailureAnalysisReporters</div><div class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</div><div class="line">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</div></pre></td></tr></table></figure><h3 id="3-2-spring-boot-autoconfigure-2-2-6-RELEASE-jar"><a href="#3-2-spring-boot-autoconfigure-2-2-6-RELEASE-jar" class="headerlink" title="3.2 spring-boot-autoconfigure-2.2.6.RELEASE.jar"></a>3.2 spring-boot-autoconfigure-2.2.6.RELEASE.jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"># Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</div><div class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</div><div class="line"></div><div class="line"># Application Listeners</div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</div><div class="line"></div><div class="line"># Auto Configuration Import Listeners</div><div class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</div><div class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</div><div class="line"></div><div class="line"># Auto Configuration Import Filters</div><div class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</div><div class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</div><div class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</div><div class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</div><div class="line"></div><div class="line"># Auto Configure</div><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</div><div class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</div><div class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</div><div class="line"></div><div class="line"># Failure analyzers</div><div class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</div><div class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</div><div class="line">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</div><div class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</div><div class="line">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</div><div class="line"></div><div class="line"># Template availability providers</div><div class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</div><div class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</div><div class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</div><div class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</div><div class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</div><div class="line">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</div></pre></td></tr></table></figure><h2 id="4-Spring-事件发布机制"><a href="#4-Spring-事件发布机制" class="headerlink" title="4. Spring 事件发布机制"></a>4. Spring 事件发布机制</h2><p>这是典型的观察者模式的实际应用。</p><h3 id="4-1-主题（事件源）"><a href="#4-1-主题（事件源）" class="headerlink" title="4.1 主题（事件源）"></a>4.1 主题（事件源）</h3><p>SpringApplication 启动过程中，会经历多个状态，比如启动中、环境准备好了、上下文准备好了、上下文加载好了等等。可以把 SpringApplication  当成观察者模式的主题，不同状态主题发布不同的事件通知符合条件的观察者门去做相应的处理。</p><h3 id="4-2-事件"><a href="#4-2-事件" class="headerlink" title="4.2 事件"></a>4.2 事件</h3><p>ApplicationEvent 就是主题的事件，比如：ApplicationStartingEvent、ApplicationEnvironmentPreparedEvent…</p><h3 id="4-3-多路广播工具"><a href="#4-3-多路广播工具" class="headerlink" title="4.3 多路广播工具"></a>4.3 多路广播工具</h3><p>ApplicationEventMulticaster，增加、删除、筛选不同事件对应的观察者。可以看成主题的一个工具，专门用于管理主题的观察者门。并且可以帮助主题根据不同事件，通知订阅了该事件的观察者们去做相应处理。</p><h3 id="4-4-观察者"><a href="#4-4-观察者" class="headerlink" title="4.4 观察者"></a>4.4 观察者</h3><p>ApplicationListener，比如：ClearCachesApplicationListener、LoggingApplicationListener。就是主题变化后，需要具体做事的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 启动源码分析。&lt;br&gt;
    
    </summary>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/categories/Srping-Boot/"/>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/tags/Srping-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习(三)</title>
    <link href="http://yoursite.com/2020-04-09-SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0(3).html"/>
    <id>http://yoursite.com/2020-04-09-SpringBoot/SpringBoot学习(3).html</id>
    <published>2020-04-09T14:13:14.000Z</published>
    <updated>2020-04-23T13:58:39.633Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 数据源配置和集成 Thymeleaf<br><a id="more"></a></p><h2 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h2><h3 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1     导入依赖"></a>1.1     导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jdbc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- mysql 驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="1-2-配置数据源"><a href="#1-2-配置数据源" class="headerlink" title="1.2 配置数据源"></a>1.2 配置数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 数据源配置</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.url=jdbc:mysql://39.108.78.254:3306/test?serverTimezone=UTC&amp;useUnicode=true@characterEncoding=utf-8</div><div class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</div></pre></td></tr></table></figure><h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootWebApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    DataSource dataSource;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dataSource==&gt;"</span>+dataSource.getClass());</div><div class="line">        Connection connection = dataSource.getConnection();</div><div class="line">        System.out.println(<span class="string">"connection==&gt;"</span>+connection);</div><div class="line">        connection.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到默认配置的数据源为 class com.zaxxer.hikari.HikariDataSource，我们没有经过任何配置，说明springboot 默认情况下支持的就是这种数据源，可以在 DataSourceProperties.java 文件中查看具体的属性配置</p><h3 id="1-4-crud-操作"><a href="#1-4-crud-操作" class="headerlink" title="1.4 crud 操作"></a>1.4 crud 操作</h3><p>​        1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用连接和原生的 JDBC 语句来操作数据库</p><p>​        2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即 org.springframework.jdbc.core.JdbcTemplate。</p><p>​        3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>​        4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>​        5、JdbcTemplate 的自动配置原理是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcContorller</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    JdbcTemplate jdbcTemplate;</div><div class="line">    </div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-自定义数据源-DruidDataSource"><a href="#2-自定义数据源-DruidDataSource" class="headerlink" title="2. 自定义数据源 DruidDataSource"></a>2. 自定义数据源 DruidDataSource</h2><h3 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- druid --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="2-2-添加配置"><a href="#2-2-添加配置" class="headerlink" title="2.2 添加配置"></a>2.2 添加配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</div></pre></td></tr></table></figure><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>发现已经切换到了 Druid 数据源</p><h3 id="2-4-Druid-独有配置"><a href="#2-4-Druid-独有配置" class="headerlink" title="2.4 Druid 独有配置"></a>2.4 Druid 独有配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</div><div class="line">#druid 数据源专有配置</div><div class="line">spring.datasource.initialSize=5</div><div class="line">spring.datasource.minIdle=5</div><div class="line">spring.datasource.maxActive=20</div><div class="line">spring.datasource.maxWait=60000</div><div class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</div><div class="line">spring.datasource.minEvictableIdleTimeMillis=300000</div><div class="line">spring.datasource.validationQuery=SELECT 1 FROM DUAL</div><div class="line">spring.datasource.testWhileIdle=true</div><div class="line">spring.datasource.testOnBorrow=false</div><div class="line">spring.datasource.testOnReturn=false</div><div class="line">spring.datasource.poolPreparedStatements=true</div><div class="line"></div><div class="line">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</div><div class="line">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</div><div class="line">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</div><div class="line">spring.datasource.filters=stat,wall,log4j</div><div class="line">spring.datasource.maxPoolPreparedStatementPerConnectionSize=20</div><div class="line">spring.datasource.useGlobalDataSourceStat=true</div><div class="line">spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</div></pre></td></tr></table></figure><p>需要定义druidDatasource的配置类，绑定参数。否则配置不生效，因为 DataSource 中没有那些配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DruidDataSource druidDataSource = (DruidDataSource)dataSource;</div><div class="line">System.out.println(<span class="string">"maxActive==&gt;"</span>+druidDataSource.getMaxActive());</div><div class="line">System.out.println(<span class="string">"initialSize==&gt;"</span>+druidDataSource.getInitialSize());</div></pre></td></tr></table></figure><h3 id="2-6-配置druid监控管理台的servlet"><a href="#2-6-配置druid监控管理台的servlet" class="headerlink" title="2.6 配置druid监控管理台的servlet"></a>2.6 配置druid监控管理台的servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServletRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">    ServletRegistrationBean&lt;Servlet&gt; servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);</div><div class="line">    Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</div><div class="line">    initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</div><div class="line">    <span class="comment">//后台允许谁可以访问</span></div><div class="line">    <span class="comment">//initParams.put("allow", "localhost")：表示只有本机可以访问</span></div><div class="line">    <span class="comment">//initParams.put("allow", "")：为空或者为null时，表示允许所有访问</span></div><div class="line">    initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);</div><div class="line">    <span class="comment">//deny：Druid 后台拒绝谁访问</span></div><div class="line">    <span class="comment">//initParams.put("msb", "192.168.1.20");表示禁止此ip访问</span></div><div class="line"></div><div class="line">    servletRegistrationBean.setInitParameters(initParams);</div><div class="line">    <span class="keyword">return</span> servletRegistrationBean;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></div><div class="line"><span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</div><div class="line"></div><div class="line">    <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></div><div class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*"</span>);</div><div class="line">    bean.setInitParameters(initParams);</div><div class="line"></div><div class="line">    <span class="comment">//"/*" 表示过滤所有请求</span></div><div class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>登录控制台： <a href="http://localhost:8080/druid" target="_blank" rel="external">http://localhost:8080/druid</a> </p><h2 id="3-springboot-整合-mybatis"><a href="#3-springboot-整合-mybatis" class="headerlink" title="3. springboot 整合 mybatis"></a>3. springboot 整合 mybatis</h2><h3 id="3-1-导入依赖"><a href="#3-1-导入依赖" class="headerlink" title="3.1 导入依赖"></a>3.1 导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-2-配置数据源"><a href="#3-2-配置数据源" class="headerlink" title="3.2  配置数据源"></a>3.2  配置数据源</h3><p>参考前面</p><h3 id="3-3-测试数据源"><a href="#3-3-测试数据源" class="headerlink" title="3.3 测试数据源"></a>3.3 测试数据源</h3><p>参考前面</p><h3 id="3-4-创建实体类"><a href="#3-4-创建实体类" class="headerlink" title="3.4 创建实体类"></a>3.4 创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> oid;</div><div class="line">    <span class="keyword">private</span> String userId;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"><span class="comment">// get/set...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-5-配置-mapper-接口类"><a href="#3-5-配置-mapper-接口类" class="headerlink" title="3.5 配置 mapper 接口类"></a>3.5 配置 mapper 接口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;SysUser&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SysUser <span class="title">selectUserByOid</span><span class="params">(Integer oid)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Integer <span class="title">addUser</span><span class="params">(SysUser user)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Integer <span class="title">updateUser</span><span class="params">(SysUser user)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Integer <span class="title">deleteUser</span><span class="params">(Integer userOid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-6-在resources下创建Emp-xml文件"><a href="#3-6-在resources下创建Emp-xml文件" class="headerlink" title="3.6 在resources下创建Emp.xml文件"></a>3.6 在resources下创建Emp.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.monkeykong.mapper.UserMapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"SysUser"</span>&gt;</span></div><div class="line">        select * from sys_user</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserByOid"</span> <span class="attr">resultType</span>=<span class="string">"SysUser"</span>&gt;</span></div><div class="line">        select * from sys_user where oid = #&#123;oid&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"SysUser"</span>&gt;</span></div><div class="line">        insert into sys_user (userId, userName) values (#&#123;userId&#125;,#&#123;userName&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"SysUser"</span>&gt;</span></div><div class="line">        update sys_user set userId=#&#123;userId&#125; where userName = #&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">        delete from sys_user where oid = #&#123;oid&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-7-添加配置文件"><a href="#3-7-添加配置文件" class="headerlink" title="3.7 添加配置文件"></a>3.7 添加配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mybatis.config-location=classpath:mapper/*.xml</div><div class="line">mybatis.type-aliases-package=com.monkeykong.entity</div></pre></td></tr></table></figure><h3 id="3-8-编写controller"><a href="#3-8-编写controller" class="headerlink" title="3.8 编写controller"></a>3.8 编写controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="comment">//选择全部用户</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/selectUser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectUser</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;SysUser&gt; users = userMapper.selectUser();</div><div class="line">        users.stream().forEach(u -&gt; &#123;</div><div class="line">            System.out.println(u);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据id选择用户</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/selectEmpByOid"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">selectEmpByOid</span><span class="params">()</span></span>&#123;</div><div class="line">        SysUser user = userMapper.selectUserByOid(<span class="number">1</span>);</div><div class="line">        System.out.println(user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//添加一个用户</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/addUser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</div><div class="line">        userMapper.addUser(<span class="keyword">new</span> SysUser(<span class="string">"jj"</span>,<span class="string">"liujingjing"</span>));</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修改一个用户</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateUser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</div><div class="line">        userMapper.updateUser(<span class="keyword">new</span> SysUser(<span class="string">"jj"</span>,<span class="string">"刘晶晶"</span>));</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据id删除用户</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteUser"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</div><div class="line">        userMapper.deleteUser(<span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 数据源配置和集成 Thymeleaf&lt;br&gt;
    
    </summary>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/categories/Srping-Boot/"/>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/tags/Srping-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习(二)</title>
    <link href="http://yoursite.com/2020-04-09-SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0(2).html"/>
    <id>http://yoursite.com/2020-04-09-SpringBoot/SpringBoot学习(2).html</id>
    <published>2020-04-09T14:13:13.000Z</published>
    <updated>2020-04-23T13:58:32.509Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot Web 开发，自定义 web 基础组件，包括 servlet、filter、listener；静态资源配置；Spring MVC 试图解析器配置。<br><a id="more"></a></p><h2 id="1-整合-Servlet"><a href="#1-整合-Servlet" class="headerlink" title="1. 整合 Servlet"></a>1. 整合 Servlet</h2><h3 id="1-1-组件扫描方式"><a href="#1-1-组件扫描方式" class="headerlink" title="1.1 组件扫描方式"></a>1.1 组件扫描方式</h3><ol><li>定义一个 servlet，并且用 <strong>@WebServlet</strong> 注解描述</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"myFirstServlet"</span>, urlPatterns = <span class="string">"/firstServlet"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"==&gt; my servlet doGet"</span>);</div><div class="line">        resp.getWriter().append(<span class="string">"firstServlet"</span>);</div><div class="line">        <span class="comment">// super.doGet(req, resp);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>在启动类上使用 <strong>@ServletComponentScan</strong> 扫描 Servlet</li></ol><h3 id="1-2-组件注册方式"><a href="#1-2-组件注册方式" class="headerlink" title="1.2 组件注册方式"></a>1.2 组件注册方式</h3><ol><li>定义一个 servlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"==&gt; second servlet"</span>);</div><div class="line">        resp.getWriter().write(<span class="string">"second servlet."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>通过 ServletRegistrationBean 注入 servlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;MySecondServlet&gt; <span class="title">getServletRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">    ServletRegistrationBean&lt;MySecondServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MySecondServlet());</div><div class="line">    bean.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">    bean.setName(<span class="string">"mySecondServlet"</span>);</div><div class="line">    bean.addUrlMappings(<span class="string">"/secondServlet"</span>);</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-整合-Filter"><a href="#2-整合-Filter" class="headerlink" title="2. 整合 Filter"></a>2. 整合 Filter</h2><h3 id="2-1-组件扫描方式"><a href="#2-1-组件扫描方式" class="headerlink" title="2.1 组件扫描方式"></a>2.1 组件扫描方式</h3><ol><li>定义一个 filter，并且使用 <strong>@WebFilter</strong> 注解描述</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FirstFilter"</span>, urlPatterns = <span class="string">"/firstFilter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my first filter init..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my first filter doFilter..."</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my first filter destroy..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>在启动类上使用 <strong>@ServletComponentScan</strong> 扫描 Filter</li></ol><h3 id="2-2-组件注册方式"><a href="#2-2-组件注册方式" class="headerlink" title="2.2 组件注册方式"></a>2.2 组件注册方式</h3><ol><li>定义一个 filter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my second filter init..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my second filter doFilter..."</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my second filter destroy..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>通过 FilterRegistrationBean 注册 filter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;MySecondFilter&gt; <span class="title">getFilterRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> MySecondFilter());</div><div class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/secondFilter"</span>));</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-整合-Listener"><a href="#3-整合-Listener" class="headerlink" title="3. 整合 Listener"></a>3. 整合 Listener</h2><p>listener是servlet规范定义的一种特殊类，用于监听servletContext,HttpSession和ServletRequest等域对象的创建和销毁事件。监听域对象的属性发生修改的事件，用于在事件发生前、发生后做一些必要的处理。</p><p>可用于以下方面：</p><ol><li><p>统计在线人数和在线用户</p></li><li><p>系统启动时加载初始化信息</p></li><li><p>统计网站访问量</p></li><li><p>记录用户访问路径。</p></li></ol><p>同样有两种方式：<strong>@WebListener+@ServletComponentScan</strong> 或者 <strong>ServletListenerRegistrationBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHttpSessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> online=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"创建session"</span>);</div><div class="line">        online++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"销毁session"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-静态资源配置"><a href="#4-静态资源配置" class="headerlink" title="4. 静态资源配置"></a>4. 静态资源配置</h2><p>默认情况下，Spring Boot 将在 classpath 或者 ServletContext 根目录下从名为 /static （/public、/resources 或 /META-INF/resources）目录中服务静态内容。它使用了 Spring MVC 的 ResourceHttpRequestHandler，因此您可以通过添加自己的 WebMvcConfigurerAdapter 并重写 addResourceHandlers 方法来修改此行为。</p><h3 id="4-1-加载-webjars-文件"><a href="#4-1-加载-webjars-文件" class="headerlink" title="4.1 加载 webjars 文件"></a>4.1 加载 webjars 文件</h3><p>在pom文件中添加jquery的相关依赖，直接可以通过浏览器访问到<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js" target="_blank" rel="external">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="4-2-加载静态资源"><a href="#4-2-加载静态资源" class="headerlink" title="4.2 加载静态资源"></a>4.2 加载静态资源</h3><p>从 ResourceProperties 这个类可以看出，默认加载路径有如下这些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,                                                   <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</div></pre></td></tr></table></figure><h3 id="4-3-首页配置信息"><a href="#4-3-首页配置信息" class="headerlink" title="4.3 首页配置信息"></a>4.3 首页配置信息</h3><p>？？？</p><h2 id="5-Spring-MVC-扩展"><a href="#5-Spring-MVC-扩展" class="headerlink" title="5. Spring MVC 扩展"></a>5. Spring MVC 扩展</h2><h3 id="5-1-配置试图解析器"><a href="#5-1-配置试图解析器" class="headerlink" title="5.1 配置试图解析器"></a>5.1 配置试图解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"indexView"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义视图解析器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"==&gt;"</span>+s);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot Web 开发，自定义 web 基础组件，包括 servlet、filter、listener；静态资源配置；Spring MVC 试图解析器配置。&lt;br&gt;
    
    </summary>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/categories/Srping-Boot/"/>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/tags/Srping-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot学习(一)</title>
    <link href="http://yoursite.com/2020-04-09-SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0(1).html"/>
    <id>http://yoursite.com/2020-04-09-SpringBoot/SpringBoot学习(1).html</id>
    <published>2020-04-09T14:13:12.000Z</published>
    <updated>2020-04-23T12:16:13.790Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 概述、Spring Boot 配置<br><a id="more"></a></p><h2 id="1-Spring-Boot-概述"><a href="#1-Spring-Boot-概述" class="headerlink" title="1. Spring Boot 概述"></a>1. Spring Boot 概述</h2><h3 id="1-1-Spring-Boot优点"><a href="#1-1-Spring-Boot优点" class="headerlink" title="1.1 Spring Boot优点"></a>1.1 Spring Boot优点</h3><ol><li>为所有 Spring 开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化 web 项目</li><li>没有冗余代码生成和 xml 配置的要求</li></ol><p>官网的 Features</p><ul><li>Create stand-alone Spring applications</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li><li>Automatically configure Spring and 3rd party libraries whenever possible</li><li>Provide production-ready features such as metrics, health checks, and externalized configuration</li><li>Absolutely no code generation and no requirement for XML configuration</li></ul><h3 id="1-2-微服务架构"><a href="#1-2-微服务架构" class="headerlink" title="1.2 微服务架构"></a>1.2 微服务架构</h3><h4 id="架构演变之路"><a href="#架构演变之路" class="headerlink" title="架构演变之路"></a>架构演变之路</h4><ul><li>单体架构<ul><li>紧耦合</li><li>系统复杂，牵一发而动全身</li><li>重复造轮子：OS、DB…</li><li>完全封闭的架构</li></ul></li><li>SOA 架构<ul><li>松耦合</li><li>通常通过 ESB 进行系统集成</li><li>有状态</li><li>大团队：100-200 人</li><li>TIM 1年、半年、月</li><li>集中式、计划内停机扩容</li></ul></li><li>微服务架构<ul><li>解耦</li><li>DevOps：CI、CD、全自动化</li><li>TIM 按天、周进行升级发布</li><li>可扩展性：自动弹性伸缩</li><li>高可用：升级、扩容不中断业务</li></ul></li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>微服务剔除 SOA 中复杂的 ESB 企业服务总线，所有的业务智能逻辑在服务内部处理，使用 Http（Rest API）进行轻量化通讯</li><li>SOA 强调按水平架构划分为：前、后端、数据库、测试等；微服务强调按垂直架构划分按照业务能力划分，每个服务完成一种特定的功能，服务即产品</li><li>SOA 将组件以 librery 的方式和应用部署在同一个进程中运行，微服务则是各个服务独立运行</li><li>传统应用倾向于使用统一的技术平台来解决所有问题，微服务可以针对不同业务特征选择不同技术平台，去中心统一化，发挥各种技术平台的特长</li><li>SOA 强调的是异构系统之间的通信和解耦合（一种粗粒度、松耦合的服务架构）；微服务强调的是系统按业务边界做细粒度的拆分和部署</li></ul><h3 id="1-3-相关详细介绍"><a href="#1-3-相关详细介绍" class="headerlink" title="1.3 相关详细介绍"></a>1.3 相关详细介绍</h3><ul><li><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="external">https://martinfowler.com/articles/microservices.html</a> （一定要看完）</li><li><a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="external">https://www.cnblogs.com/liuning8023/p/4493156.html</a></li><li><a href="https://www.bootschool.net/ascii" target="_blank" rel="external">https://www.bootschool.net/ascii</a></li></ul><h2 id="2-Spring-配置"><a href="#2-Spring-配置" class="headerlink" title="2. Spring 配置"></a>2. Spring 配置</h2><h3 id="2-1-Properties-配置详解"><a href="#2-1-Properties-配置详解" class="headerlink" title="2.1 Properties 配置详解"></a>2.1 Properties 配置详解</h3><p>（1）在 resources 目录下创建 application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">person.name=zhangsan</div><div class="line">person.age=12</div><div class="line">person.gender=男</div><div class="line">person.desc=my nacame is $&#123;person.name&#125;,my age is $&#123;person.age&#125;</div></pre></td></tr></table></figure><p>（2）创建对应的实体类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.gender&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String gender;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.desc&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String desc;</div><div class="line">    </div><div class="line">    <span class="comment">//...get/set/toString</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（3）创建对应的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootConfigApplicationTests</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Person person;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(person.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以在 properties 文件中使用随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my.secret=$&#123;random.value&#125;</div><div class="line">my.number=$&#123;random.int&#125;</div><div class="line">my.bignumber=$&#123;random.long&#125;</div><div class="line">my.uuid=$&#123;random.uuid&#125;</div><div class="line">my.number.less.than.ten=$&#123;random.int(10)&#125;</div><div class="line">my.number.in.range=$&#123;random.int[1024,65536]&#125;</div></pre></td></tr></table></figure><p>properties 多环境配置</p><p>1、在resources目录下创建多个配置文件</p><p>​        application-dev.properties</p><p>​        application-test.properties</p><p>​        application-prod.properties</p><p>​        application.properties</p><p>2、指定激活的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active=test</div></pre></td></tr></table></figure><h3 id="2-2-YAML-配置详解"><a href="#2-2-YAML-配置详解" class="headerlink" title="2.2 YAML 配置详解"></a>2.2 YAML 配置详解</h3><p>基本原则：<br>1、大小写敏感<br>2、使用缩进表示层级关系<br>3、禁止使用 tab 缩进，只能使用空格键<br>4、缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级。<br>5、使用#表示注释<br>6、字符串可以不用引号标注</p><p>YAML 多环境配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7080</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">pro</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span><span class="number">78081</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">test</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7082</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">pro</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">7083</span></div></pre></td></tr></table></figure><h3 id="2-3-ConfigurationProperties-与-Value-对比"><a href="#2-3-ConfigurationProperties-与-Value-对比" class="headerlink" title="2.3 @ConfigurationProperties 与 @Value 对比"></a>2.3 @ConfigurationProperties 与 @Value 对比</h3><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置</td><td>单个注入配置</td></tr><tr><td>松散绑定</td><td>支持</td><td>不持支</td></tr><tr><td>元数据支持</td><td>支持</td><td>不持支</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不持支</td></tr><tr><td>JSR303 数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>spEL表达式</td><td>不持支</td><td>是</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">// 批量注入</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</div><div class="line"><span class="comment">// JSR303 数据校验</span></div><div class="line"><span class="meta">@Validated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// @Value("$&#123;person.name&#125;")</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">// @Value("$&#123;person.age&#125;")</span></div><div class="line">    <span class="meta">@Positive</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">// @Value("$&#123;person.gender&#125;")</span></div><div class="line">    <span class="keyword">private</span> String gender;</div><div class="line">    <span class="comment">// @Value("$&#123;person.desc&#125;")</span></div><div class="line">    <span class="keyword">private</span> String desc;</div><div class="line">    </div><div class="line">    <span class="comment">// 省略 get/set toString</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-4-配置文件优先级"><a href="#2-4-配置文件优先级" class="headerlink" title="2.4 配置文件优先级"></a>2.4 配置文件优先级</h3><p>思路就是越往外优先级越高。所以 java -jar – 指定的配置优先级最高。需要注意的是，所有的配置文件都是有效的，只是优先级越高的配置会覆盖优先级低的配置。</p><ul><li>file:../config/</li><li>file:../</li><li>classpath:/config</li><li>classpath:/</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 概述、Spring Boot 配置&lt;br&gt;
    
    </summary>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/categories/Srping-Boot/"/>
    
    
      <category term="Srping Boot" scheme="http://yoursite.com/tags/Srping-Boot/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(七)</title>
    <link href="http://yoursite.com/2020-04-07-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(7).html"/>
    <id>http://yoursite.com/2020-04-07-多线程与高并发/多线程高并发学习(7).html</id>
    <published>2020-04-07T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:27.857Z</updated>
    
    <content type="html"><![CDATA[<p>JMH 基本使用；Disruptor 入门</p><a id="more"></a><h2 id="1-JMH-测试工具"><a href="#1-JMH-测试工具" class="headerlink" title="1. JMH 测试工具"></a>1. JMH 测试工具</h2><h3 id="1-JMH-官网"><a href="#1-JMH-官网" class="headerlink" title="1. JMH 官网"></a>1. JMH 官网</h3><p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="external">http://openjdk.java.net/projects/code-tools/jmh/</a></p><h3 id="2-maven-依赖"><a href="#2-maven-依赖" class="headerlink" title="2. maven 依赖"></a>2. maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-idea-插件"><a href="#3-idea-插件" class="headerlink" title="3. idea 插件"></a>3. idea 插件</h3><p>JMH plugin</p><h3 id="4-idea-设置"><a href="#4-idea-设置" class="headerlink" title="4. idea 设置"></a>4. idea 设置</h3><p>compiler -&gt; Annotation Processors -&gt; Enable Annotation Processing</p><h3 id="5-待测试类"><a href="#5-待测试类" class="headerlink" title="5. 待测试类"></a>5. 待测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PS</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        Random r = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) nums.add(<span class="number">1000000</span> + r.nextInt(<span class="number">1000000</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreach</span><span class="params">()</span> </span>&#123;</div><div class="line">        nums.forEach(v-&gt;isPrime(v));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallel</span><span class="params">()</span> </span>&#123;</div><div class="line">        nums.parallelStream().forEach(PS::isPrime);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=num/<span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-测试类"><a href="#6-测试类" class="headerlink" title="6. 测试类"></a>6. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PSTest</span> </span>&#123;</div><div class="line">    <span class="comment">// 测试</span></div><div class="line">    <span class="meta">@Benchmark</span></div><div class="line">    <span class="comment">// 预热</span></div><div class="line">    <span class="meta">@Warmup</span>(iterations = <span class="number">1</span>, time = <span class="number">3</span>)</div><div class="line">    <span class="comment">// 线程数</span></div><div class="line">    <span class="meta">@Fork</span>(<span class="number">5</span>)</div><div class="line">    <span class="comment">// 测试模式</span></div><div class="line">    <span class="meta">@BenchmarkMode</span>(Mode.Throughput)</div><div class="line">    <span class="comment">// 总共执行多少次测试</span></div><div class="line">    <span class="meta">@Measurement</span>(iterations = <span class="number">1</span>, time = <span class="number">3</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// PS.foreach();</span></div><div class="line">        PS.parallel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="7-启动报错"><a href="#7-启动报错" class="headerlink" title="7. 启动报错"></a>7. 启动报错</h3><p>堆栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​```javaERROR: org.openjdk.jmh.runner.RunnerException: ERROR: Exception while trying to acquire the JMH lock (C:\WINDOWS\/jmh.lock): C:\WINDOWS\jmh.lock (拒绝访问。), exiting. Use -Djmh.ignoreLock=true to forcefully continue.   at org.openjdk.jmh.runner.Runner.run(Runner.java:216)   at org.openjdk.jmh.Main.main(Main.java:71)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">解决：</div><div class="line"></div><div class="line">RunConfiguration -&gt; Environment Variables -&gt; include system environment viables</div><div class="line"></div><div class="line">### 8. 阅读测试报告</div><div class="line"></div><div class="line">### 9. 官网样例</div><div class="line"></div><div class="line">http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/</div><div class="line"></div><div class="line">## 2. Disruptor</div><div class="line"></div><div class="line">### 2.1 介绍</div><div class="line"></div><div class="line">主页：http://lmax-exchange.github.io/disruptor/</div><div class="line"></div><div class="line">源码：https://github.com/LMAX-Exchange/disruptor</div><div class="line"></div><div class="line">GettingStarted: https://github.com/LMAX-Exchange/disruptor/wiki/Getting-Started</div><div class="line"></div><div class="line">api: http://lmax-exchange.github.io/disruptor/docs/index.html</div><div class="line"></div><div class="line">maven: https://mvnrepository.com/artifact/com.lmax/disruptor</div><div class="line"></div><div class="line">### 2.2 Disruptor的特点</div><div class="line"></div><div class="line">1. 效率比 ConcurrentLinkedQueue  高，因为 Disruptor 使用数组实现，同时 Dirruptor 只需要为欸胡一个序号，而队列一般要维护头尾两个序号，所以 Disruptor 效率更高。</div><div class="line">2. Disruptor 记录下一个可用的元素，使用的是 RingBuffer 的序号。假如长度为 8，  当添加到第 12 个元素时在哪个序号上呢？用 12 %8 决定，所以 Disruptor 要求环的长度为 2 的 n 次幂，利于二进制计算，因为：12 % 8 = 12 &amp; （8 -1）。</div><div class="line">3. 当 Buffer 被填满时到底是覆盖还是等待，由 Producer 的**等待策略**决定。</div><div class="line">4. 无锁，高并发，使用环形 Buffer，直接覆盖（不用清除）旧的数据，降低GC频率</div><div class="line">5. 实现了基于事件的生产者消费者模式（观察者模式）</div><div class="line"></div><div class="line">### 2.3 Disruptor开发步骤</div><div class="line"></div><div class="line">1. 定义 Event，队列中需要处理的元素</div><div class="line">2. 定义 Event 工厂，用于填充队列</div><div class="line">   - 这里涉及到效率问题：disruptor 初始化的时候，会调用Event工厂，对ringBuffer进行内存的提前分配。所以插入覆盖值时，甚至都不用 new 对象，直接改变内部属性即可。</div><div class="line">   - GC 产生频率会降低</div><div class="line">3. 定义EventHandler（消费者），处理容器中的元素</div><div class="line"></div><div class="line">```java</div><div class="line">/**</div><div class="line"> * 消息对象</div><div class="line"> */</div><div class="line">public class LongEvent &#123;</div><div class="line">    private long value;</div><div class="line">    public void setValue(long value) &#123;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line">    public long getValue() &#123;</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;LongEvent[&quot; + value + &quot;]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息工厂</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class LongEventFactory implements EventFactory&lt;LongEvent&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public LongEvent newInstance() &#123;</div><div class="line">        return new LongEvent();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息消费者</div><div class="line"> */</div><div class="line">public class LongEventHandler implements EventHandler&lt;LongEvent&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public void onEvent(LongEvent event, long sequence, boolean endOfBatch) throws Exception &#123;</div><div class="line">        System.out.println(&quot;event:&quot;+event.getValue()+&quot;,sequence:&quot; + sequence);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 消息生产者</div><div class="line"> */</div><div class="line">public class LongEventProducer &#123;</div><div class="line">    private final RingBuffer&lt;LongEvent&gt; ringBuffer;</div><div class="line"></div><div class="line">    public LongEventProducer(RingBuffer&lt;LongEvent&gt; ringBuffer) &#123;</div><div class="line">        this.ringBuffer = ringBuffer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 原生发布数据</div><div class="line">    public void onData(ByteBuffer buffer)&#123;</div><div class="line">        long sequence = ringBuffer.next();</div><div class="line">        LongEvent longEvent = ringBuffer.get(sequence);</div><div class="line">        longEvent.setValue(buffer.getLong(0));</div><div class="line">        // 向环上设置数据</div><div class="line">        ringBuffer.publish(sequence);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 使用 lambda 发布数据(一个参数)</div><div class="line">    public void onData2(ByteBuffer buffer) &#123;</div><div class="line">        ringBuffer.publishEvent(((event, sequence, arg0) -&gt; event.setValue(arg0.getLong(0))),</div><div class="line">                buffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 使用 lambda 发布数据(两个参数)</div><div class="line">    public void onData3(ByteBuffer buffer) &#123;</div><div class="line">        ringBuffer.publishEvent(((event, sequence, arg0, arg1) -&gt; event.setValue(arg0 + arg1)),</div><div class="line">                buffer.getLong(0), buffer.getLong(0));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 主函数</div><div class="line"> */</div><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 事件工厂</div><div class="line">        LongEventFactory longEventFactory = new LongEventFactory();</div><div class="line"></div><div class="line">        // 队列大小，必须是 2 的整数次幂</div><div class="line">        int ringBufferSize = 1024;</div><div class="line"></div><div class="line">        // 获取 disruptor</div><div class="line">        Disruptor&lt;LongEvent&gt; disruptor = new Disruptor&lt;&gt;(longEventFactory, ringBufferSize, Executors.defaultThreadFactory());</div><div class="line"></div><div class="line">        // 设置消费者</div><div class="line">        disruptor.handleEventsWith(new LongEventHandler());</div><div class="line"></div><div class="line">        // 启动 disruptor</div><div class="line">        disruptor.start();</div><div class="line"></div><div class="line">        // 构造生产者，并生产数据</div><div class="line">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</div><div class="line">        LongEventProducer producer = new LongEventProducer(ringBuffer);</div><div class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(8);</div><div class="line">        for (long i = 0; i &lt; 100; i++) &#123;</div><div class="line">            byteBuffer.putLong(0, i);</div><div class="line">//            producer.onData(byteBuffer);</div><div class="line">//            producer.onData2(byteBuffer);</div><div class="line">            producer.onData3(byteBuffer);</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(100);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 关闭 disruptor</div><div class="line">        disruptor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-4-生产者类型-ProducerType"><a href="#2-4-生产者类型-ProducerType" class="headerlink" title="2.4 生产者类型 ProducerType"></a>2.4 生产者类型 ProducerType</h3><ul><li>ProducerType.SINGLE：对 sequence 的操作不加锁，效率更高。但是得保证只有一个生产者。</li><li>ProducerType.MUTI：对 sequence 的操作要加锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Disruptor&lt;LongEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;&gt;(LongEvent::<span class="keyword">new</span>, ringBufferSize,</div><div class="line">    DaemonThreadFactory.INSTANCE, ProducerType.MULTI, <span class="keyword">new</span> BlockingWaitStrategy());</div></pre></td></tr></table></figure><h3 id="2-5-生产者等待策略-WaitStrategy"><a href="#2-5-生产者等待策略-WaitStrategy" class="headerlink" title="2.5 生产者等待策略 WaitStrategy"></a>2.5 生产者等待策略 WaitStrategy</h3><p>1，(常用）BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</p><p>2，BusySpinWaitStrategy：线程一直自旋等待，可能比较耗cpu</p><p>3，LiteBlockingWaitStrategy：线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在signalNeeded.getAndSet,如果两个线程同时访问一个访问waitfor,一个访问signalAll时，可以减少lock加锁次数.</p><p>4，LiteTimeoutBlockingWaitStrategy：与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛异常。</p><p>5，PhasedBackoffWaitStrategy：根据时间参数和传入的等待策略来决定使用哪种等待策略</p><p>6，TimeoutBlockingWaitStrategy：相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛异常</p><p>7，（常用）YieldingWaitStrategy：尝试100次，然后Thread.yield()让出cpu</p><p>8，（常用）SleepingWaitStrategy : sleep</p><h3 id="2-6-多消费者"><a href="#2-6-多消费者" class="headerlink" title="2.6 多消费者"></a>2.6 多消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置消费者(多个)</span></div><div class="line">disruptor.handleEventsWith(<span class="keyword">new</span> LongEventHandler(), <span class="keyword">new</span> LongEventHandler());</div></pre></td></tr></table></figure><h3 id="2-7-消费者异常处理"><a href="#2-7-消费者异常处理" class="headerlink" title="2.7 消费者异常处理"></a>2.7 消费者异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置消费者</span></div><div class="line">EventHandler h = (event, sequence, endOfBatch) -&gt; &#123;</div><div class="line">    System.out.println(event);</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"消费者出现异常"</span>);</div><div class="line">&#125;;</div><div class="line">disruptor.handleEventsWith(h);</div><div class="line"></div><div class="line"><span class="comment">// 设置消费者异常处理</span></div><div class="line">disruptor.handleExceptionsFor(h).with(<span class="keyword">new</span> ExceptionHandler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEventException</span><span class="params">(Throwable ex, <span class="keyword">long</span> sequence, Object event)</span> </span>&#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnStartException</span><span class="params">(Throwable ex)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"启动时出现异常"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOnShutdownException</span><span class="params">(Throwable ex)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"关闭时出现异常"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>默认：disruptor.setDefaultExceptionHandler()</p><p>覆盖：disruptor.handleExceptionFor().with()</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JMH 基本使用；Disruptor 入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习(一)</title>
    <link href="http://yoursite.com/2020-04-07-Spring%20Cloud/SpringCloud%E5%AD%A6%E4%B9%A0(1).html"/>
    <id>http://yoursite.com/2020-04-07-Spring Cloud/SpringCloud学习(1).html</id>
    <published>2020-04-07T14:13:12.000Z</published>
    <updated>2020-04-11T05:35:34.361Z</updated>
    
    <content type="html"><![CDATA[<p>从单机到微服务架构演化。</p><a id="more"></a><h2 id="1-单机应用"><a href="#1-单机应用" class="headerlink" title="1. 单机应用"></a>1. 单机应用</h2><ul><li><p>有一个商城系统，有一个财务系统，公用一个 DB，会有很多问题。</p></li><li><p>商城系统不再是一个单独的应用，而是一个服务或者说模块，最简单的可以用 Maven 弄一个聚合项目，这时开发已经是面向服务的，但是部署还是一个单体应用。</p></li><li><p>SOA（面向服务开发）：每个服务打成不同的 war 包，服务间通过 RPC 进行远程调用。最初使的远程调用有 WebService（soap、wsdl、cxf…）。这时是强依赖，一个服务挂了，所有依赖的服务都挂了。</p></li><li>微服务：面向需求维度（比如订单服务）、面向应用（面向技术），相比 SOA 服务粒度更小。服务拆分全凭经验。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从单机到微服务架构演化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(六)</title>
    <link href="http://yoursite.com/2020-04-06-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(6).html"/>
    <id>http://yoursite.com/2020-04-06-多线程与高并发/多线程高并发学习(6).html</id>
    <published>2020-04-06T14:13:12.000Z</published>
    <updated>2020-04-06T13:29:16.524Z</updated>
    
    <content type="html"><![CDATA[<p>线程池。ThreadPoolExecutor、ForkJoinPool、ThreadPoolExecutor 源码解读</p><a id="more"></a><h2 id="1-线程池相关接口认识"><a href="#1-线程池相关接口认识" class="headerlink" title="1. 线程池相关接口认识"></a>1. 线程池相关接口认识</h2><ul><li>Callable：和 Runnable 类似，但是可以有返回值和抛出异常。但是不能直接作为 Thread 的 target</li><li>Future：Callable 的返回结果</li><li>FutureTask：Runnable+Future</li><li>Executor：线程执行接口，将线程定义和执行分开</li><li>ExecutorService：在 Executor 基础上增加一些线程控制方法。</li><li>CompletableFuture：可以同时管理多个 Future，支持流式操作</li></ul><h2 id="2-线程池之-ThreadPoolExecutor"><a href="#2-线程池之-ThreadPoolExecutor" class="headerlink" title="2. 线程池之 ThreadPoolExecutor"></a>2. 线程池之 ThreadPoolExecutor</h2><p>ThreadPoolExecutor 中有一个线程队列，一个任务队列。</p><h3 id="2-1-自定义线程池"><a href="#2-1-自定义线程池" class="headerlink" title="2.1 自定义线程池"></a>2.1 自定义线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>,</div><div class="line">   <span class="number">20</span>, TimeUnit.SECONDS,</div><div class="line">   <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">4</span>),  <span class="comment">// 队列大小</span></div><div class="line">   Executors.defaultThreadFactory(), <span class="comment">// 线程工厂</span></div><div class="line">   <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class="comment">// 拒绝策略</span></div></pre></td></tr></table></figure><p>七个参数：</p><ol><li>corePoolSize：核心线程数。创建后不会释放</li><li>maxmumPoolSize：最大线程数。</li><li>keepAliveTime：线程没有工作时存活时间</li><li>timeunit：时间单位</li><li>workQueue：阻塞队列，队列大小</li><li>threadFactory：线程工厂</li><li>handler：拒绝策略。CallerRuns(调用者执行)、Discard(丢弃)、DiscardOldest(丢弃最早的)、Abort(报错)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_ThreadPool</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        Task(<span class="keyword">int</span> i)&#123;</div><div class="line">            <span class="keyword">this</span>.i = i;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" ==&gt; "</span> + i);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.in.read();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"task["</span>+i+<span class="string">"]"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>,</div><div class="line">                <span class="number">20</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">4</span>),  <span class="comment">// 队列大小</span></div><div class="line">                Executors.defaultThreadFactory(), <span class="comment">// 线程工厂</span></div><div class="line">                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()); <span class="comment">// 拒绝策略</span></div><div class="line"></div><div class="line">        <span class="comment">// 启动八个线程</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">            pool.execute(<span class="keyword">new</span> Task(i));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// pool.submit() // submit 和 execute 有啥区别？</span></div><div class="line">        System.out.println(<span class="string">"队列："</span>+pool.getQueue());</div><div class="line">        <span class="comment">// 再加任务就会执行拒绝策略，应为定义的线程池最多只能8个任务</span></div><div class="line">        pool.execute(<span class="keyword">new</span> Task(<span class="number">100</span>));</div><div class="line">        System.out.println(<span class="string">"队列："</span>+pool.getQueue());</div><div class="line"></div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-Executors-提供-ThreadPoolExecutor"><a href="#2-2-Executors-提供-ThreadPoolExecutor" class="headerlink" title="2.2 Executors 提供 ThreadPoolExecutor"></a>2.2 Executors 提供 ThreadPoolExecutor</h3><h4 id="2-2-1-FixedThreadPool"><a href="#2-2-1-FixedThreadPool" class="headerlink" title="2.2.1 FixedThreadPool"></a>2.2.1 FixedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_FixedThreadPoll</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">            executorService.execute(()-&gt;&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">500</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(Thread.currentThread().getName());</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        System.out.println(executorService);</div><div class="line"></div><div class="line">        executorService.shutdown();</div><div class="line">        System.out.println(executorService.isShutdown());</div><div class="line">        System.out.println(executorService.isTerminated());</div><div class="line"></div><div class="line">        Thread.sleep(<span class="number">5000</span>);</div><div class="line"></div><div class="line">        System.out.println(executorService.isShutdown());</div><div class="line">        System.out.println(executorService.isTerminated());</div><div class="line">        System.out.println(executorService);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际上就是 ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line"></div><div class="line"><span class="comment">// task 队列大小</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(Integer.MAX_VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 拒绝策略</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler = <span class="keyword">new</span> AbortPolicy();</div></pre></td></tr></table></figure><h4 id="2-2-2-SingleThreadExecutor"><a href="#2-2-2-SingleThreadExecutor" class="headerlink" title="2.2.2 SingleThreadExecutor"></a>2.2.2 SingleThreadExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_SingleThreadPool</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> j = i;</div><div class="line">            executorService.execute(()-&gt;&#123;</div><div class="line">                System.out.println(j + Thread.currentThread().getName());</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        executorService.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实际上就是 ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">  (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">   <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div></pre></td></tr></table></figure><p>只有一个线程的线程池，可以保证任务顺序执行。</p><h4 id="2-2-3-CachedThreadPool"><a href="#2-2-3-CachedThreadPool" class="headerlink" title="2.2.3 CachedThreadPool"></a>2.2.3 CachedThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">   <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">   <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div></pre></td></tr></table></figure><h4 id="2-2-4-ScheduledThreadPool"><a href="#2-2-4-ScheduledThreadPool" class="headerlink" title="2.2.4 ScheduledThreadPool"></a>2.2.4 ScheduledThreadPool</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_ScheduledThreadPool</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ScheduledExecutorService es = Executors.newScheduledThreadPool(<span class="number">5</span>);</div><div class="line">        es.scheduleAtFixedRate(()-&gt;&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName());</div><div class="line">        &#125;, <span class="number">500</span>, <span class="number">2000</span>, TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</div><div class="line">      DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</div><div class="line">      <span class="keyword">new</span> DelayedWorkQueue());</div></pre></td></tr></table></figure><h2 id="3-线程池之-ForkJoinPool"><a href="#3-线程池之-ForkJoinPool" class="headerlink" title="3. 线程池之 ForkJoinPool"></a>3. 线程池之 ForkJoinPool</h2><p>ForkJoinPool 中，可以对任务进行拆分和合并。</p><p>ThreadPoolExecutor: 一个一个线程从队列中取任务。无法拆分任务，也就没法把大任务分解给其他线程处理。</p><p>WorkStealing: 线程池中每一个线程都维护着自己的任务队列。如果某个线程任务执行完了，可以从其他线程拿一个过来执行，本质上是 ForkJoinPool</p><p>ForkJoinPool 例子参考 Java 讲义。</p><h2 id="4-ThreadPoolExecutor-源码解析"><a href="#4-ThreadPoolExecutor-源码解析" class="headerlink" title="4. ThreadPoolExecutor 源码解析"></a>4. ThreadPoolExecutor 源码解析</h2><p>addWorker：添加线程</p><ol><li>肯定有容器装线程。</li><li>涉及到多线程，肯定要做同步</li><li>考虑到性能问题，肯定不会直接使用 synchronized。他要么用 lock 要么用 cas（自旋）</li><li>count++ 线程数加一</li><li>addworker 增加worker</li><li>start work 启动worker</li></ol><p>Worker类：<br>  实现：Runnable 线程任务<br>  继承：AQS，因为有多个现象抢这个 worker，所以本身作为锁<br>  成员变量：thread 当前在处理哪个线程</p><p>execute方法：</p><ol><li>判断是否可以启动核心线程</li><li>判断是否可以加入队列</li><li>判断是否可以启动非核心线程</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程池。ThreadPoolExecutor、ForkJoinPool、ThreadPoolExecutor 源码解读&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(五)</title>
    <link href="http://yoursite.com/2020-04-05-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(5).html"/>
    <id>http://yoursite.com/2020-04-05-多线程与高并发/多线程高并发学习(5).html</id>
    <published>2020-04-05T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:11.075Z</updated>
    
    <content type="html"><![CDATA[<p>同步容器的学习（Set、List、Map）。</p><a id="more"></a><h2 id="1-From-HashTable-to-ConcurrrentHashMap"><a href="#1-From-HashTable-to-ConcurrrentHashMap" class="headerlink" title="1. From HashTable to ConcurrrentHashMap"></a>1. From HashTable to ConcurrrentHashMap</h2><ol><li>HashTable:早期使用 synchronized 实现，所有方法同步</li><li>HashMap:所有方法没有同步，线程不安全</li><li>SynchronizedHashMap:使用 synchronized 实现，但是锁的粒度更小一点</li><li>ConcurrentHashMap:使用 CAS 实现，专为高并发设计，<br>高并发 put 效率较低（因为要维护其他信息），但是高并发 get 效率极高，适合读多写少场景</li></ol><h3 id="1-1-HashTable、SynchronizedHashMap-不足"><a href="#1-1-HashTable、SynchronizedHashMap-不足" class="headerlink" title="1.1 HashTable、SynchronizedHashMap 不足"></a>1.1 HashTable、SynchronizedHashMap 不足</h3><ul><li>可伸缩性是一种障碍，因为一次只能有一个线程可以访问hash表。</li><li>这样仍不足以提供真正的线程安全性，许多公用的混合操作仍然需要额外的同步。例如判断集合不为空则删除一个元素，多线程同时处理最后一个元素时就有问题<ul><li>锁住整个集合</li><li>在遍历时也可以调用 List.toArray() ，在不同步的情况下对数组进行迭代，避免抛出  ConcurrentModificationException  异常，但如果容器数据较大的话，代价比较大</li></ul></li></ul><h3 id="1-2-HashTable、HashMap-区别"><a href="#1-2-HashTable、HashMap-区别" class="headerlink" title="1.2 HashTable、HashMap 区别"></a>1.2 HashTable、HashMap 区别</h3><ul><li>均实现 Map 接口， 但是Hashtable的实现是基于Dictionary抽象类。</li><li><p>HashMap 中 null 可以作为 key 和 value，所以判断 key 是否存在需要用 contiansKey ;HashTable 中 null 既不能作为 key 也不能作为 value</p></li><li><p>HashMap 不是线程安全的，在多线程环境中需要手动实现同步机制；HashTable 单个操作是线程安全的，可直接用于多线程环境，但是混合操作不一定线程安全，比如：<code>if(shm.containsKey(&#39;key&#39;)) shm.remove</code></p></li></ul><h3 id="1-3-ConcurrentHashMap"><a href="#1-3-ConcurrentHashMap" class="headerlink" title="1.3 ConcurrentHashMap"></a>1.3 ConcurrentHashMap</h3><p> ConcurrentHashMap 提供了和 Hashtable 以及 SynchronizedMap 中所不同的锁机制。Hashtable 中采用的锁机制是一次锁住整个 hash 表，从而同一时刻只能由一个线程对其进行操作；而 ConcurrentHashMap 中则是一次锁住一个桶。<br>ConcurrentHashMap 默认将 hash 表分为 16 个桶，诸如 get,put,remove 等常用操作只锁当前需要用到的桶。这样，原来只能一个线程进入，现在却能同时有 16 个写线程执行，并发性能的提升是显而易见的。</p><p>上面说到的 16 个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在 size 等操作时才需要锁住整个 hash 表。 </p><p>在迭代方面，ConcurrentHashMap使用了一种不同的迭代方式。<br>在这种迭代方式中，当iterator被创建后集合再发生改变就不再是抛出ConcurrentModificationException，<br>取而代之的是  在改变时new新的数据从而不影响原有的数据 。<br>iterator完成后再将头指针替换为新的数据 。<br>这样iterator线程可以使用原来老的数据。<br>而写线程也可以并发的完成改变。</p><h3 id="1-4-ConcurrentSkipListMap"><a href="#1-4-ConcurrentSkipListMap" class="headerlink" title="1.4 ConcurrentSkipListMap"></a>1.4 ConcurrentSkipListMap</h3><p>没有 ConcurrentTreeMap，因为 TreeMap 实现使用的是红黑树，但是使用红黑树来实现 CAS 比较复杂，所以提供了 ConcurrentSkipListMap 来代替 Tree 结构来做排序。</p><p>跳跃表数据结构。</p><h2 id="2-From-Vector-to-Queue"><a href="#2-From-Vector-to-Queue" class="headerlink" title="2. From Vector to Queue"></a>2. From Vector to Queue</h2><ol><li>Vector:早期使用 synchronized 实现，所有方法同步</li><li>ArrayList:所有方法没有同步，线程不安全</li><li>SynchronizedList:使用 synchronized 实现，但是锁的粒度更小一点</li><li>ConcurrentLinkedQueue:使用 CAS 实现，专为高并发设计</li></ol><h3 id="2-1-Queue-和-List-区别"><a href="#2-1-Queue-和-List-区别" class="headerlink" title="2.1 Queue 和 List 区别"></a>2.1 Queue 和 List 区别</h3><p>Queue 添加了一些对线程友好的 API，offer、pool、peek</p><p>BlockingQueue：put、take（阻塞）</p><h3 id="2-2-CopyOnWriteList"><a href="#2-2-CopyOnWriteList" class="headerlink" title="2.2 CopyOnWriteList"></a>2.2 CopyOnWriteList</h3><p>写时复制容器 copy on write。多线程环境下，写时效率低，读时效率高，适合写少读多的环境</p><h2 id="3-模拟十个窗口同时售票"><a href="#3-模拟十个窗口同时售票" class="headerlink" title="3. 模拟十个窗口同时售票"></a>3. 模拟十个窗口同时售票</h2><h3 id="3-1-ArrayList-线程不安全"><a href="#3-1-ArrayList-线程不安全" class="headerlink" title="3.1 ArrayList 线程不安全"></a>3.1 ArrayList 线程不安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller1</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> List&lt;String&gt; tickets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="comment">// ArrayList 线程不安全，会出现超卖现象</span></div><div class="line">                <span class="keyword">while</span> (tickets.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-2-Vector-单个原子操作线程安全"><a href="#3-2-Vector-单个原子操作线程安全" class="headerlink" title="3.2 Vector 单个原子操作线程安全"></a>3.2 Vector 单个原子操作线程安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller2</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Vector&lt;String&gt; tickets = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="comment">// Vector 线程安全，但是这里是两个原子操作，还是会出现超卖现象</span></div><div class="line">                <span class="keyword">while</span> (tickets.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-3-对容器加锁"><a href="#3-3-对容器加锁" class="headerlink" title="3.3 对容器加锁"></a>3.3 对容器加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller3</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> List&lt;String&gt; tickets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">synchronized</span> (tickets)&#123;</div><div class="line">                    <span class="comment">// ArrayList 线程不安全，会出现超卖现象</span></div><div class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                        <span class="keyword">if</span>(tickets.size()&lt;=<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                        System.out.println(<span class="string">"success to sell:"</span> + tickets.remove(<span class="number">0</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-4-使用-ConcurrentQueue-提高并发性"><a href="#3-4-使用-ConcurrentQueue-提高并发性" class="headerlink" title="3.4 使用 ConcurrentQueue 提高并发性"></a>3.4 使用 ConcurrentQueue 提高并发性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_TicketSeller4</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Queue&lt;String&gt; tickets = <span class="keyword">new</span> ConcurrentLinkedDeque&lt;&gt;();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) tickets.add(<span class="string">"ticket "</span> + i);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    String t = tickets.poll();</div><div class="line">                    <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">break</span>;</div><div class="line">                    System.out.println(<span class="string">"success to sell:"</span> + t);</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>CAS 不一定比 synchronized 效率高，需要根据实际情况来考虑。</p><h2 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h2><ul><li>Map： <a href="https://blog.csdn.net/itm_hadf/article/details/7506529" target="_blank" rel="external">https://blog.csdn.net/itm_hadf/article/details/7506529</a> </li><li><a href="https://blog.csdn.net/sunxianghuang/article/details/52221913" target="_blank" rel="external">https://blog.csdn.net/sunxianghuang/article/details/52221913</a> </li><li><a href="https://www.jianshu.com/p/1f19835e05c0" target="_blank" rel="external">https://www.jianshu.com/p/1f19835e05c0</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同步容器的学习（Set、List、Map）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(四)</title>
    <link href="http://yoursite.com/2020-04-04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(4).html"/>
    <id>http://yoursite.com/2020-04-04-多线程与高并发/多线程高并发学习(4).html</id>
    <published>2020-04-04T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:03.393Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal 的使用和理解、强软若虚引用理解。</p><a id="more"></a><h2 id="1-ThreadLocal"><a href="#1-ThreadLocal" class="headerlink" title="1. ThreadLocal"></a>1. ThreadLocal</h2><p>应用：Spring 声明式事务。Spring 声明式事务在<strong>一个线程</strong>多个方法内，需要保证多个方法一个事务，所以需要多个方法去拿 connection 时，取的是一个连接，如果直接去连接池取很可能这几个方法每个方法取的不是一个 connection，可以把 connection 放入 ThreadLocal 中，从而实现该功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ThreadLocal1</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> Person p = <span class="keyword">new</span> Person();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(p.name);</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            p.name = <span class="string">"lisi"</span>;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">    String name = <span class="string">"zhangsan"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ThreadLocal2</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> ThreadLocal&lt;Person&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(tl.get());</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            tl.set(<span class="keyword">new</span> Person());</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-强引用"><a href="#2-强引用" class="headerlink" title="2. 强引用"></a>2. 强引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_NormalReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        M m = <span class="keyword">new</span> M();</div><div class="line">        <span class="comment">// 对象没有被引用时会被回收</span></div><div class="line">        m = <span class="keyword">null</span>;</div><div class="line">        System.gc();</div><div class="line">        System.in.read();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">M</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// M 对象被回收时，会执行该方法</span></div><div class="line">        System.out.println(<span class="string">"finalize..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-软引用"><a href="#3-软引用" class="headerlink" title="3. 软引用"></a>3. 软引用</h2><p>内存不足时，会被回收，主要用于<strong>缓存</strong>。</p><p><code>-Xms20m -Xmx20m</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_SoftReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SoftReference&lt;<span class="keyword">byte</span>[]&gt; s = <span class="keyword">new</span> SoftReference&lt;&gt;(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>]);</div><div class="line">        System.out.println(s.get());</div><div class="line">        System.gc();</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        System.out.println(s.get());</div><div class="line"></div><div class="line">        <span class="comment">// 软引用，堆内存不足时，会回收</span></div><div class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">15</span>];</div><div class="line">        System.out.println(s.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-弱引用"><a href="#4-弱引用" class="headerlink" title="4. 弱引用"></a>4. 弱引用</h2><p>只要执行 gc 弱引用就会被回收，一般用于容器。比如 WeakHashMap、ThreadLocal。</p><p>比如，只要强引用消失，该对象就只有弱引用，就会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_WeakReference</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        WeakReference&lt;M&gt; m = <span class="keyword">new</span> WeakReference&lt;&gt;(<span class="keyword">new</span> M());</div><div class="line">        System.out.println(m.get());</div><div class="line">        <span class="comment">// 只要执行gc，弱引用就会被回收</span></div><div class="line">        System.gc();</div><div class="line">        System.out.println(m.get());</div><div class="line"></div><div class="line">        ThreadLocal&lt;M&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line">        <span class="comment">// 设置到了当前线程的map中，所以其他线程读不到。</span></div><div class="line">        tl.set(<span class="keyword">new</span> M());</div><div class="line">        <span class="comment">// 即使 ThreadLocal 中 Entry 是弱引用，还是会有内存泄漏的问题，用完务必记得 remove</span></div><div class="line">        tl.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Thread 中有一个成员变量，<code>ThreadLocal.ThreadLocalMap threadLocals = null;</code></p><p><code>tl.set(new M());</code>实际上是把 M 对象设置到了当前线程的 threadLocals map 中。所以一个线程读取不到另外一个线程设置的值。</p><p><img src="../../images/juc/ThreadLocal.png" alt=""></p><p>为什么 Entry 要使用弱引用？</p><p>若是强引用，即使 t1=null（t1 为局部变量，方法结束就消失），但 key 的引用依然指向 ThreadLocal 对象，因为很多线程是长期存在的（threadLocals 长期存在），所以会存在内存泄漏，即 ThreadLocal 对象长期存在得不到回收，而使用弱引用则不会。</p><p>即使使用了若引用，但还是会有内存泄漏存在，ThreadLocal 被回收，key 的值变为 null，则导致整个 value 再也无法被访问到，因此依然存在内存泄漏。所以 t1 用完后务必手动 remove 掉。</p><h2 id="5-虚引用"><a href="#5-虚引用" class="headerlink" title="5. 虚引用"></a>5. 虚引用</h2><p>无法访问到虚引用中的值，一般用于 JVM 中控制<strong>堆外内存</strong>的回收。对象被回收时，会往指定队列插入一个数据，可以通过监控该队列来手动回收堆外内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_PhantomReference</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Object&gt; LIST= <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;M&gt; QUEUE = <span class="keyword">new</span> ReferenceQueue();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        PhantomReference&lt;M&gt; r = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> M(), QUEUE);</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                LIST.add(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                    Thread.currentThread().interrupt();</div><div class="line">                &#125;</div><div class="line">                System.out.println(r.get());</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                Reference&lt;? extends M&gt; poll = QUEUE.poll();</div><div class="line">                <span class="keyword">if</span>(poll != <span class="keyword">null</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"====虚引用对象被 JVM 回收了===="</span>+poll);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">5000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.gc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal 的使用和理解、强软若虚引用理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(三)</title>
    <link href="http://yoursite.com/2020-04-03-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(3).html"/>
    <id>http://yoursite.com/2020-04-03-多线程与高并发/多线程高并发学习(3).html</id>
    <published>2020-04-03T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:57.835Z</updated>
    
    <content type="html"><![CDATA[<p>两道面试题；AQS 源码阅读。</p><a id="more"></a><h2 id="1-面试题1-实现同步容器"><a href="#1-面试题1-实现同步容器" class="headerlink" title="1. 面试题1 - 实现同步容器"></a>1. 面试题1 - 实现同步容器</h2><p>实现一个容器，提供两个方法，add，size，写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束</p><h3 id="1-1-volatile、synchronizedList-实现（不可行）"><a href="#1-1-volatile、synchronizedList-实现（不可行）" class="headerlink" title="1.1 volatile、synchronizedList 实现（不可行）"></a>1.1 volatile、synchronizedList 实现（不可行）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview1</span> </span>&#123;</div><div class="line">    <span class="comment">// volatile 保证线程可见。其实这里有问题，volatile 修饰的是引用，应该是检测不到</span></div><div class="line">    <span class="comment">// synchronizedList 构建线程安全的 list</span></div><div class="line">    <span class="keyword">volatile</span> List&lt;Object&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        <span class="comment">// 当元素加进去之后，还没来得及 size++，其他线程来读取了。导致读取到的 size 和实际元素不一致</span></div><div class="line">        <span class="comment">// 所以 list 需要修改为线程安全的 list</span></div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_Interview1 t = <span class="keyword">new</span> T01_Interview1();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="comment">// 有时候不准，是因为没有抢占到cpu资源？</span></div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>)&#123;</div><div class="line">                    System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-2-synchronized、wait、notify-实现"><a href="#1-2-synchronized、wait、notify-实现" class="headerlink" title="1.2 synchronized、wait、notify 实现"></a>1.2 synchronized、wait、notify 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview2</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview2 t = <span class="keyword">new</span> T01_Interview2();</div><div class="line">        <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock)&#123;</div><div class="line">                System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                    t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                    <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                        <span class="comment">// notify 不会释放锁</span></div><div class="line">                        lock.notify();</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            <span class="comment">// 释放锁，让 t2 得以执行</span></div><div class="line">                            lock.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">                    lock.wait();</div><div class="line">                    System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                    lock.notify();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t2.start();</div><div class="line">        <span class="comment">// 必须保证 t2 先执行。因为必须先 wait 再 notify，否则 wait 将继续阻塞</span></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</div><div class="line">        t1.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-3-CountDownLatch-实现"><a href="#1-3-CountDownLatch-实现" class="headerlink" title="1.3 CountDownLatch 实现"></a>1.3 CountDownLatch 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview3</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview3 t = <span class="keyword">new</span> T01_Interview3();</div><div class="line">        CountDownLatch ct = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        CountDownLatch ct1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ct.countDown();</div><div class="line">                        ct1.await();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">                ct.await();</div><div class="line">                System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">                ct1.countDown();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-4-LockSupport-join实现"><a href="#1-4-LockSupport-join实现" class="headerlink" title="1.4 LockSupport +join实现"></a>1.4 LockSupport +join实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview4</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview4 t = <span class="keyword">new</span> T01_Interview4();</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 可以先 unpark 再 park，但是必须 unpark 时 t2 已经启动</span></div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"start park"</span>);</div><div class="line">            LockSupport.park();</div><div class="line">            System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">        &#125;);</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.unpark(t2);</div><div class="line">                    System.out.println(<span class="string">"unpark finish..."</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">// 这里也可以和 CountDownLunch 类似，用两套</span></div><div class="line">                        t2.join();</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-5-双重-LockSupport"><a href="#1-5-双重-LockSupport" class="headerlink" title="1.5 双重 LockSupport"></a>1.5 双重 LockSupport</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_Interview5</span> </span>&#123;</div><div class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">        list.add(o);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">elementSize</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">static</span> Thread t2 = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T01_Interview5 t = <span class="keyword">new</span> T01_Interview5();</div><div class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t1 start"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"add "</span> + i);</div><div class="line">                t.addElement(<span class="keyword">new</span> Object());</div><div class="line">                <span class="keyword">if</span>(t.elementSize() == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.unpark(t2);</div><div class="line">                    LockSupport.park();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"t1 end"</span>);</div><div class="line">        &#125;);</div><div class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"t2 start"</span>);</div><div class="line">            LockSupport.park();</div><div class="line">            System.out.println(<span class="string">"list size is 5....."</span>);</div><div class="line">            LockSupport.unpark(t1);</div><div class="line">        &#125;);</div><div class="line">        t1.start();</div><div class="line">        <span class="comment">// 有问题。LockSupport unpark 时必须要线程已经 start</span></div><div class="line">        <span class="comment">// TimeUnit.SECONDS.sleep(1);</span></div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-面试题2-实现同步容器2"><a href="#2-面试题2-实现同步容器2" class="headerlink" title="2. 面试题2 - 实现同步容器2"></a>2. 面试题2 - 实现同步容器2</h2><p>面试题：写一个固定容量同步容器，拥有put和get方法，以及getCount方法，能够支持2个生产者线程以及10个消费者线程的阻塞调用。</p><h3 id="2-1-synchronized、wait-和-notifyAll-实现"><a href="#2-1-synchronized、wait-和-notifyAll-实现" class="headerlink" title="2.1 synchronized、wait 和 notifyAll 实现"></a>2.1 synchronized、wait 和 notifyAll 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Interview1</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(getCount() == MAX)&#123;</div><div class="line">            System.out.println(<span class="string">"list is full....wait"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.wait();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        lists.add(t);</div><div class="line">        count++;</div><div class="line">        <span class="comment">// 通知消费者消费</span></div><div class="line">        <span class="keyword">this</span>.notifyAll();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 这里应该用 while 而不是 if。因为都是 notifyAll，只生产两个数据，但是唤醒了 10 个线程</span></div><div class="line">        <span class="comment">// 所以每个线程唤醒后，需要重新判断 count 是不是 0</span></div><div class="line">        <span class="keyword">while</span>(getCount() == <span class="number">0</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"list is empty....wait"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.wait();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        T t = lists.removeFirst();</div><div class="line">        count--;</div><div class="line">        <span class="comment">// 通知生产者生产</span></div><div class="line">        <span class="keyword">this</span>.notifyAll();</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T02_Interview1&lt;String&gt; t = <span class="keyword">new</span> T02_Interview1&lt;&gt;();</div><div class="line">        <span class="comment">// 消费</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" consumer： "</span> + t.get());</div><div class="line">            &#125;,<span class="string">"c"</span>+i).start();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 生产</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                t.put(Thread.currentThread().getName()+ <span class="string">" data"</span>);</div><div class="line">            &#125;, <span class="string">"p"</span>+i).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-2-ReentrantLock、Condition-实现"><a href="#2-2-ReentrantLock、Condition-实现" class="headerlink" title="2.2 ReentrantLock、Condition 实现"></a>2.2 ReentrantLock、Condition 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Interview2</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> Condition producer = lock.newCondition();</div><div class="line">    <span class="keyword">private</span> Condition consumer = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">while</span>(getCount() == MAX)&#123;</div><div class="line">                producer.await();</div><div class="line">                System.out.println(<span class="string">"list is full....wait"</span>);</div><div class="line">            &#125;</div><div class="line">            lists.add(t);</div><div class="line">            count++;</div><div class="line">            consumer.signalAll();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        T t = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="comment">// 这里应该用 while 而不是 if。因为都是 notifyAll，只生产两个数据，但是唤醒了 10 个线程</span></div><div class="line">            <span class="comment">// 所以每个线程唤醒后，需要重新判断 count 是不是 0</span></div><div class="line">            <span class="keyword">while</span>(getCount() == <span class="number">0</span>)&#123;</div><div class="line">                consumer.await();</div><div class="line">                System.out.println(<span class="string">"list is empty....wait"</span>);</div><div class="line">            &#125;</div><div class="line">            t = lists.removeFirst();</div><div class="line">            count--;</div><div class="line">            producer.signalAll();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-AQS-源码阅读"><a href="#3-AQS-源码阅读" class="headerlink" title="3. AQS 源码阅读"></a>3. AQS 源码阅读</h2><h3 id="3-1-读源码原则"><a href="#3-1-读源码原则" class="headerlink" title="3.1 读源码原则"></a>3.1 读源码原则</h3><ul><li>跑不起来不读</li><li>解决问题就好-目的性</li><li>一条线索到底</li><li>无关细节略过</li><li>一般不读静态</li><li>一般动态读法</li><li>尽量理解别人的思路</li></ul><h3 id="3-2-AQS-源码阅读"><a href="#3-2-AQS-源码阅读" class="headerlink" title="3.2 AQS 源码阅读"></a>3.2 AQS 源码阅读</h3><h4 id="3-2-1-方法调用图"><a href="#3-2-1-方法调用图" class="headerlink" title="3.2.1 方法调用图"></a>3.2.1 方法调用图</h4><p><img src="../../images/juc/AQS源码阅读1.png" alt=""></p><h4 id="3-2-2-类关系图"><a href="#3-2-2-类关系图" class="headerlink" title="3.2.2 类关系图"></a>3.2.2 类关系图</h4><p><img src="../../images/juc/AQS源码阅读2.png" alt=""></p><h4 id="3-2-3-数据结构"><a href="#3-2-3-数据结构" class="headerlink" title="3.2.3 数据结构"></a>3.2.3 数据结构</h4><p><img src="../../images/juc/AQS源码阅读3.png" alt=""></p><h3 id="3-2-4-理解"><a href="#3-2-4-理解" class="headerlink" title="3.2.4 理解"></a>3.2.4 理解</h3><ol><li>AQS 核心就是用 CAS 操作代替 sync 锁定整条链表的操作。</li><li>入队时，需要查看该节点的前置节点是否是 head，如果是则尝试获取锁，否则 park，所以是双向链表。</li></ol><h3 id="3-3-VarHandle"><a href="#3-3-VarHandle" class="headerlink" title="3.3 VarHandle"></a>3.3 VarHandle</h3><p>指向某个变量的引用。<code>x=x+10;</code>不是原子性的，如果要做到线程安全，需要加锁，但是如果使用 VarHandle 可以不加锁来实现原子操作。所以，VarHandle 可以实现普通属性也可以进行原子操作。</p><p>VarHandle 使用 c、c++ 语言调用 cpu 原语实现。它比<strong>反射</strong>的效率更高，反射每次都需要检查；VarHandle 可以理解为直接操作二进制码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_VarHandle</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">8</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> VarHandle handle;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// x 可以操作 8，handle 也可以</span></div><div class="line">            handle = MethodHandles.lookup().findVarHandle(T03_VarHandle.class, <span class="string">"x"</span>, <span class="keyword">int</span>.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T03_VarHandle t = <span class="keyword">new</span> T03_VarHandle();</div><div class="line">        <span class="comment">// 获取和设置</span></div><div class="line">        System.out.println(handle.get(t));</div><div class="line">        handle.set(t,<span class="number">9</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">        <span class="comment">// cas操作</span></div><div class="line">        handle.compareAndSet(t, <span class="number">9</span>, <span class="number">10</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">        <span class="comment">// cas操作</span></div><div class="line">        handle.getAndAdd(t, <span class="number">10</span>);</div><div class="line">        System.out.println(t.x);</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两道面试题；AQS 源码阅读。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(二)</title>
    <link href="http://yoursite.com/2020-04-02-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(2).html"/>
    <id>http://yoursite.com/2020-04-02-多线程与高并发/多线程高并发学习(2).html</id>
    <published>2020-04-02T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:49.299Z</updated>
    
    <content type="html"><![CDATA[<p>可重入锁；CountDownLatch；CyclicBarrier；Phaser；ReadWriteLock；Semaphore；Exchanger；LockSupport 的理解和基本使用。</p><a id="more"></a><h2 id="1-可重入锁（ReentrantLock）"><a href="#1-可重入锁（ReentrantLock）" class="headerlink" title="1. 可重入锁（ReentrantLock）"></a>1. 可重入锁（ReentrantLock）</h2><p>同一个线程去申请锁时，发现该锁本身就是自己所有，直接执行。synchronized 是可重入的。</p><h3 id="1-1-ReentrantLock-之-lock"><a href="#1-1-ReentrantLock-之-lock" class="headerlink" title="1.1 ReentrantLock 之 lock()"></a>1.1 ReentrantLock 之 lock()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * ReentrantLock 代替 synchronized</span></div><div class="line"><span class="comment"> * 由于m1锁定this,只有m1执行完毕的时候,m2才能执行</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock1</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(i);</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(<span class="string">"m2 ......"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock1 t = <span class="keyword">new</span> T01_ReentrantLock1();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m2).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-2-ReentrantLock-之-tryLock"><a href="#1-2-ReentrantLock-之-tryLock" class="headerlink" title="1.2 ReentrantLock 之 tryLock()"></a>1.2 ReentrantLock 之 tryLock()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用tryLock进行尝试锁定，不管锁定与否，方法都将继续执行</span></div><div class="line"><span class="comment">     * 可以根据tryLock的返回值来判定是否锁定</span></div><div class="line"><span class="comment">     * 也可以指定tryLock的时间，由于tryLock(time)抛出异常，所以要注意unclock的处理，必须放到finally中</span></div><div class="line"><span class="comment">     */</span></div><div class="line"><span class="keyword">private</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">boolean</span> hasLock = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 连续5秒，尝试去获取锁</span></div><div class="line">        hasLock = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS);</div><div class="line">        System.out.println(<span class="string">"m2 ......"</span> + hasLock);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span>(hasLock) lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-3-ReentrantLock-之-lockInterruptibly"><a href="#1-3-ReentrantLock-之-lockInterruptibly" class="headerlink" title="1.3 ReentrantLock 之  lockInterruptibly()"></a>1.3 ReentrantLock 之  lockInterruptibly()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  使用ReentrantLock还可以调用lockInterruptibly方法，可以对线程interrupt方法做出响应，</span></div><div class="line"><span class="comment"> *  在一个线程等待锁的过程中，可以被打断</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock3</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            lock.lock();</div><div class="line">            System.out.println(<span class="string">"m1 start"</span>);</div><div class="line">            TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</div><div class="line">            System.out.println(<span class="string">"m1 end"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"m1 interrputed"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">             <span class="comment">// lock.lock();</span></div><div class="line">            lock.lockInterruptibly(); <span class="comment">// 在获取锁的过程中可以对interrupt()方法做出响应</span></div><div class="line">            System.out.println(<span class="string">"m2 start"</span>);</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</div><div class="line">            System.out.println(<span class="string">"m2 end"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(<span class="string">"m2 interrputed"</span>);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock3 t = <span class="keyword">new</span> T01_ReentrantLock3();</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(t::m1);</div><div class="line">        t1.start();</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(t::m2);</div><div class="line">        t2.start();</div><div class="line">        t2.interrupt();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="1-4-公平锁"><a href="#1-4-公平锁" class="headerlink" title="1.4 公平锁"></a>1.4 公平锁</h3><p>新线程来了，先检查队列是否有线程等待，如果有队列中线程先来，如果没有直接枪锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_ReentrantLock4</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            lock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 获得锁"</span>);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T01_ReentrantLock4 t = <span class="keyword">new</span> T01_ReentrantLock4();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1, <span class="string">"t1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1, <span class="string">"t2"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-CountDownLatch"><a href="#2-CountDownLatch" class="headerlink" title="2. CountDownLatch"></a>2. CountDownLatch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_CountDownLatch</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        usingCountDownLatch();</div><div class="line">        usingJoin();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingCountDownLatch</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</div><div class="line">        CountDownLatch ct = <span class="keyword">new</span> CountDownLatch(threads.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) tmp++;</div><div class="line">                ct.countDown(); <span class="comment">// 减一</span></div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ct.await();</div><div class="line">            System.out.println(<span class="string">"Latch finished..."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usingJoin</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) tmp++;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" finished"</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                threads[i].start();</div><div class="line">                threads[i].join();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Join finished..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-CyclicBarrier"><a href="#3-CyclicBarrier" class="headerlink" title="3. CyclicBarrier"></a>3. CyclicBarrier</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_CyclicBarrier</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 集齐20个线程后，执行Runnable代码</span></div><div class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">20</span>, ()-&gt;System.out.println(<span class="string">"满人，发车。"</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    cyclicBarrier.await();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-Phaser"><a href="#4-Phaser" class="headerlink" title="4. Phaser"></a>4. Phaser</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Phaser</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Random r = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">static</span> MarriagePhaser phaser = <span class="keyword">new</span> MarriagePhaser();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        phaser.bulkRegister(<span class="number">7</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"p"</span> + i)).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"新郎"</span>)).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person(<span class="string">"新娘"</span>)).start();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MarriagePhaser</span> <span class="keyword">extends</span> <span class="title">Phaser</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAdvance</span><span class="params">(<span class="keyword">int</span> phase, <span class="keyword">int</span> registeredParties)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (phase)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人到齐了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人吃完了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                    System.out.println(<span class="string">"所有人离开了！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    System.out.println(<span class="string">"婚礼结束！新郎新娘抱抱！"</span> + registeredParties);</div><div class="line">                    System.out.println();</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arrive</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 到达现场！\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 吃完!\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leave</span><span class="params">()</span> </span>&#123;</div><div class="line">            milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">            System.out.printf(<span class="string">"%s 离开！\n"</span>, name);</div><div class="line">            phaser.arriveAndAwaitAdvance();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span>(name.equals(<span class="string">"新郎"</span>) || name.equals(<span class="string">"新娘"</span>)) &#123;</div><div class="line">                milliSleep(r.nextInt(<span class="number">1000</span>));</div><div class="line">                System.out.printf(<span class="string">"%s 洞房！\n"</span>, name);</div><div class="line">                phaser.arriveAndAwaitAdvance();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 注销</span></div><div class="line">                phaser.arriveAndDeregister();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            arrive();</div><div class="line">            eat();</div><div class="line">            leave();</div><div class="line">            hug();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">milliSleep</span><span class="params">(<span class="keyword">int</span> milli)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(milli);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-ReadWriteLock"><a href="#5-ReadWriteLock" class="headerlink" title="5. ReadWriteLock"></a>5. ReadWriteLock</h2><p>共享锁（读锁）、排他锁（写锁）。读写比大的时候可以大大提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">    <span class="keyword">static</span> Lock readLock = readWriteLock.readLock(); <span class="comment">// 读锁可以立即进入</span></div><div class="line">    <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(Lock lock)</span></span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            System.out.println(<span class="string">"read over"</span>+value);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Lock lock, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            value = v;</div><div class="line">            System.out.println(<span class="string">"write over"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T05_ReadWriteLock t = <span class="keyword">new</span> T05_ReadWriteLock();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"><span class="comment">//            new Thread(()-&gt;&#123;t.read(lock);&#125;).start();</span></div><div class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;t.read(readLock);&#125;).start();</div><div class="line">            <span class="keyword">if</span>(i&gt;<span class="number">7</span>)&#123;</div><div class="line">                <span class="keyword">int</span> finalI = i;</div><div class="line"><span class="comment">//                new Thread(()-&gt;&#123;t.write(lock, finalI);&#125;).start();</span></div><div class="line">                <span class="keyword">new</span> Thread(()-&gt;&#123;t.write(writeLock, finalI);&#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-Semaphore（限流）"><a href="#6-Semaphore（限流）" class="headerlink" title="6. Semaphore（限流）"></a>6. Semaphore（限流）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_Semaphore</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 最多允许2个线程同时执行</span></div><div class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                semaphore.acquire();</div><div class="line">                System.out.println(<span class="string">"T1 running"</span>);</div><div class="line">                Thread.sleep(<span class="number">200</span>);</div><div class="line">                System.out.println(<span class="string">"T1 end"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                semaphore.release();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                semaphore.acquire();</div><div class="line">                System.out.println(<span class="string">"T2 running"</span>);</div><div class="line">                Thread.sleep(<span class="number">200</span>);</div><div class="line">                System.out.println(<span class="string">"T2 end"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                semaphore.release();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="7-Exchanger"><a href="#7-Exchanger" class="headerlink" title="7. Exchanger"></a>7. Exchanger</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T7_Exchanger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;&gt;();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            String s = <span class="string">"T1"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s=exchanger.exchange(s);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"T1："</span>+s);</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            String s = <span class="string">"T2"</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s=exchanger.exchange(s);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"T2："</span>+s);</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="8-LockSupport"><a href="#8-LockSupport" class="headerlink" title="8. LockSupport"></a>8. LockSupport</h2><p>unpark 可以先于 park 调用。wait、await 一定基于锁。 LockSupport 不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T08_LockSupport</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                System.out.println(i);</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</div><div class="line">                    LockSupport.park();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        t.start();</div><div class="line"></div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</div><div class="line">        System.out.println(<span class="string">"After 4 seconds..."</span>);</div><div class="line">        LockSupport.unpark(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可重入锁；CountDownLatch；CyclicBarrier；Phaser；ReadWriteLock；Semaphore；Exchanger；LockSupport 的理解和基本使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程高并发学习(一)</title>
    <link href="http://yoursite.com/2020-04-01-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0(1).html"/>
    <id>http://yoursite.com/2020-04-01-多线程与高并发/多线程高并发学习(1).html</id>
    <published>2020-04-01T14:13:12.000Z</published>
    <updated>2020-04-06T14:01:43.156Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal 的使用和理解、强软若虚引用理解。</p><p>线程基础：启动线程的四种方式；Sleep、Yield、Join；线程状态（五种）；synchronized；synchronized 底层实现；volatile；CAS 理解。</p><a id="more"></a><h2 id="1-什么是线程？"><a href="#1-什么是线程？" class="headerlink" title="1. 什么是线程？"></a>1. 什么是线程？</h2><p>参考 Java 讲义</p><h2 id="2-如何启动线程？"><a href="#2-如何启动线程？" class="headerlink" title="2. 如何启动线程？"></a>2. 如何启动线程？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建线程的方式</span></div><div class="line"><span class="comment"> * 1. 继承 Thread</span></div><div class="line"><span class="comment"> * 2. 实现 Runnable</span></div><div class="line"><span class="comment"> * 3. lambda(其实就是 Runnable)</span></div><div class="line"><span class="comment"> * 4. FutureTask</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T01_CreateThread</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo01(), <span class="string">"ThreadDemo01"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo02(), <span class="string">"ThreadDemo02"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"ThreadDemo03"</span>).start();</div><div class="line"></div><div class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"====="</span> + i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">new</span> Thread(task, <span class="string">"ThreadDemo04"</span>).start();</div><div class="line">        System.out.println(<span class="string">"===============&gt;"</span>+task.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-Sleep、Yield、Join"><a href="#3-Sleep、Yield、Join" class="headerlink" title="3. Sleep、Yield、Join"></a>3. Sleep、Yield、Join</h2><ul><li>Sleep：睡眠</li><li>Yield：让出 cpu，回到就绪状态，有可能又立即回到该线程</li><li>Join：T1.join(T2)，等 T2 执行完再执行 T1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T02_Sleep_Join_Yield</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        testJoin();</div><div class="line">        testYield();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testYield</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread yieldThread01 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>)&#123;</div><div class="line">                    Thread.yield();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"yieldThread01 ======&gt;"</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="string">"yieldThread01"</span>);</div><div class="line"></div><div class="line">        Thread yieldThread02 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>)&#123;</div><div class="line">                    Thread.yield();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"yieldThread02 ======&gt;"</span> + i);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="string">"yieldThread02"</span>);</div><div class="line">        <span class="comment">// 发现 yieldThread01、yieldThread02 交互执行</span></div><div class="line">        yieldThread02.start();</div><div class="line">        yieldThread01.start();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testJoin</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t.start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            t.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 因为 t join 了主线程，需要等 t 执行完</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"main"</span> + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-ThreadState"><a href="#4-ThreadState" class="headerlink" title="4. ThreadState"></a>4. ThreadState</h2><p>NEW、RUNNABLE、Running、BLOCKED、WAITING、TIMED_WAITING、TERMINATED</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T03_Thread_State</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread th = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">2000l</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 新建：NEW</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        th.start();</div><div class="line">        <span class="comment">// 就绪：RUNNABLE</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        Thread.sleep(<span class="number">200l</span>);</div><div class="line">        <span class="comment">// TIMED_WAITING</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">        Thread.sleep(<span class="number">2000l</span>);</div><div class="line">        <span class="comment">// 死亡：TERMINATED</span></div><div class="line">        System.out.println(th.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-synchronized"><a href="#5-synchronized" class="headerlink" title="5. synchronized"></a>5. synchronized</h2><ol><li>为什么要加锁？两个程序对同一个数字加一，如果不加锁，可能最终结果是1。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1000</span>;</div><div class="line">    <span class="comment">// 如果不加 synchronized，可能两个线程同时拿到 1000，然后都减1后，count 值是999，应该是998才对</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            count--;</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"count:"</span> + count);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_02 T = <span class="keyword">new</span> T04_Synchronized_02();</div><div class="line">        <span class="comment">// 启动1000个线程去消费1000个数据。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(T).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>对某个对象加锁、对 this 加锁、对方法加锁、对静态方法加锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * synchronized 可以锁定的位置</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSyncObject</span><span class="params">()</span></span>&#123;</div><div class="line">        Object o = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">            System.out.println(<span class="string">"===testSyncObject==="</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testSyncThis</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"===testSyncThis==="</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testSyncMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"===testSyncMethod==="</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testSyncStaticMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"===testSyncStaticMethod==="</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>同步和非同步方法可以同时调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_03</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m1 start..."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"m1 end..."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 发现 m2 在 m1 sleep 期间执行了</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m2 start..."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">500l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"m2 end..."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_03 t = <span class="keyword">new</span> T04_Synchronized_03();</div><div class="line">        <span class="keyword">new</span> Thread(t::m1,<span class="string">"m1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m2,<span class="string">"m2"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>对业务写方法加锁，对读业务方法不加锁（会有脏读问题）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_04</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Accout accout = <span class="keyword">new</span> Accout();</div><div class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;accout.setBalance(<span class="number">100</span>);&#125;).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">500l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 脏读(因为此时还没有写完，但是读操作没有上锁，直接读取，导致脏读)</span></div><div class="line">        System.out.println(accout.getBalance());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(accout.getBalance());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Accout</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> balance;</div><div class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000l</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.balance = balance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁，也就是说synchronized获得的锁是可重入的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_05</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> T04_Synchronized_05().m1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m1 start"</span>);</div><div class="line">        <span class="comment">// 调用该对象同步方法(重入)</span></div><div class="line">        m2();</div><div class="line">        System.out.println(<span class="string">"m1 end"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"m2 start"</span>);</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>子类调用父类的同步方法，说明 synchronized 是可重入的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_06</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> T04_Synchronized_06().m2();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"child m2 start"</span>);</div><div class="line">        <span class="keyword">super</span>.m2();</div><div class="line">        System.out.println(<span class="string">"child m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"parent m2 start"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"parent m2 end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>程序在执行过程中，如果出现异常，默认情况锁会被释放,所以，在并发处理的过程中，有异常要多加小心，不然可能会发生不一致的情况。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_07</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_07 t1 = <span class="keyword">new</span> T04_Synchronized_07();</div><div class="line">        T04_Synchronized_07 t2 = <span class="keyword">new</span> T04_Synchronized_07();</div><div class="line">        <span class="keyword">new</span> Thread(t1::m,<span class="string">"t1"</span>).start();</div><div class="line">        <span class="comment">// t1 抛出异常，导致 t2 得到执行机会</span></div><div class="line">        <span class="keyword">new</span> Thread(t1::m,<span class="string">"t2"</span>).start();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"start"</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            count++;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"count:"</span> + count);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(count == <span class="number">5</span>) &#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li><p>synchronized优化：同步代码块中的语句越少越好</p></li><li><p>不要以字符串常量作为锁定对象，因为可能和某些类库锁定冲突，导致诡异的死锁阻塞</p></li><li><p>应该避免将锁定对象的引用变成另外的对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T04_Synchronized_08</span> </span>&#123;</div><div class="line">    <span class="comment">/*final*/</span> Object o = <span class="keyword">new</span> Object();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：m start"</span>);</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T04_Synchronized_08 t = <span class="keyword">new</span> T04_Synchronized_08();</div><div class="line">        <span class="keyword">new</span> Thread(t::m,<span class="string">"t1"</span>).start();</div><div class="line">        <span class="keyword">new</span> Thread(t::m,<span class="string">"t2"</span>).start();</div><div class="line">        <span class="comment">// 锁对象发生改变，所以t2线程得以执行，如果注释掉这句话，线程2将永远得不到执行机会</span></div><div class="line">        t.o = <span class="keyword">new</span> Object();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="6-synchronized-底层实现"><a href="#6-synchronized-底层实现" class="headerlink" title="6. synchronized 底层实现"></a>6. synchronized 底层实现</h2><p>JDK 早期使用的是重量级锁。后来提出了锁升级的概念。</p><p>锁升级</p><ul><li>偏向锁：线程来了之后，<strong>不加锁</strong>，只是记录线程 ID，认为这个对象是这个线程独有</li><li>自旋锁：线程来了之后，发现和记录的线程 ID 不相等，则进行锁升级。锁升级首先尝试进行自旋锁的升级。对象被其他线程锁定时，在旁边转圈，默认转 10 圈，如果还没有拿到就升级重量级锁。<strong>线程数量少，线程执行时间短</strong>则考虑自旋锁，否则消耗 CPU 太大，应该用重量级锁。</li><li>重量级锁：经过 OS，进入等待队列，不再占用 CPU 时间。</li></ul><h2 id="7-volatile"><a href="#7-volatile" class="headerlink" title="7. volatile"></a>7. volatile</h2><ul><li><p>保证线程可见性（MESI）：通过 CPU 的缓存一致性协议实现</p><ul><li>java 有堆内存（共享内存）和栈内存（线程工作内存），栈内存访问堆内存中值时，每个线程会copy 一个副本到自己的栈内存。那么如果该值被某个线程修改，什么时候写回到共享内存不好控制（<strong>应该是修改后立马写回，待确认</strong>），并且其他线程什么时候发现该值已经改变了也不好控制。所以一个线程对共享数据的更改，不能及时反应到其他线程，这就叫线程之间的不可见。volatile 可以解决该问题。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * volatile 关键字，使一个变量在多个线程间可见</span></div><div class="line"><span class="comment"> * A B线程都用到一个变量，java默认是A线程中保留一份copy，这样如果B线程修改了该变量，则A线程未必知道</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 在下面的代码中，running是存在于堆内存的t对象中</span></div><div class="line"><span class="comment"> * 当线程t1开始运行的时候，会把running值从内存中读到t1线程的工作区，在运行过程中直接使用这个copy值，并不会每次都去</span></div><div class="line"><span class="comment"> * 读取堆内存，这样，当主线程修改running的值之后，t1线程感知不到，所以不会停止运行</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 使用volatile，将会强制所有线程都去堆内存中读取running的值</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_01</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"m start"</span>);</div><div class="line">        <span class="keyword">while</span> (running)&#123;&#125;</div><div class="line">        System.out.println(<span class="string">"m end"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T05_Volatile_01 t = <span class="keyword">new</span> T05_Volatile_01();</div><div class="line">        <span class="keyword">new</span> Thread(t::m).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 主线程修改值，如果不用 volatile，其他线程不可见</span></div><div class="line">        t.running = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>禁止指令重排序（CPU 为了提高效率，可能一个指令没有执行完时就执行下一个指令，这时需要编译器可以对指令进行重新排序）</p><ul><li>DCL（Double Check Lock） 单例</li></ul></li><li>volatile 修饰的引用类型（包括数组）只能保证引用本身的可见性，不能保证内部字段的可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_02</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> T05_Volatile_02 t = <span class="keyword">new</span> T05_Volatile_02();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"m start"</span>);</div><div class="line">        <span class="keyword">while</span> (running)&#123;&#125;</div><div class="line">        System.out.println(<span class="string">"m end"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(t::m).start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        t.running = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_03</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.a = a;</div><div class="line">            <span class="keyword">this</span>.b = b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> Data data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread writer = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">                data = <span class="keyword">new</span> Data(i, i);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Thread reader = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">            <span class="keyword">while</span> (data == <span class="keyword">null</span>) &#123;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> x = data.a;</div><div class="line">            <span class="keyword">int</span> y = data.b;</div><div class="line">            <span class="keyword">if</span>(x != y) &#123;</div><div class="line">                System.out.printf(<span class="string">"a = %s, b=%s%n"</span>, x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        reader.start();</div><div class="line">        writer.start();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            reader.join();</div><div class="line">            writer.join();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"end"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>volatile 并不能保证多个线程共同修改 running 变量时所带来的不一致问题，也就是说 volatile 不能替代 synchronized，synchronized 可以保证可见性和原子性，volatile 只能保证可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T05_Volatile_04</span> </span>&#123;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">            <span class="comment">/*synchronized (this)&#123;*/</span></div><div class="line">                count++;</div><div class="line">            <span class="comment">/*&#125;*/</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        T05_Volatile_04 t = <span class="keyword">new</span> T05_Volatile_04();</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(t::m);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i].join();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(t.count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="8-CAS-自旋锁、无锁优化、乐观锁"><a href="#8-CAS-自旋锁、无锁优化、乐观锁" class="headerlink" title="8. CAS(自旋锁、无锁优化、乐观锁)"></a>8. CAS(自旋锁、无锁优化、乐观锁)</h2><ul><li>Compare And Set</li><li>cas(V, Excected, NewValue)<ul><li>if V == E 设置新值</li><li>otherwise try again or fail</li><li>例如执行 m=0;m++。cas(0,1){for(;;) 如果当前m值==0，则执行 m=1}</li></ul></li><li><p>CPU 是指令级操作，只有一步原子操作，不可被打断</p></li><li><p>会有 ABA 问题。解决：1. 忽略，2. 加版本号</p></li></ul><h2 id="9-CAS-在-JDK-中的应用（AtomicInteger、Unsafe-类）"><a href="#9-CAS-在-JDK-中的应用（AtomicInteger、Unsafe-类）" class="headerlink" title="9. CAS 在 JDK 中的应用（AtomicInteger、Unsafe 类）"></a>9. CAS 在 JDK 中的应用（AtomicInteger、Unsafe 类）</h2><h3 id="9-1-AtomicInteger"><a href="#9-1-AtomicInteger" class="headerlink" title="9.1 AtomicInteger"></a>9.1 AtomicInteger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 解决同样的问题的更高效的方法，使用AtomXXX类</span></div><div class="line"><span class="comment"> * AtomXXX类本身方法都是原子性的，但不能保证多个方法连续调用是原子性的</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T06_AtomicInteger_01</span> </span>&#123;</div><div class="line">    AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            count.incrementAndGet();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        T06_AtomicInteger_01 t = <span class="keyword">new</span> T06_AtomicInteger_01();</div><div class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            threads.add(<span class="keyword">new</span> Thread(t::m));</div><div class="line">        &#125;</div><div class="line">        threads.forEach(o -&gt;&#123;</div><div class="line">            o.start();</div><div class="line">        &#125;);</div><div class="line">        threads.forEach(o -&gt;&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                o.join();</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.println(t.count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="9-2-LongAdder"><a href="#9-2-LongAdder" class="headerlink" title="9.2 LongAdder"></a>9.2 LongAdder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T07_LongAdder_01</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> AtomicLong count2 = <span class="keyword">new</span> AtomicLong();</div><div class="line">    <span class="keyword">static</span> LongAdder count3 = <span class="keyword">new</span> LongAdder();</div><div class="line">    <span class="keyword">static</span> Object o = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">1000</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (o)&#123;</div><div class="line">                        count1++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count1:"</span>+count1+<span class="string">";sync time:"</span> + (System.currentTimeMillis() - start));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) count2.incrementAndGet();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count2:"</span>+count2+<span class="string">";atomic time:"</span> + (System.currentTimeMillis() - start));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</div><div class="line">            threads[i] = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100000</span>; j++) count3.increment();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].start();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) threads[i].join();</div><div class="line">        System.out.println(<span class="string">"count3:"</span>+count3+<span class="string">";atomic time:"</span> + (System.currentTimeMillis() - start));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>synchronized 知识回顾</li><li>CAS 学习</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal 的使用和理解、强软若虚引用理解。&lt;/p&gt;
&lt;p&gt;线程基础：启动线程的四种方式；Sleep、Yield、Join；线程状态（五种）；synchronized；synchronized 底层实现；volatile；CAS 理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 - Observer</title>
    <link href="http://yoursite.com/2020-03-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Observer.html"/>
    <id>http://yoursite.com/2020-03-20-设计模式/设计模式-Observer.html</id>
    <published>2020-03-20T14:13:12.000Z</published>
    <updated>2020-04-06T14:02:42.510Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之 Observer 模式。定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖它的对象都得到通知并自动更新。</p><a id="more"></a><h2 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h2><p><img src="../../images/dp/Obsever01.png" alt=""></p><p>Subject：提供增加观察者、删除观察者和通知所有观察者的方法。注意具体主题中会维护一个私有的观察者列表。</p><p>Observer：提供接收主题消息的方法。具体观察者中会维护一个 Subject 成员变量，用于注册和反注册。</p><p>注意：</p><ul><li>如果主题把数据直接通过 update 方法推送给观察者，则是推数据方式。</li><li>如果主题只是通过 update 方法通知观察者数据有变化，观察者根据自己需求拉取主题数据则是拉数据方式。</li></ul><h2 id="2-求职中心和求职者"><a href="#2-求职中心和求职者" class="headerlink" title="2. 求职中心和求职者"></a>2. 求职中心和求职者</h2><p>求职中心有新的职位信息时，打电话把职位信息推送给每个求职者。推数据方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  主题</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察者 求职中心。有新的求职信息则通知所有求职者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hearTelephone</span><span class="params">(String msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体主题</span></div><div class="line"><span class="comment"> * 求职中心。有新的求职信息则通知所有求职者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeekJobCenter</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line"></div><div class="line">    String msg;</div><div class="line">    <span class="keyword">boolean</span> changed;</div><div class="line">    Set&lt;Observer&gt; observers; <span class="comment">// 观察者列表。</span></div><div class="line">    SeekJobCenter()&#123;</div><div class="line">        msg = <span class="string">""</span>;</div><div class="line">        changed = <span class="keyword">false</span>;</div><div class="line">        observers = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 如果有改变则通知观察者</span></div><div class="line">        <span class="keyword">if</span>(changed)&#123;</div><div class="line">            observers.stream().forEach(o -&gt; &#123;</div><div class="line">                <span class="comment">// 直接把数据推送到观察者</span></div><div class="line">                o.hearTelephone(msg);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 求职中心接收新职位方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveNewMessage</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(str.equals(msg))&#123;</div><div class="line">            changed = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            msg = str;</div><div class="line">            changed = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students01</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Subject subject;</div><div class="line">    File myFile;</div><div class="line"></div><div class="line">    Students01(Subject subject, String fileName)&#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">        myFile = <span class="keyword">new</span> File(fileName);</div><div class="line">        subject.addObserver(<span class="keyword">this</span>); <span class="comment">// 向求职中心注册</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hearTelephone</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            RandomAccessFile out = <span class="keyword">new</span> RandomAccessFile(myFile, <span class="string">"rw"</span>);</div><div class="line">            out.seek(out.length());</div><div class="line">            out.write(msg.getBytes()); <span class="comment">// 把求职信息记入自己的小本本</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-商店和顾客"><a href="#3-商店和顾客" class="headerlink" title="3. 商店和顾客"></a>3. 商店和顾客</h2><p>商店有时会有商品打折。每次打折，商店会通知所有在该商店注册了的顾客有商品打折了，但是只是通知，并不会打具体的折扣信息发送出去，因为商店不知道顾客是否需要这些数据，所以如果顾客需要，自己拉取需要的折扣信息即可。拉数据方式。</p><p>代码和推数据方式类似，只是 update 方法不再提送主题数据。</p><h2 id="4-观察者与多主题"><a href="#4-观察者与多主题" class="headerlink" title="4. 观察者与多主题"></a>4. 观察者与多主题</h2><p>李先生希望及时知道气象站所维护的每日的天气数据，同时也希望及时知道旅行社每日的旅游信息。</p><p>代码也类似。只是具体观察者维护多个 Subject，同时 update 方法传递一个 Subject 参数，从而知道这是哪个主题发出的数据。</p><h2 id="5-Java-API-中的-Observable-和-Observer"><a href="#5-Java-API-中的-Observable-和-Observer" class="headerlink" title="5. Java API 中的 Observable 和 Observer"></a>5. Java API 中的 Observable 和 Observer</h2><p>就是主题和抽象观察者。</p><h2 id="6-加入事件"><a href="#6-加入事件" class="headerlink" title="6. 加入事件"></a>6. 加入事件</h2><p><img src="../../images/dp/Observer.png" alt=""></p><p>主题（事件源对象）：小孩</p><p>观察者：爸爸、妈妈</p><p>事件：时间、地点、什么事（醒了、尿床了…）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 小孩：主题、事件源对象</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</div><div class="line">    <span class="comment">// 观察者列表</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</div><div class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(observer == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通知观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(WeakupEvent event)</span></span>&#123;</div><div class="line">        observers.stream().forEach(o -&gt;&#123;</div><div class="line">            o.action(event);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 小孩醒了，通知所有观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weekup</span><span class="params">()</span></span>&#123;</div><div class="line">        WeakupEvent event = <span class="keyword">new</span> WeakupEvent(<span class="keyword">this</span>, <span class="string">"bed"</span>, <span class="keyword">new</span> Date());</div><div class="line">        <span class="comment">// 传递事件（包含了事件源对象）</span></div><div class="line">        notifyObservers(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象事件</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">     <span class="function">T <span class="title">getSource</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakupEvent</span> <span class="keyword">implements</span> <span class="title">Event</span>&lt;<span class="title">Child</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line">    String location;</div><div class="line">    Date weakupTime;</div><div class="line"></div><div class="line">    WeakupEvent(Child child, String location, Date weakupTime)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="keyword">this</span>.location = location;</div><div class="line">        <span class="keyword">this</span>.weakupTime = weakupTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Child <span class="title">getSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getWeakupTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> weakupTime;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">// 观察者对主题消息的处理</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dad</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line"></div><div class="line">    Dad(Child child)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="comment">// 观察者注入主题中</span></div><div class="line">        <span class="keyword">this</span>.child.addObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">feed</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Dad is feeding。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"dad:"</span>+event.getLocation() + <span class="string">" "</span> + event.getWeakupTime());</div><div class="line"></div><div class="line">        feed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体观察者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mom</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    Child child;</div><div class="line"></div><div class="line">    Mom(Child child)&#123;</div><div class="line">        <span class="keyword">this</span>.child = child;</div><div class="line">        <span class="comment">// 观察者注入主题中</span></div><div class="line">        <span class="keyword">this</span>.child.addObserver(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hug</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Mon is hug。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">(WeakupEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">        hug();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之 Observer 模式。定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖它的对象都得到通知并自动更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Observer" scheme="http://yoursite.com/tags/Observer/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 - Singleton</title>
    <link href="http://yoursite.com/2020-03-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-singleton.html"/>
    <id>http://yoursite.com/2020-03-20-设计模式/设计模式-singleton.html</id>
    <published>2020-03-20T14:13:12.000Z</published>
    <updated>2020-04-06T14:48:03.067Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之 Singleton 模式。</p><p>模式引入：有时候系统的某些类确实不需要多个对象。</p><a id="more"></a><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h2><p>类加载到内存后，就实例化一个单例，JVM保证线程安全。唯一缺点：不管用到与否，类装载时就完成实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饿汉式：在 JVM 加载单价类时创建它的唯一实例。</span></div><div class="line"><span class="comment"> * 缺点：还没有使用该实例，实例就已经创建了</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h2><p>虽然达到了按需初始化的目的，但却带来线程不安全的问题。可以通过synchronized解决，但也带来效率下降。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饿汉式：减小锁粒度，以提高效率</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletion</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singletion uniqueInstance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singletion</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singletion <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singletion.class)&#123;</div><div class="line">                Thread.sleep(<span class="number">10</span>);</div><div class="line">                <span class="comment">// 这里必须判断，只让第一个进来的线程创建实例，否则还是存在同步问题</span></div><div class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123;</div><div class="line">                    uniqueInstance = <span class="keyword">new</span> Singletion();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> uniqueInstance;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> 这里可能有比较耗时的初始化动作，不需要加锁</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> uniqueInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-需不需要加-volatile"><a href="#3-需不需要加-volatile" class="headerlink" title="3. 需不需要加 volatile?"></a>3. 需不需要加 volatile?</h2><p>答案：需要。JVM 创建一个对象时，分为三步</p><ol><li>申请内存空间</li><li>设置成员变量的值</li><li>对象地址赋值给变量</li></ol><p>但是如果发生指令重排序，可能2、3步位置可能会互换。这时可能刚刚执行完1、3两个步骤，就是说成员变量还没来得及赋值，还是初始值的时候，第二个线程来了，而且那个单例变量的值不为空，那么就拿去直接使用了，并且可能修改、使用那些还没来得及初始化的成员变量，导致一些问题。但是加了 volatile 之后，这个对象的指令重排序就不存在了。</p><h2 id="4-静态内部类模式"><a href="#4-静态内部类模式" class="headerlink" title="4. 静态内部类模式"></a>4. 静态内部类模式</h2><p>JVM保证单例。加载外部类时不会加载内部类，这样可以实现懒加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 静态内部类方法：JVM 保证单例。但是加载外部类时不会内部类，这样可以实现懒加载</span></div><div class="line"><span class="comment"> * 缺点：看似完美，但是存在反射和反序列攻击</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton UNIQUEINSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.UNIQUEINSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        Singleton singleton = Singleton.getInstance();</div><div class="line"></div><div class="line">        <span class="comment">// 反射攻击</span></div><div class="line">        Constructor&lt;Singleton&gt; constructor = Singleton.class.getDeclaredConstructor();</div><div class="line">        constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Singleton newSingleton = constructor.newInstance();</div><div class="line">        <span class="comment">// false</span></div><div class="line">        System.out.println(singleton == newSingleton);</div><div class="line"></div><div class="line">        <span class="comment">// 反序列攻击</span></div><div class="line">        <span class="keyword">byte</span>[] serialize = SerializationUtils.serialize(singleton);</div><div class="line">        Singleton newInstance = SerializationUtils.deserialize(serialize);</div><div class="line">        <span class="comment">// false</span></div><div class="line">        System.out.println(singleton == newInstance);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="5-枚举模式"><a href="#5-枚举模式" class="headerlink" title="5. 枚举模式"></a>5. 枚举模式</h2><p>不仅可以解决线程同步，还可以防止反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 枚举方式：可以防止序列化和反序列化</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line"></div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</div><div class="line">        age = <span class="number">10</span>;</div><div class="line">        System.out.println(<span class="string">"do something. age:"</span>+age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Singleton.INSTANCE.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之 Singleton 模式。&lt;/p&gt;
&lt;p&gt;模式引入：有时候系统的某些类确实不需要多个对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Singleton" scheme="http://yoursite.com/tags/Singleton/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之 - Responsibility Chain</title>
    <link href="http://yoursite.com/2020-03-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-ResponsibilityChain.html"/>
    <id>http://yoursite.com/2020-03-20-设计模式/设计模式-ResponsibilityChain.html</id>
    <published>2020-03-20T14:13:12.000Z</published>
    <updated>2020-04-19T14:53:10.389Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之 Responsibility Chain 模式。使用多个对象处理用户请求，将用户的请求分派给多个对象，这些对象被组织成一个责任链，即每个对象含有后继对象的引用，并要求责任链上的每个对象，如果能处理用户的请求，就做出处理，不再将请求传递给下一个对象。</p><a id="more"></a><h2 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h2><h2 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h2><ul><li>责任链中对象之和自己的后继节点低耦合，和其他对象毫无关联。</li><li>应用程序可以动态地增加、删除处理者或者重新指派处理者的职责。</li><li>应用程序可以动态地改变处理者之间的先后顺序。</li><li>使用责任链的用户不必知道处理者的信息。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之 Responsibility Chain 模式。使用多个对象处理用户请求，将用户的请求分派给多个对象，这些对象被组织成一个责任链，即每个对象含有后继对象的引用，并要求责任链上的每个对象，如果能处理用户的请求，就做出处理，不再将请求传递给下一个对象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>第一课 音阶</title>
    <link href="http://yoursite.com/2020-03-06-%E5%90%89%E4%BB%96/%E7%AC%AC%E4%B8%80%E8%AF%BE%20%E9%9F%B3%E9%98%B6.html"/>
    <id>http://yoursite.com/2020-03-06-吉他/第一课 音阶.html</id>
    <published>2020-03-06T14:13:12.000Z</published>
    <updated>2020-04-06T14:06:34.845Z</updated>
    
    <content type="html"><![CDATA[<p>第一课 音阶</p><a id="more"></a><h2 id="1-音阶"><a href="#1-音阶" class="headerlink" title="1. 音阶"></a>1. 音阶</h2><h3 id="1-1-什么是音阶"><a href="#1-1-什么是音阶" class="headerlink" title="1.1 什么是音阶"></a>1.1 什么是音阶</h3><p>音阶：构建音乐的四大要素之一。</p><h3 id="1-2-什么是音阶图"><a href="#1-2-什么是音阶图" class="headerlink" title="1.2 什么是音阶图"></a>1.2 什么是音阶图</h3><p>C 大调音阶图：</p><p><img src="../../images/吉他/C大调音阶图.jpg" alt=""></p><h3 id="1-3-音阶图用处"><a href="#1-3-音阶图用处" class="headerlink" title="1.3 音阶图用处"></a>1.3 音阶图用处</h3><p>音阶图用处：每个曲子都有自己的调性，一般标注在曲谱的左上角。1=C 就表示 C 调，就应该按照上面 C 大调音阶图来演奏，不然就跑调了。</p><h2 id="2-十二平均律"><a href="#2-十二平均律" class="headerlink" title="2. 十二平均律"></a>2. 十二平均律</h2><h3 id="2-1-什么是十二平均律"><a href="#2-1-什么是十二平均律" class="headerlink" title="2.1 什么是十二平均律"></a>2.1 什么是十二平均律</h3><p>一个完整的八度，由十二个半音组成，所以叫做十二平均律？嗯，后边讲了，大概就是这个意思。</p><p>3、4和7、1之间是半音，其他都是全音。</p><p><img src="../../images/吉他/十二平均律.jpg" alt=""></p><h3 id="2-2-有何用处？"><a href="#2-2-有何用处？" class="headerlink" title="2.2 有何用处？"></a>2.2 有何用处？</h3><p>吉他中，相邻两品是半个音。所以，根据十二平均律，只要知道了一根弦上的某一品的音，就可以推算出该弦每一品的音。</p><h3 id="2-3-升音、降音"><a href="#2-3-升音、降音" class="headerlink" title="2.3 升音、降音"></a>2.3 升音、降音</h3><p>升号：#</p><p>降号：b</p><p>不存在 #3、b4 和 #7、b1。因为本身就只差半个音。</p><h2 id="3-音程"><a href="#3-音程" class="headerlink" title="3. 音程"></a>3. 音程</h2><h3 id="3-1-什么是音程？"><a href="#3-1-什么是音程？" class="headerlink" title="3.1 什么是音程？"></a>3.1 什么是音程？</h3><p>音与音之间的距离。</p><p>几个音符就表示间隔几度。比如2-7，间隔6度。</p><h3 id="3-2-大-小三度、纯-增四度"><a href="#3-2-大-小三度、纯-增四度" class="headerlink" title="3.2 大/小三度、纯/增四度"></a>3.2 大/小三度、纯/增四度</h3><p>大三度：全音+全音。比如 1-3</p><p>小三度：全音+半音。比如2-4</p><p>纯四度：有半音。比如1-4</p><p>增四度：没有半音。4-7</p><h3 id="3-3-有何用处？"><a href="#3-3-有何用处？" class="headerlink" title="3.3 有何用处？"></a>3.3 有何用处？</h3><p>研究同一个品丝，弦与弦之间的关系（大三度/纯四度）。</p><h3 id="3-4-应用题"><a href="#3-4-应用题" class="headerlink" title="3.4 应用题"></a>3.4 应用题</h3><p>已知</p><ol><li>吉他同一个品丝，1-6弦，音程为：纯四、大三、纯四、纯四、纯四</li><li>五弦三品的音为 1</li></ol><p>求：各个品丝、各个弦分别表示什么音？</p><p>参考上面 C 大调音阶图验证，发现确实没错。</p><h2 id="4-音阶调性"><a href="#4-音阶调性" class="headerlink" title="4. 音阶调性"></a>4. 音阶调性</h2><p>规律：</p><ol><li>同一个品丝：一弦和六弦相差两个八度</li><li>隔一个品丝：对角线相差一个八度</li></ol><p>音名与唱名：</p><table><thead><tr><th>音名</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>简谱</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>1</td></tr><tr><td>唱名</td><td>Do</td><td>Re</td><td>mi</td><td>fa</td><td>sol</td><td>la</td><td>si</td><td>Do</td></tr></tbody></table><p>变调夹：</p><p>如果选择调性是 1=C。那么，不夹变调夹就是 C 调，夹在二品就是 D 调，夹在 4 品就是 E 调，夹在 5 品就是 F 调。和十二平均律相对应。</p><p>标准调音：A=440Hz。在标准调音下，音名的位置永远不会变化。</p><p><strong>Do 在哪个位子，推算的就是哪个调的音阶。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一课 音阶&lt;/p&gt;
    
    </summary>
    
    
      <category term="吉他" scheme="http://yoursite.com/categories/%E5%90%89%E4%BB%96/"/>
    
    
      <category term="吉他" scheme="http://yoursite.com/tags/%E5%90%89%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 每日一题</title>
    <link href="http://yoursite.com/2020-03-06-%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98.html"/>
    <id>http://yoursite.com/2020-03-06-算法与数据结构/leetcode每日一题.html</id>
    <published>2020-03-06T14:13:12.000Z</published>
    <updated>2020-04-06T14:07:31.574Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode 每日一题</p><a id="more"></a><h2 id="20200310-二叉树直径"><a href="#20200310-二叉树直径" class="headerlink" title="20200310-二叉树直径"></a>20200310-二叉树直径</h2><p>题目：给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。<strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p><p>思路：</p><ol><li>路径不一定穿过跟节点</li><li>任意节点的<strong>最长路径节点数量</strong>等于左右子节点的最大<strong>深度</strong>之和再加一</li><li><strong>最长路径长度</strong>等于最长路径节点数量减一</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a binary tree node.</span></div><div class="line"><span class="comment"> * public class TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode left;</span></div><div class="line"><span class="comment"> *     TreeNode right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">// 最长路径节点数</span></div><div class="line">    <span class="keyword">int</span> maxLength;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="comment">// 默认一个节点 </span></div><div class="line">        maxLengthNodeNumers = <span class="number">1</span>;</div><div class="line">        deep(root);</div><div class="line">        <span class="keyword">return</span> maxLengthNodeNumers - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取任意节点的最大深度</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">deep</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">        <span class="comment">// 空节点深度为 0</span></div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 左子节点，最大深度</span></div><div class="line">        <span class="keyword">int</span> L = deep(node.left);</div><div class="line">        <span class="comment">// 右子节点，最大深度</span></div><div class="line">        <span class="keyword">int</span> R = deep(node.right);</div><div class="line">        <span class="comment">// 更新最大路径节点数</span></div><div class="line">        maxLengthNodeNumers = Math.max(L+R+<span class="number">1</span>, maxLengthNodeNumers);</div><div class="line">        <span class="comment">// 返回该节点最大深度(要么左边深度大，要么右边深度大)</span></div><div class="line">        <span class="keyword">return</span> Math.max(L,R)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="20200311-数组分成和相等的三个部分"><a href="#20200311-数组分成和相等的三个部分" class="headerlink" title="20200311-数组分成和相等的三个部分"></a>20200311-数组分成和相等的三个部分</h2><p>题目：数组 A，只有可以将其划分为三个和相等的非空部分时才返回 true，否则返回 false。</p><p>形式上，如果可以找出索引 i+1 &lt; j 且满足 (A[0] + A[1] + … + A[i] == A[i+1] + A[i+2] + … + A[j-1] == A[j] + A[j-1] + … + A[A.length - 1]) 就可以将数组三等分。</p><p>思路：</p><ol><li>数组之和必须可以被三整除</li><li>数组可以分为三段，每一段之和为数组和的三分之一</li><li>数组双向索引遍历</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canThreePartsEqualSum</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sums = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length; i++) sums += A[i];</div><div class="line">    <span class="keyword">if</span>(sums%<span class="number">3</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> tmp = sums/<span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = A.length -<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> leftSums = A[left];</div><div class="line">    <span class="keyword">int</span> rightSums = A[right];</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(left&lt;right-<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(leftSums == tmp &amp;&amp; rightSums == tmp) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(leftSums != tmp)&#123;</div><div class="line">            left++;</div><div class="line">            leftSums += A[left];</div><div class="line">            <span class="comment">//System.out.println(leftSums +"====" + left);</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rightSums != tmp)&#123;</div><div class="line">            right--;</div><div class="line">            rightSums += A[right];</div><div class="line">            <span class="comment">// System.out.println(rightSums +"====" + right);</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="20200312-字符串的最大公因子"><a href="#20200312-字符串的最大公因子" class="headerlink" title="20200312-字符串的最大公因子"></a>20200312-字符串的最大公因子</h2><p>题目：对于字符串 S 和 T，只有在 S = T + … + T（T 与自身连接 1 次或多次）时，我们才认定 “T 能除尽 S”。</p><p>返回最长字符串 X，要求满足 X 能除尽 str1 且 X 能除尽 str2。</p><p>思路：</p><ol><li>X 肯定是 str1、str2中较小的字符串的子串</li><li>str1、str2 肯定都是 X 长度的整数倍</li><li>str1、str2 均由多个 X 组成</li></ol><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gcdOfStrings</span><span class="params">(String str1, String str2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(str1 == <span class="keyword">null</span> || str1 == <span class="string">""</span> || str2 == <span class="keyword">null</span> || str2 == <span class="string">""</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        String strX = (str1.length() &gt; str2.length()) ? str2 : str1;</div><div class="line">        <span class="keyword">int</span> length1 = str1.length();</div><div class="line">        <span class="keyword">int</span> length2 = str2.length();</div><div class="line">        <span class="keyword">int</span> lengthX = strX.length();</div><div class="line">        String tmpStr=<span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 从较小字符串开始遍历</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=strX.length(); i&gt;<span class="number">0</span>; i--)&#123;</div><div class="line">            strX = strX.substring(<span class="number">0</span>, i);</div><div class="line">            lengthX = strX.length();</div><div class="line">            <span class="comment">// 验证长度</span></div><div class="line">            <span class="keyword">if</span>(length1 % lengthX != <span class="number">0</span> || length2 % lengthX != <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">// 验证 str1</span></div><div class="line">            tmpStr=<span class="string">""</span>;</div><div class="line">            <span class="keyword">int</span> tmp1 = length1/lengthX;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tmp1; j++)&#123;</div><div class="line">                tmpStr = tmpStr + strX;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!tmpStr.equals(str1)) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">// 验证 str2</span></div><div class="line">            <span class="keyword">int</span> tmp2 = length2/lengthX;</div><div class="line">            tmpStr=<span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;tmp2; j++)&#123;</div><div class="line">                tmpStr = tmpStr + strX;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!tmpStr.equals(str2)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">return</span> strX;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode 每日一题&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
